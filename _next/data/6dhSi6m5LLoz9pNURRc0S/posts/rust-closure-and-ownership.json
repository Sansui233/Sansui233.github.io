{"pageProps":{"meta":{"title":"理解 Rust 闭包与环境变量所有权","date":"2022-06-14 08:00","tags":["Rust"],"categories":"学习","description":"B站反查用户弹幕小记","keywords":"Rust, 闭包, Closure, 所有权"},"mdxcode":"\"use strict\";\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    blockquote: \"blockquote\",\n    code: \"code\",\n    h2: \"h2\",\n    hr: \"hr\",\n    li: \"li\",\n    ol: \"ol\",\n    p: \"p\",\n    pre: \"pre\",\n    span: \"span\",\n    strong: \"strong\",\n    ul: \"ul\",\n    ...props.components\n  };\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"本文将以（自认为）最简单易懂的方式讲述 Rust 中的闭包与环境变量所有权的关系。在现存的类似中文教程中，要么语言表述歧义太大，逻辑上难以理清；要么试图把事情总结得过于复杂。实际上闭包对于环境变量所有权的处理规则是非常简单的。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"阅读本文需要的基础： Rust 变量的所有权、引用与借用、函数、traits。\"\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"什么是-rust-的闭包\",\n      children: \"什么是 Rust 的闭包\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Rust 中的闭包是\", _jsx(_components.strong, {\n        children: \"一种函数\"\n      }), \"。与 Rust 普通函数不同，它可以\", _jsx(_components.strong, {\n        children: \"捕获函数外部的变量并使用\"\n      }), \"。\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"基本语法：\", _jsx(_components.code, {\n        children: \"|参数列表| {函数体}\"\n      })]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-rust\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"fn\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"main\"\n        }), \"() {\\r\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"let\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-variable\",\n          children: \"x\"\n        }), \" = \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"1\"\n        }), \";\\r\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"let\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-variable\",\n          children: \"sum\"\n        }), \" = |y: \", _jsx(_components.span, {\n          className: \"hljs-type\",\n          children: \"i32\"\n        }), \"| { x + y }; \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 说明： 闭包 sum 接收一个参数 y，且捕获前面的 x = 1, 返回 x + y\"\n        }), \"\\r\\n    \", _jsx(_components.span, {\n          className: \"hljs-built_in\",\n          children: \"println!\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"{}\\\"\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-title function_ invoke__\",\n          children: \"sum\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"99\"\n        }), \")); \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 输出 100\"\n        }), \"\\r\\n\\r\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"let\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-variable\",\n          children: \"sum2\"\n        }), \" = |y :\", _jsx(_components.span, {\n          className: \"hljs-type\",\n          children: \"i32\"\n        }), \"| x + y + \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"1\"\n        }), \"; \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 也可以省略花括号\"\n        }), \"\\r\\n    \", _jsx(_components.span, {\n          className: \"hljs-built_in\",\n          children: \"println!\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"{}\\\"\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-title function_ invoke__\",\n          children: \"sum2\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"99\"\n        }), \")); \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 输出 101\"\n        }), \"\\r\\n}\\n\"]\n      })\n    }), \"\\n\", _jsxs(_components.blockquote, {\n      children: [\"\\n\", _jsxs(_components.p, {\n        children: [\"说明： 闭包 sum 接收一个参数 y，返回 x + y。其中 x 是第一行定义的 \", _jsx(_components.code, {\n          children: \"let x = 1;\"\n        }), \" ，为闭包外部的变量。\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"像 \", _jsx(_components.code, {\n        children: \"x\"\n      }), \" 这样在定义在闭包外部、可被闭包直接访问的变量，我们称为“\", _jsx(_components.strong, {\n        children: \"环境变量\"\n      }), \"”。\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"闭包中环境变量的所有权\",\n      children: \"闭包中环境变量的所有权\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"有 rust 基础的人应该知道，普通的 rust 函数的传入参数有三种形式\"\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"所有权 move（默认行为）。\"\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"可变借用，形式为 \", _jsx(_components.code, {\n          children: \"&mut param\"\n        })]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"不可变借用 ，形式为 \", _jsx(_components.code, {\n          children: \"&param\"\n        })]\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.blockquote, {\n      children: [\"\\n\", _jsx(_components.p, {\n        children: \"上述为 rust 所有权基础知识，不再赘述。\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"普通的 rust 函数可以使用参数，但无法使用环境变量。闭包则加上了 \", _jsx(_components.strong, {\n        children: \"捕获当前环境变量\"\n      }), \" 的功能。\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"捕获当前环境变量\"\n      }), \" 仅仅是指闭包 “知道有哪些环境变量”。闭包在使用环境变量时，依然可能会对环境变量执行三种操作：\"]\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"所有权 move\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"可变借用\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"不可变借用\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"具体是执行了哪种操作呢？这个问题就比较复杂了，我们可以从上面的例子出发。\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"回顾上面的例子，对于环境变量 \", _jsx(_components.code, {\n        children: \"x\"\n      }), \" ，首先排除了所有权 move。\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-rust\",\n        children: [\"    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"let\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-variable\",\n          children: \"x\"\n        }), \" = \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"1\"\n        }), \";\\r\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"let\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-variable\",\n          children: \"sum\"\n        }), \" = |y: \", _jsx(_components.span, {\n          className: \"hljs-type\",\n          children: \"i32\"\n        }), \"| { x + y }; \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 使用了 x\"\n        }), \"\\r\\n    \", _jsx(_components.span, {\n          className: \"hljs-built_in\",\n          children: \"println!\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"{}\\\"\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-title function_ invoke__\",\n          children: \"sum\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"99\"\n        }), \")); \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 输出 100\"\n        }), \"\\r\\n\\r\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"let\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-variable\",\n          children: \"sum2\"\n        }), \" = |y :\", _jsx(_components.span, {\n          className: \"hljs-type\",\n          children: \"i32\"\n        }), \"| x + y + \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"1\"\n        }), \"; \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 再次使用了 x\"\n        }), \"\\r\\n    \", _jsx(_components.span, {\n          className: \"hljs-built_in\",\n          children: \"println!\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"{}\\\"\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-title function_ invoke__\",\n          children: \"sum2\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"99\"\n        }), \")); \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 输出 101\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsxs(_components.blockquote, {\n      children: [\"\\n\", _jsxs(_components.p, {\n        children: [\"说明： \", _jsx(_components.code, {\n          children: \"x\"\n        }), \" 在 sum1 中使用后，还能在 sum2 中再次使用，说明 \", _jsx(_components.code, {\n          children: \"x\"\n        }), \" 所有权没有 move。\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"实际上，上述例子的 \", _jsx(_components.code, {\n        children: \"x\"\n      }), \" 在闭包中是作为 \", _jsx(_components.strong, {\n        children: \"不可变借用\"\n      }), \" 使用的，\", _jsxs(_components.strong, {\n        children: [\"因为这个闭包实现了 \", _jsx(_components.code, {\n          children: \"Fn\"\n        }), \" trait\"]\n      }), \"。\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"闭包的三种-traits\",\n      children: \"闭包的三种 traits\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"闭包是一种函数，它的三种 traits 恰好对应了三种处理所有权的方式。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"三种 traits 如下（划重点，请背下来）：\"\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"FnOnce\"\n        }), \"：表示此闭包调用时会获取环境变量所有权（\", _jsx(_components.strong, {\n          children: \"所有权 move\"\n        }), \")。因此取名 \", _jsx(_components.code, {\n          children: \"FnOnce\"\n        }), \"，表示此闭包只能执行一次，因为再次执行时，环境变量可能由于之前所有权 move 过，已经没法用了。\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"FnMut\"\n        }), \" ：表示此闭包调用时会对环境变量进行\", _jsx(_components.strong, {\n          children: \"可变借用\"\n        }), \"，可能会修改环境变量\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"Fn\"\n        }), \" ： 表示此闭包调用时会对环境变量进行\", _jsx(_components.strong, {\n          children: \"不可变借用\"\n        }), \"，不会修改环境变量\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"并且，\", _jsx(_components.strong, {\n        children: \"一个闭包可以同时实现多个 traits\"\n      }), \"。比如实现了 \", _jsx(_components.code, {\n        children: \"Fn\"\n      }), \" 的闭包也一定实现了 \", _jsx(_components.code, {\n        children: \"FnOnce\"\n      }), \" （后续解释）。\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"上面是从“对环境变量如何处理所有权” 来解释三个 traits，大部分教程也是这么写，但个人并不推荐完全按这样去理解。因为上述表述中，三个 traits 看起来是互不重叠的（实际并非如此），导致可能会出现这样的疑问：\"\n    }), \"\\n\", _jsxs(_components.blockquote, {\n      children: [\"\\n\", _jsxs(_components.p, {\n        children: [\"“实现了 \", _jsx(_components.code, {\n          children: \"Fn\"\n        }), \" 的闭包说是对环境变量进行了不可变借用，那怎么还能同时实现 \", _jsx(_components.code, {\n          children: \"FnOnce\"\n        }), \" ，去获取环境变量的所有权呢？到底是仅仅进行不可变借用，还是获取了所有权呢？”\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"但是看三个 traits 的源代码，可以直接回答上述问题：是不可变借用。虽然确实也实现了 \", _jsx(_components.code, {\n        children: \"FnOnce\"\n      }), \"（所有权 move） ，但并没有调用 \", _jsx(_components.code, {\n        children: \"FnOnce\"\n      }), \" 的 call 函数，而是调用了 \", _jsx(_components.code, {\n        children: \"Fn\"\n      }), \"(不可变借用) 的 call 函数。\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-rust\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"pub\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"trait\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Fn\"\n        }), \"<Args> : \", _jsx(_components.span, {\n          className: \"hljs-built_in\",\n          children: \"FnMut\"\n        }), \"<Args> {\\r\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"extern\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"rust-call\\\"\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"fn\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"call\"\n        }), \"(&\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"self\"\n        }), \", args: Args) \", _jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \"->\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"Self\"\n        }), \"::Output;\\r\\n}\\r\\n\\r\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"pub\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"trait\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"FnMut\"\n        }), \"<Args> : \", _jsx(_components.span, {\n          className: \"hljs-built_in\",\n          children: \"FnOnce\"\n        }), \"<Args> {\\r\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"extern\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"rust-call\\\"\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"fn\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"call_mut\"\n        }), \"(&\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"mut\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"self\"\n        }), \", args: Args) \", _jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \"->\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"Self\"\n        }), \"::Output;\\r\\n}\\r\\n\\r\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"pub\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"trait\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"FnOnce\"\n        }), \"<Args> {\\r\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"type\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Output\"\n        }), \";\\r\\n\\r\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"extern\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"rust-call\\\"\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"fn\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"call_once\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"self\"\n        }), \", args: Args) \", _jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \"->\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"Self\"\n        }), \"::Output;\\r\\n}\\n\"]\n      })\n    }), \"\\n\", _jsxs(_components.blockquote, {\n      children: [\"\\n\", _jsxs(_components.p, {\n        children: [\"分析：如果 \", _jsx(_components.code, {\n          children: \"FnOnce\"\n        }), \" 的 call 函数被调用，则直接传入了 \", _jsx(_components.code, {\n          children: \"self\"\n        }), \" ，也就是获取了当前的环境变量的所有权，自然运行一次后回被销毁。而 \", _jsx(_components.code, {\n          children: \"Fn\"\n        }), \" 的 call 函数传入的是不可变借用 \", _jsx(_components.code, {\n          children: \"&self\"\n        }), \"。\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"并且会发现， \", _jsx(_components.code, {\n        children: \"Fn\"\n      }), \" 的前提是实现了 \", _jsx(_components.code, {\n        children: \"FnMut\"\n      }), \" , \", _jsx(_components.code, {\n        children: \"FnMut\"\n      }), \" 的前提是实现了 \", _jsx(_components.code, {\n        children: \"FnOnce\"\n      }), \" 。\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"从继承关系来讲： \", _jsx(_components.code, {\n          children: \"Fn\"\n        }), \" 继承 \", _jsx(_components.code, {\n          children: \"FnMut\"\n        }), \" 继承 \", _jsx(_components.code, {\n          children: \"FnOnce\"\n        })]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"从访问变量的权限范围来讲： \", _jsx(_components.code, {\n          children: \"Fn\"\n        }), \" < \", _jsx(_components.code, {\n          children: \"FnMut\"\n        }), \" < \", _jsx(_components.code, {\n          children: \"FnOnce\"\n        })]\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"也可以说，\", _jsxs(_components.strong, {\n        children: [\"闭包就算实现了 \", _jsx(_components.code, {\n          children: \"FnOnce\"\n        }), \" 也不一定会用到所有权 move，因为可能还实现了 \", _jsx(_components.code, {\n          children: \"Fn\"\n        }), \" ，那么环境变量的所有权会按 \", _jsx(_components.code, {\n          children: \"Fn\"\n        }), \" 处理\"]\n      }), \"。\"]\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsxs(_components.p, {\n      children: [\"由于上述继承关系，如果定义一个普通函数，参数需要传入 \", _jsx(_components.code, {\n        children: \"FnOnce\"\n      }), \" ，实际上也可以传入 \", _jsx(_components.code, {\n        children: \"Fn\"\n      }), \" 。\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-rust\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"fn\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"fn_once\"\n        }), \"<F>(func: F)\\r\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"where\"\n        }), \"\\r\\n    F: \", _jsx(_components.span, {\n          className: \"hljs-title function_ invoke__\",\n          children: \"FnOnce\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-type\",\n          children: \"usize\"\n        }), \") \", _jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \"->\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-type\",\n          children: \"bool\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 传入闭包\"\n        }), \"\\r\\n{\\r\\n    \", _jsx(_components.span, {\n          className: \"hljs-built_in\",\n          children: \"println!\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"{}\\\"\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-title function_ invoke__\",\n          children: \"func\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"3\"\n        }), \"));\\r\\n}\\r\\n\\r\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"fn\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"main\"\n        }), \"() {\\r\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"let\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-variable\",\n          children: \"x\"\n        }), \" = \", _jsx(_components.span, {\n          className: \"hljs-built_in\",\n          children: \"vec!\"\n        }), \"[\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"1\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"2\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"3\"\n        }), \"];\\r\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"let\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-variable\",\n          children: \"closure\"\n        }), \" = |z|{z == x.\", _jsx(_components.span, {\n          className: \"hljs-title function_ invoke__\",\n          children: \"len\"\n        }), \"()}; \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 此闭包实现了 Fn、 FnMut 和 FnOnce\"\n        }), \"\\r\\n    \", _jsx(_components.span, {\n          className: \"hljs-title function_ invoke__\",\n          children: \"fn_once\"\n        }), \"(closure); \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// Fn 可传入标注为 FnOnce 的参数\"\n        }), \"\\r\\n    \", _jsx(_components.span, {\n          className: \"hljs-built_in\",\n          children: \"println!\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"{:?}\\\"\"\n        }), \", x); \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// x 还能用，所有权没转移\"\n        }), \"\\r\\n\\r\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"let\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-variable\",\n          children: \"closure2\"\n        }), \" = \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"move\"\n        }), \" |z|{z == x.\", _jsx(_components.span, {\n          className: \"hljs-title function_ invoke__\",\n          children: \"len\"\n        }), \"()}; \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"//  此闭包只实现了 FnOnce，因为 x 被强制转移所有权到闭包内部\"\n        }), \"\\r\\n    \", _jsx(_components.span, {\n          className: \"hljs-title function_ invoke__\",\n          children: \"fn_once\"\n        }), \"(closure2); \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 传入 FnOnce\"\n        }), \"\\r\\n    \", _jsx(_components.span, {\n          className: \"hljs-built_in\",\n          children: \"println!\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"{:?}\\\"\"\n        }), \", x); \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 报错，x 已经没了\"\n        }), \"\\r\\n}\\n\"]\n      })\n    }), \"\\n\", _jsxs(_components.blockquote, {\n      children: [\"\\n\", _jsxs(_components.p, {\n        children: [\"说明：fn_once 需要接收 \", _jsx(_components.code, {\n          children: \"FnOnce\"\n        }), \" 的闭包作为参数，但传入 \", _jsx(_components.code, {\n          children: \"Fn\"\n        }), \" 也是合理的，编译器也会按照 \", _jsx(_components.code, {\n          children: \"Fn\"\n        }), \" 的调用方式处理为不可变借用，并不会因为标注着 \", _jsx(_components.code, {\n          children: \"FnOnce\"\n        }), \" 而变成所有权 move。\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.blockquote, {\n      children: [\"\\n\", _jsx(_components.p, {\n        children: \"闭包对所有权的处理并不会随着标注改变，标注仅仅是为了取悦编译器 ——鲁迅\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"闭包实现三种-traits\",\n      children: \"闭包实现三种 traits\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"上述例子中，直接标注了闭包实现了三种 traits，但并没有具体说明为什么这么写就是实现了三种 traits。这是本节需要说明的内容。\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"闭包实现 traits 是\", _jsx(_components.strong, {\n        children: \"隐式\"\n      }), \"的。也就是说，你不用（也没法）标注这个闭包是实现的哪个 traits。具体实现了哪些 traits 是根据你的闭包写法决定的。\"]\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"实现\", _jsx(_components.code, {\n          children: \"FnOnce\"\n        })]\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"所有的闭包都自动实现了 \", _jsx(_components.code, {\n        children: \"FnOnce\"\n      }), \" 。不用特别做什么。\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"但更普遍的情况是，定义闭包时会顺带实现 \", _jsx(_components.code, {\n        children: \"Fn\"\n      }), \" 或者 \", _jsx(_components.code, {\n        children: \"FnMut\"\n      }), \" 。如果想要只实现 \", _jsx(_components.code, {\n        children: \"FnOnce\"\n      }), \"，不要实现另外两个，需要用 \", _jsx(_components.code, {\n        children: \"move\"\n      }), \" 。这个关键字会强制转移所有权，使闭包无法满足 \", _jsx(_components.code, {\n        children: \"FnMut\"\n      }), \" 和 \", _jsx(_components.code, {\n        children: \"Fn\"\n      }), \" 的条件。\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"例：只实现了 \", _jsx(_components.code, {\n          children: \"FnOnce\"\n        }), \" 的闭包\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-rust\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"fn\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"main\"\n        }), \"() {\\r\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"let\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-variable\",\n          children: \"x\"\n        }), \" = [\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"1\"\n        }), \",\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"2\"\n        }), \",\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"3\"\n        }), \"];\\r\\n    \\r\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"let\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-variable\",\n          children: \"closure2\"\n        }), \" = \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"move\"\n        }), \" |z|{z == x.\", _jsx(_components.span, {\n          className: \"hljs-title function_ invoke__\",\n          children: \"len\"\n        }), \"()}; \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 只实现了 FnOnce，所有权转移\"\n        }), \"\\r\\n    \", _jsx(_components.span, {\n          className: \"hljs-title function_ invoke__\",\n          children: \"closure2\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"2\"\n        }), \");\\r\\n    \\r\\n    \", _jsx(_components.span, {\n          className: \"hljs-built_in\",\n          children: \"println!\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"{:?}\\\"\"\n        }), \", x); \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 报错，x 所有权被转移\"\n        }), \"\\r\\n}\\n\"]\n      })\n    }), \"\\n\", _jsxs(_components.ol, {\n      start: \"2\",\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"实现\", _jsx(_components.code, {\n          children: \"FnMut\"\n        })]\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"在闭包中修改外部变量，即实现了 \", _jsx(_components.code, {\n        children: \"FnMut\"\n      }), \" （自然也实现了 \", _jsx(_components.code, {\n        children: \"FnOnce\"\n      }), \" ），同时没有实现 \", _jsx(_components.code, {\n        children: \"Fn\"\n      }), \" 。\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-rust\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"fn\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"main\"\n        }), \"() {\\r\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"let\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"mut \"\n        }), _jsx(_components.span, {\n          className: \"hljs-variable\",\n          children: \"x\"\n        }), \" = \", _jsx(_components.span, {\n          className: \"hljs-built_in\",\n          children: \"vec!\"\n        }), \"[\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"1\"\n        }), \",\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"2\"\n        }), \",\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"3\"\n        }), \"];\\r\\n\\r\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"let\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"mut \"\n        }), _jsx(_components.span, {\n          className: \"hljs-variable\",\n          children: \"closure\"\n        }), \" = ||{x.\", _jsx(_components.span, {\n          className: \"hljs-title function_ invoke__\",\n          children: \"push\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"4\"\n        }), \");}; \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 修改了外部的 x, 实现了 FnMut， x 所有权没有转移\"\n        }), \"\\r\\n    \", _jsx(_components.span, {\n          className: \"hljs-title function_ invoke__\",\n          children: \"closure\"\n        }), \"();\\r\\n    \\r\\n    \", _jsx(_components.span, {\n          className: \"hljs-built_in\",\n          children: \"println!\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"{:?}\\\"\"\n        }), \", x);\\r\\n}\\n\"]\n      })\n    }), \"\\n\", _jsxs(_components.ol, {\n      start: \"3\",\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"实现\", _jsx(_components.code, {\n          children: \"Fn\"\n        })]\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"在闭包中访问外部变量，不做任何修改，即实现了 \", _jsx(_components.code, {\n        children: \"Fn\"\n      }), \" （自然也实现了 \", _jsx(_components.code, {\n        children: \"FnMut\"\n      }), \" 和 \", _jsx(_components.code, {\n        children: \"FnOnce\"\n      }), \"）。\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-rust\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"fn\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"main\"\n        }), \"() {\\r\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"let\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-variable\",\n          children: \"s\"\n        }), \" = \", _jsx(_components.span, {\n          className: \"hljs-type\",\n          children: \"String\"\n        }), \"::\", _jsx(_components.span, {\n          className: \"hljs-title function_ invoke__\",\n          children: \"new\"\n        }), \"();\\r\\n\\r\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"let\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-variable\",\n          children: \"update_string\"\n        }), \" =  || \", _jsx(_components.span, {\n          className: \"hljs-built_in\",\n          children: \"println!\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"{}\\\"\"\n        }), \",s); \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 访问外部的 s, 实现了 Fn\"\n        }), \"\\r\\n\\r\\n    \", _jsx(_components.span, {\n          className: \"hljs-title function_ invoke__\",\n          children: \"exec\"\n        }), \"(update_string);\\r\\n    \", _jsx(_components.span, {\n          className: \"hljs-title function_ invoke__\",\n          children: \"exec1\"\n        }), \"(update_string);\\r\\n    \", _jsx(_components.span, {\n          className: \"hljs-title function_ invoke__\",\n          children: \"exec2\"\n        }), \"(update_string);\\r\\n}\\r\\n\\r\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"fn\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"exec\"\n        }), \"<F: \", _jsx(_components.span, {\n          className: \"hljs-title function_ invoke__\",\n          children: \"FnOnce\"\n        }), \"()>(f: F)  { \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// Fn 也可以传到 FnOnce 类型\"\n        }), \"\\r\\n    \", _jsx(_components.span, {\n          className: \"hljs-title function_ invoke__\",\n          children: \"f\"\n        }), \"() \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 调用的是 Fn，所有权不会转移\"\n        }), \"\\r\\n}\\r\\n\\r\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"fn\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"exec1\"\n        }), \"<F: \", _jsx(_components.span, {\n          className: \"hljs-title function_ invoke__\",\n          children: \"FnMut\"\n        }), \"()>(\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"mut\"\n        }), \" f: F)  { \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// Fn 也可以传到 FnMut 类型\"\n        }), \"\\r\\n    \", _jsx(_components.span, {\n          className: \"hljs-title function_ invoke__\",\n          children: \"f\"\n        }), \"()\\r\\n}\\r\\n\\r\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"fn\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"exec2\"\n        }), \"<F: \", _jsx(_components.span, {\n          className: \"hljs-title function_ invoke__\",\n          children: \"Fn\"\n        }), \"()>(f: F)  {\\r\\n    \", _jsx(_components.span, {\n          className: \"hljs-title function_ invoke__\",\n          children: \"f\"\n        }), \"()\\r\\n}\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"闭包自身的所有权\",\n      children: \"闭包自身的所有权\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"上述讨论的是闭包对于环境变量的所有权处理。那闭包自己呢？当闭包自己作为变量被传来传去时，是 Copy 还是所有权 Move？\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"答案是，\", _jsx(_components.code, {\n        children: \"Fn\"\n      }), \" 是 Copy，\", _jsx(_components.code, {\n        children: \"FnMut\"\n      }), \" 和 \", _jsx(_components.code, {\n        children: \"FnOnce\"\n      }), \" 是所有权 Move。\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-rust\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"fn\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"main\"\n        }), \"() {\\r\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"let\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-variable\",\n          children: \"x\"\n        }), \" = \", _jsx(_components.span, {\n          className: \"hljs-built_in\",\n          children: \"vec!\"\n        }), \"[\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"1\"\n        }), \",\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"2\"\n        }), \",\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"3\"\n        }), \"];\\r\\n\\r\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"let\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-variable\",\n          children: \"closure\"\n        }), \" = |z:\", _jsx(_components.span, {\n          className: \"hljs-type\",\n          children: \"usize\"\n        }), \"|{ z == x.\", _jsx(_components.span, {\n          className: \"hljs-title function_ invoke__\",\n          children: \"len\"\n        }), \"()}; \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 实现了 Fn\"\n        }), \"\\r\\n    \", _jsx(_components.span, {\n          className: \"hljs-title function_ invoke__\",\n          children: \"outter\"\n        }), \"(closure); \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 通过\"\n        }), \"\\r\\n    \", _jsx(_components.span, {\n          className: \"hljs-title function_ invoke__\",\n          children: \"outter\"\n        }), \"(closure); \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 通过\"\n        }), \"\\r\\n\\r\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"let\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-variable\",\n          children: \"closure2\"\n        }), \" = |z:\", _jsx(_components.span, {\n          className: \"hljs-type\",\n          children: \"usize\"\n        }), \"|{ x.\", _jsx(_components.span, {\n          className: \"hljs-title function_ invoke__\",\n          children: \"push\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"4\"\n        }), \");z == x.\", _jsx(_components.span, {\n          className: \"hljs-title function_ invoke__\",\n          children: \"len\"\n        }), \"()}; \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 实现了 FnMut\"\n        }), \"\\r\\n    \", _jsx(_components.span, {\n          className: \"hljs-title function_ invoke__\",\n          children: \"outter\"\n        }), \"(closure2); \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 通过\"\n        }), \"\\r\\n    \", _jsx(_components.span, {\n          className: \"hljs-title function_ invoke__\",\n          children: \"outter\"\n        }), \"(closure2); \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 报错, closure2 的所有权已被转移\"\n        }), \"\\r\\n}\\r\\n\\r\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"fn\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"outter\"\n        }), \"<T>(\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"mut\"\n        }), \" func: T)\\r\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"where\"\n        }), \" T: \", _jsx(_components.span, {\n          className: \"hljs-title function_ invoke__\",\n          children: \"FnMut\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-type\",\n          children: \"usize\"\n        }), \") \", _jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \"->\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-type\",\n          children: \"bool\"\n        }), \" { \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// Fn 可以传到 FnMut 标注的参数上\"\n        }), \"\\r\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"let\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-variable\",\n          children: \"a\"\n        }), \" = func;\\r\\n}\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"这是非常合理的，对应着 Rust 借用的规则\"\n    }), \"\\n\", _jsxs(_components.blockquote, {\n      children: [\"\\n\", _jsxs(_components.p, {\n        children: [\"在同一时间点，对于同一个变量，\", _jsx(_components.strong, {\n          children: \"要么\"\n        }), \"只能有一个可变借用(FnMut)，\", _jsx(_components.strong, {\n          children: \"要么\"\n        }), \"只能有\", _jsx(_components.strong, {\n          children: \"多个不可变借用\"\n        }), \"(Fn)。\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"至于 \", _jsx(_components.code, {\n        children: \"FnOnce\"\n      }), \"，对环境变量的访问权限这么大，还想 Copy？只能是所有权 move。\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"一些建议\",\n      children: \"一些建议\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"如果遇到函数的参数也是一个函数，需要标注 trait 的场景，又不知道到底应该标注哪一个 trait，建议先标注 Fn ( 权限最小的 trait)，由编译器提示后再进行修改。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"另外，闭包的所有权部分并不推荐背书，尤其不推荐总结为正交规则。三个 traits 的区别与联系在代码层面非常简单且容易分析，总结为正交规则反而是把简单的事情复杂化，而且难记。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"如果仍然难懂，可评论提出，后续改进。\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = props.components || ({});\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","excerpt":" 本文将以（自认为）最简单易懂的方式讲述 Rust 中的闭包与环境变量所有权的关系。在现存的类似中文教程中，要么语言表述歧义太大，逻辑上难以理清；要么试图把事情总结得过于复杂。实际上闭包对于环境变量所有权的处理规则是非常简单的。  阅读本文需要的基础： Rust 变量的所有权、引用与借用","prevPost":{"title":"记一道题排列组合题解","link":"/posts/记一道题排列组合题解"},"nextPost":{"title":"PPT母版的制作与使用方法","link":"/posts/PPT母版的制作与使用方法"},"headings":[{"title":"什么是 Rust 的闭包","rank":1,"id":"什么是-rust-的闭包"},{"title":"闭包中环境变量的所有权","rank":1,"id":"闭包中环境变量的所有权"},{"title":"闭包的三种 traits","rank":1,"id":"闭包的三种-traits"},{"title":"闭包实现三种 traits","rank":1,"id":"闭包实现三种-traits"},{"title":"闭包自身的所有权","rank":1,"id":"闭包自身的所有权"},{"title":"一些建议","rank":1,"id":"一些建议"}]},"__N_SSG":true}