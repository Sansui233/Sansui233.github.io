{"pageProps":{"meta":{"title":"部署饥荒联机版Linux服务器","date":"2022-12-28 08:00","tags":["服务器"],"categories":"游戏","description":"此文为 Docker 版饥荒联机版服务器在 CentOS 下的部署教程。","keywords":"游戏, 服务器, Linux, Docker, 摸鱼, 饥荒联机版"},"mdxcode":"\"use strict\";\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    a: \"a\",\n    blockquote: \"blockquote\",\n    code: \"code\",\n    h2: \"h2\",\n    h3: \"h3\",\n    hr: \"hr\",\n    li: \"li\",\n    ol: \"ol\",\n    p: \"p\",\n    pre: \"pre\",\n    span: \"span\",\n    strong: \"strong\",\n    ul: \"ul\",\n    ...props.components\n  };\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"此文为 Docker 版饥荒联机版服务器在 CentOS 下的部署教程。\"\n    }), \"\\n\", _jsxs(_components.blockquote, {\n      children: [\"\\n\", _jsx(_components.p, {\n        children: \"为什么要部署Linux服务器？因为玩到后面，只要一联机连主机都卡，闲得想试\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.a, {\n        href: \"https://www.roci.ltd/dstserver/\",\n        children: \"这个中文教程\"\n      }), \"讲了native steam版的安装方法，包括了Cent OS缺少的库，坑全踩了一遍写得十分详细。官方文档实在太拉，基本就是没有文档，像跨平台缺库这种事情也没有解决，没有脚本。不过教程中对于网络环境问题与mod的配置方法提得不多。\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"我这里使用的是\", _jsx(_components.a, {\n        href: \"https://hub.docker.com/r/jamesits/dst-server\",\n        children: \"Docker版本\"\n      }), \"。优点是\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"国内的云平台对于Dockerhub的加速后走内网流量，不使用公网流量下载镜像。而且国内的服务器公网下载速度堪忧。\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Docker版本的文档写得对用户友好，易上手\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"文件管理集中，比较方便。原版服务器的mod和存档是分开放的\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"也有一些在国内环境下比较要命的缺点\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"网络环境原因，无法下载创意工坊mod。最近靠改 hosts 也不行了。\"\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"如果想开代理下载，docker容器开代理（设置环境变量）非常麻烦，具体来讲\", \"\\n\", _jsxs(_components.ol, {\n          children: [\"\\n\", _jsx(_components.li, {\n            children: \"如果每次开关代理都创建一个新的容器，Steam和游戏文件的更新都得再触发一次，又消耗流量又慢\"\n          }), \"\\n\", _jsx(_components.li, {\n            children: \"如果动态修改容器的配置文件，docker需要重启才能生效，所有docker服务都得宕机一会儿\"\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"准备\",\n      children: \"准备\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"一台至少2G内存的服务器\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"使用ssh连接服务器、传输并管理文件的技能\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"docker的安装\",\n      children: \"Docker的安装\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"由于涉及到Docker镜像和Dockerhub加速的问题，具体安装步骤建议看docker的文档和各个云平台。\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"我使用的腾讯云，见\", _jsx(_components.a, {\n        href: \"https://cloud.tencent.com/document/product/1207/45596\",\n        children: \"安装 Docker 并配置镜像加速源\"\n      }), \"，大约花费2分钟。\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"服务器防火墙设置\",\n      children: \"服务器防火墙设置\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"需要放行 10999，11000，12346，12347 这四个端口的UDP流量。\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"在国内云平台的控制台-防火墙中，放行服务器的这四个端口\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"如果服务器上iptables有流量拦截，也需要放行\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"饥荒服务器镜像的启动\",\n      children: \"饥荒服务器镜像的启动\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-bash\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-built_in\",\n          children: \"mkdir\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-variable\",\n          children: \"${HOME}\"\n        }), \"/Klei \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"# 创建存放数据有文件夹\"\n        }), \"\\r\\n\\r\\n\", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"# 拉取镜像并在前台启动\"\n        }), \"\\r\\n\", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"# 由于Steam要更新，根据网络环境可能要等比较久的时间\"\n        }), \"\\r\\n\", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"# 如果实在无法连接，再考虑给容器挂个代理下载。但总体不建议容器挂代理，因为我不清楚挂代理后steam是连接到服务器的游戏端口还是连到代理的端口上去了，取消容器的代理也非常麻烦。\"\n        }), \"\\r\\ndocker run --name dst -v \", _jsx(_components.span, {\n          className: \"hljs-variable\",\n          children: \"${HOME}\"\n        }), \"/Klei:/data -p 10999-11000:10999-11000/udp -p 12346-12347:12346-12347/udp -it jamesits/dst-server:latest\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"以上命令执行期间，可以去准备一下游戏存档和Mod相关文件。\"\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"准备游戏存档和mod\",\n      children: \"准备游戏存档和Mod\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"我使用的Mac，饥荒的游戏文件相关目录位于\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-bash\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"# 游戏存档\"\n        }), \"\\r\\nSAVE_DIR=\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"~/Documents/Klei/DoNotStarveTogether/324927772/Cluster_1\\\"\"\n        }), \"\\r\\n\", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"# mod下载目录\"\n        }), \"\\r\\nMODS_DIR=\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"~/Library/Application Support/Steam/steamapps/common/Don't Starve Together/dontstarve_steam.app/Contents/mods\\\"\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"#\"\n        }), \"\\r\\n\\r\\n\", _jsx(_components.span, {\n          className: \"hljs-built_in\",\n          children: \"cd\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-variable\",\n          children: \"$SAVE_DIR\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"# 进入存档目录\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"windows可以在饥荒游戏内点数据打开游戏存档，并在Steam中查看游戏的安装目录。\"\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"准备存档信息\",\n      children: \"准备存档信息\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"点开\", _jsx(_components.a, {\n        href: \"https://accounts.klei.com/account/info\",\n        children: \"饥荒的账号\"\n      }), \"，记下 \", _jsx(_components.strong, {\n        children: \"Klei User ID\"\n      }), \"。如果没有就注册一个。\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"然后，新建\", _jsx(_components.code, {\n        children: \"adminlist.txt\"\n      }), \"，并写入你的\", _jsx(_components.strong, {\n        children: \"Klei User ID。\"\n      })]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-bash\",\n        children: [\"$ vim adminlist.txt\\r\\n\", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"# 写入以下内容\"\n        }), \"\\r\\n你的Klei User ID\\n\"]\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"点开\", _jsx(_components.a, {\n        href: \"https://accounts.klei.com/account/game/servers?game=DontStarveTogether\",\n        children: \"自建饥荒服务器的页面\"\n      }), \"，新建一个服务器，记下生成的Server Token，其他不用管。\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"然后，新建 \", _jsx(_components.code, {\n        children: \"cluster_token.txt\"\n      }), \"，并写入Server Token。\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-bash\",\n        children: [\"$ vim cluster_token.txt\\r\\n\", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"# 写入以下内容\"\n        }), \"\\r\\n你的Server Token\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"准备mods\",\n      children: \"准备mods\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"不开mod的可以跳过这一步。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"由于国内环境没法下载mod，需要把对应的mod文件复制过来。我为了方便就全复制了\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-bash\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-built_in\",\n          children: \"cp\"\n        }), \" -r \", _jsxs(_components.span, {\n          className: \"hljs-string\",\n          children: [\"\\\"\", _jsx(_components.span, {\n            className: \"hljs-variable\",\n            children: \"$MODS_DIR\"\n          }), \"\\\"\"]\n        }), \" mods\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"先查看一下目前的存档开了哪些mod。\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-bash\",\n        children: [\"$ \", _jsx(_components.span, {\n          className: \"hljs-built_in\",\n          children: \"cat\"\n        }), \" Master/modoverrides.lua\\r\\n\", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"# 开启的mod\"\n        }), \"\\r\\n\", _jsx(_components.span, {\n          className: \"hljs-built_in\",\n          children: \"return\"\n        }), \" {\\r\\n  [\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"workshop-1172839635\\\"\"\n        }), \"]={ configuration_options={ icebox_freeze=\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"0.5\\\"\"\n        }), \" }, enabled=\", _jsx(_components.span, {\n          className: \"hljs-literal\",\n          children: \"true\"\n        }), \" },\\r\\n  [\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"workshop-1294206358\\\"\"\n        }), \"]={ configuration_options={  }, enabled=\", _jsx(_components.span, {\n          className: \"hljs-literal\",\n          children: \"true\"\n        }), \" },\\r\\n}\\n\"]\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"然后，编辑 \", _jsx(_components.code, {\n        children: \"mods/dedicated_server_mods_setup.lua\"\n      }), \" 文件，写入上面的mod编号\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-bash\",\n        children: [\"$ vim mods/dedicated_server_mods_setup.lua\\r\\n\", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"# 写入以下内容\"\n        }), \"\\r\\nServerModSetup(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"workshop-1294206358\\\"\"\n        }), \")\\r\\nServerModSetup(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"workshop-1595631294\\\"\"\n        }), \")\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"至此，游戏存档和mods就准备好了。\"\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"转移游戏存档和mods至服务器\",\n      children: \"转移游戏存档和Mods至服务器\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"上传游戏存档到服务器。打包和上传文件我一般使用GUI操作，用命令行的话是这样\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-bash\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-built_in\",\n          children: \"cd\"\n        }), \" ~/Documents/Klei/DoNotStarveTogether/324927772/\\r\\ntar -cvf Cluster_1.tar.gz Cluster_1 \\r\\nscp Cluster_1.tar.gz root@myserver:/Klei/\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"如果之前的服务器连接还在，等无新日志输出后使用control+c退出容器。如果已断开连接，重新用ssh登录服务器。\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"然后可以看到在服务器的 \", _jsx(_components.code, {\n        children: \"~/Klei/DoNotStarveTogether\"\n      }), \" 中有了一个 \", _jsx(_components.code, {\n        children: \"Cluster_1\"\n      }), \" 存档。\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsxs(_components.strong, {\n        children: [\"转移游戏存档时，需要注意有两种情况（来自\", _jsx(_components.a, {\n          href: \"https://hub.docker.com/r/jamesits/dst-server\",\n          children: \"文档\"\n        }), \"）\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"第一种情况是，如果自己的存档开启了洞穴，把自己的存档覆盖过去即可。\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-bash\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-built_in\",\n          children: \"rm\"\n        }), \" -rf Cluster_1\\r\\ntar -xvf Cluster_1.tar.gz\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"第二种情况是，自己的存档没有开启洞穴，需要\"\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"在自己的电脑中，存档的上一级有个 \", _jsx(_components.code, {\n          children: \"client_save\"\n        }), \" 。复制下面的除了 \", _jsx(_components.code, {\n          children: \"session\"\n        }), \" 外的所有文件到服务器的 \", _jsx(_components.code, {\n          children: \"Cluster_1/save\"\n        }), \" 。\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"自己存档中的 \", _jsx(_components.code, {\n          children: \"Cluster_1/save/session\"\n        }), \" 需要删除，其他文件可以直接覆盖\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"存档覆盖完毕后，启动容器\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-bash\",\n        children: [\"docker start -a dst\\r\\n\", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"# 如果最后输出了 Sim Pause 就代表 OK 了，按 ctrl + c 退出，容器继续后台运行\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"我第一次装Mod启动时发生了一个莫名其妙的 \", _jsx(_components.strong, {\n        children: \"Segmentation fault\"\n      }), \"，程序退出了，但是第二次启动就好了。搜了一下\", _jsx(_components.a, {\n        href: \"https://github.com/Jamesits/docker-dst-server/issues/48\",\n        children: \"相关issue\"\n      }), \"，完全相同的情况，也是CentOS，偶尔发生，难稳定复现。\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"游玩\",\n      children: \"游玩\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"之前自己的存档叫什么名字就搜什么名字，加入就完事，好好玩吧w\"\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsx(_components.p, {\n      children: \"参考资料：\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://hub.docker.com/r/jamesits/dst-server\",\n          children: \"jamesits/dst-server\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://github.com/Jamesits/docker-dst-server/issues\",\n          children: \"docker-dst-server issue\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://www.roci.ltd/dstserver/\",\n          children: \"饥荒独立服务器入门级快速搭建\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://dontstarve.fandom.com/wiki/Guides/Don%E2%80%99t_Starve_Together_Dedicated_Servers\",\n          children: \"Guides/Don't Starve Together Dedicated Servers - Fandom\"\n        })\n      }), \"\\n\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = props.components || ({});\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","excerpt":" 此文为 Docker 版饥荒联机版服务器在 CentOS 下的部署教程。  > 为什么要部署Linux服务器？因为玩到后面，只要一联机连主机都卡，闲得想试  [这个中文教程](https://www.roci.ltd/dstserver/)讲了native steam版的安装方法，包括","prevPost":{"title":"Stable Diffusion AI 绘画的实用经验与总结","link":"/posts/2023-02-20-stable-diffusion-AI-experience"},"nextPost":{"title":"记一道题排列组合题解","link":"/posts/记一道题排列组合题解"},"headings":[{"title":"准备","rank":1,"id":"准备"},{"title":"Docker的安装","rank":1,"id":"docker的安装"},{"title":"服务器防火墙设置","rank":1,"id":"服务器防火墙设置"},{"title":"饥荒服务器镜像的启动","rank":1,"id":"饥荒服务器镜像的启动"},{"title":"准备游戏存档和Mod","rank":1,"id":"准备游戏存档和mod"},{"title":"准备存档信息","rank":2,"id":"准备存档信息"},{"title":"准备mods","rank":2,"id":"准备mods"},{"title":"转移游戏存档和Mods至服务器","rank":1,"id":"转移游戏存档和mods至服务器"},{"title":"游玩","rank":1,"id":"游玩"}]},"__N_SSG":true}