{"pageProps":{"meta":{"title":"关于指针与Golang的结构体","date":"2020-11-27 08:00","tags":["Golang"],"categories":"学习","description":"关于指针与Golang的结构体","keywords":"Mac, shell, 自动化, 脚本"},"mdxcode":"\"use strict\";\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    a: \"a\",\n    blockquote: \"blockquote\",\n    code: \"code\",\n    h2: \"h2\",\n    li: \"li\",\n    p: \"p\",\n    pre: \"pre\",\n    span: \"span\",\n    strong: \"strong\",\n    ul: \"ul\",\n    ...props.components\n  };\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"之前在学C++的时候，指针的用法就困惑了很久。后来有了计算机体系结构基础后，再加上Golang的一些说明，就突然明白了，之前为什么不理解指针。纠结的点在哪里。\"\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"指针的概念\",\n      children: \"指针的概念\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"(学的语言太多语法有些混了，看个意思就好，代码是四不像并不可以运行)\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"地址\"\n        }), \"：一个变量在内存中的存储形式是 \", _jsx(_components.strong, {\n          children: \"地址 + value\"\n        }), \"，地址是在指内存中的地址。\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"比如 \", _jsx(_components.code, {\n        children: \"int a = 3\"\n      }), \"，意思是变量 a 在内存中有一个地址，\", _jsx(_components.strong, {\n        children: \"这个地址储存的 value 为 3\"\n      }), \"。\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"指针 (pointer)\"\n        }), \" ：是一种变量，\", _jsx(_components.strong, {\n          children: \"它的 value 仍然是一个地址\"\n        }), \"。常用\", _jsx(_components.code, {\n          children: \"*\"\n        }), \"定义指针变量。\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"比如 \", _jsx(_components.code, {\n        children: \"int *b = &a\"\n      }), \"，意思是 \", _jsx(_components.strong, {\n        children: \"指针变量\"\n      }), \" b 在内存中有一个地址，\", _jsx(_components.strong, {\n        children: \"这个地址储存的 value 为 a 的地址\"\n      }), \"。\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"在使用变量（而不是声明或定义变量）时，\", _jsx(_components.code, {\n        children: \"&\"\n      }), \" 为取地址符。对应的还有一个\", _jsx(_components.code, {\n        children: \"*\"\n      }), \"为取内容符。比如\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-c++\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-type\",\n          children: \"int\"\n        }), \" a = \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"3\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-type\",\n          children: \"int\"\n        }), \" *b = &a \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 将 a 的地址作为 b 的 value\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-built_in\",\n          children: \"print\"\n        }), \"(b) \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 输出 b 的 value，结果为一个地址，等于 a 的地址(&a)\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-built_in\",\n          children: \"print\"\n        }), \"(*b) \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"//将 b 的 value 作为地址，输出地址中存的值，结果为 3\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"上面仅是个人的概念解释，尽量少地引入新概念。以上概念有更通俗的叫法。\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"比如\", _jsx(_components.code, {\n        children: \"int *b = &a\"\n      }), \"，通常会叫做“变量 b 持有 a 的引用”。个人觉得虽然直观，但对于初学者并不友好。首先，“变量 b”就没有说清楚指针变量的特殊性。然后“a 的引用”，倒是说清楚什么叫做 a 的引用啊……尤其是一些语言没有指针的概念，但引用是随处可见的（比如 Javascript 的 Object 类型）\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"golang-struct-与-指针的访问\",\n      children: \"Golang Struct 与 指针的访问\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"其实让我明白的只是因为\", _jsx(_components.a, {\n        href: \"https://tour.golang.org/moretypes/4\",\n        children: \"Go tour\"\n      }), \"中的两句话：\"]\n    }), \"\\n\", _jsxs(_components.blockquote, {\n      children: [\"\\n\", _jsx(_components.p, {\n        children: \"Struct fields can be accessed through a struct pointer.\\n结构体字段可以使用结构体指针获取。\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.blockquote, {\n      children: [\"\\n\", _jsxs(_components.p, {\n        children: [\"To access the field X of a struct when we have the struct pointer p we could write \", _jsx(_components.code, {\n          children: \"(*p).X\"\n        }), \". However, that notation is cumbersome, so the language permits us instead to write just \", _jsx(_components.code, {\n          children: \"p.X\"\n        }), \", without the explicit dereference.\\n结构体指针访问字段本来应该写成\", _jsx(_components.code, {\n          children: \"(*p).x\"\n        }), \"，但是由于这么写太蠢了，所以允许直接写成\", _jsx(_components.code, {\n          children: \"p.x\"\n        }), \"。\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"也就是说，如果见到类似\", _jsx(_components.code, {\n        children: \"T.x\"\n      }), \"的结构体访问，T有可能是结构体本身，也可能是指针……需要自行区分。仅此而已。\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"而我之前一直以为 T 只能是结构体本身= =，所以对于指针一直头大……\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"但由于存在指针这种特殊的访问方式，在结构体的组合与接口实现中会有一些想不到的情况：\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsx(_components.p, {\n          children: \"定义了一个接口Interface，方法有Intera()，Interb()\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsxs(_components.code, {\n            className: \"hljs language-go\",\n            children: [_jsx(_components.span, {\n              className: \"hljs-keyword\",\n              children: \"type\"\n            }), \" Interface \", _jsx(_components.span, {\n              className: \"hljs-keyword\",\n              children: \"interface\"\n            }), \"{\\n\\tIntera()\\n\\tInterb()\\n}\\n\"]\n          })\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsx(_components.p, {\n          children: \"定义了一个结构体Base，用结构体指针的方式实现了Intera()\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsxs(_components.code, {\n            className: \"hljs language-go\",\n            children: [_jsx(_components.span, {\n              className: \"hljs-keyword\",\n              children: \"type\"\n            }), \" Base \", _jsx(_components.span, {\n              className: \"hljs-keyword\",\n              children: \"struct\"\n            }), \" {}\\n\", _jsxs(_components.span, {\n              className: \"hljs-function\",\n              children: [_jsx(_components.span, {\n                className: \"hljs-keyword\",\n                children: \"func\"\n              }), \" \", _jsx(_components.span, {\n                className: \"hljs-params\",\n                children: \"(b *Base)\"\n              })]\n            }), \" Intera() {}\\n\"]\n          })\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsx(_components.p, {\n          children: \"定义了一个结构体Extend，匿名组合了Base，用正常结构体的方式实现了Interb()\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsxs(_components.code, {\n            className: \"hljs language-go\",\n            children: [_jsx(_components.span, {\n              className: \"hljs-keyword\",\n              children: \"type\"\n            }), \" Extend \", _jsx(_components.span, {\n              className: \"hljs-keyword\",\n              children: \"struct\"\n            }), \" {\\n\\tBase\\n}\\n\", _jsxs(_components.span, {\n              className: \"hljs-function\",\n              children: [_jsx(_components.span, {\n                className: \"hljs-keyword\",\n                children: \"func\"\n              }), \" \", _jsx(_components.span, {\n                className: \"hljs-params\",\n                children: \"(e Extend)\"\n              })]\n            }), \" Interb() {}\\n\"]\n          })\n        }), \"\\n\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"这个时候，请问有谁实现了Interface？\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"答案是：\", _jsx(_components.strong, {\n        children: \"Base 和 Extend 本身都没有实现 Interface\"\n      }), \"。但是上述代码中完全没有出现的 *\", _jsx(_components.strong, {\n        children: \"Extend（Extend的指针）实现了Interface\"\n      }), \"。\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"为什么呢？虽然 、*\", _jsx(_components.strong, {\n        children: \"Extend\"\n      }), \" 并没有实现第二个方法，但 \", _jsx(_components.strong, {\n        children: \"Extend\"\n      }), \" 实现了，所以 ***Extend **是也是可以直接访问第二个方法的（参考上面的(*p).x的解释）。\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"而*\", _jsx(_components.strong, {\n        children: \"Base\"\n      }), \"实现了第一个方法（Base没有实现），而 \", _jsx(_components.strong, {\n        children: \"Extend\"\n      }), \" 组合了 \", _jsx(_components.strong, {\n        children: \"Base\"\n      }), \"。因此第一个方法可以也通过 *\", _jsx(_components.strong, {\n        children: \"Extend\"\n      }), \" 访问（Extend无法访问）。\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"所以*\", _jsx(_components.strong, {\n        children: \"Extend\"\n      }), \"两个方法都能访问，因此实现了Interface。而 **Extend **只能访问第二个方法，因此没有实现Interface。\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"然后日常使用 \", _jsx(_components.strong, {\n        children: \"Extend\"\n      }), \" 的时候，为了能使用Interface的方法，需要使用 *\", _jsx(_components.strong, {\n        children: \"Extend\"\n      }), \"：\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-go\",\n        children: [\"interfacelist := \", _jsx(_components.span, {\n          className: \"hljs-built_in\",\n          children: \"make\"\n        }), \"([]Interface, \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0\"\n        }), \")\\ninterfacelist = \", _jsx(_components.span, {\n          className: \"hljs-built_in\",\n          children: \"append\"\n        }), \"(interfacelist, &Extend{}) \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 因为是指针实现Interface，需要传入地址\"\n        }), \"\\ne = interfacelist[\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0\"\n        }), \"]\\n\"]\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"在 goland 对 e 按下 F1 时，只会显示，这是个 Interface，不会告诉你这是 *\", _jsx(_components.strong, {\n        children: \"Extend\"\n      }), \"。如果不是自己从头写的代码，你可能很久都无法发现，是个指针类型实现了 Interface。你必须在层层组合中，找到是哪一层（这里是Base）让 Extend 变成了 Interface 的指针实现。\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"对 e 的 type assertion 也应该这么写：\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-go\",\n        children: [\"e_ptr = e.(*Extend) \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 从Interface类型返回一个Extend类型的指针\"\n        }), \"\\ne_ptr.Base \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 等于(*e_ptr).Base\"\n        }), \"\\n\"]\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = props.components || ({});\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","excerpt":" 之前在学C++的时候，指针的用法就困惑了很久。后来有了计算机体系结构基础后，再加上Golang的一些说明，就突然明白了，之前为什么不理解指针。纠结的点在哪里。  ## 指针的概念  (学的语言太多语法有些混了，看个意思就好，代码是四不像并不可以运行)  - **地址**：一个变量在内存","prevPost":{"title":"看看是谁在D我","link":"/posts/看看是谁在D我"},"nextPost":{"title":"Mac上如何开机与关机时自动运行Shell脚本","link":"/posts/Mac上如何开机与关机时自动运行Shell脚本"},"headings":[{"title":"指针的概念","rank":1,"id":"指针的概念"},{"title":"Golang Struct 与 指针的访问","rank":1,"id":"golang-struct-与-指针的访问"}]},"__N_SSG":true}