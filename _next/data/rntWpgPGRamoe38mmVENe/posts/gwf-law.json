{"pageProps":{"meta":{"title":"关于GFW的法律相关定罪之“非法获取计算机系统数据、非法控制计算机信息系统罪”","date":"2020-11-07 08:00","tags":["GFW","科学上网"],"categories":"Diary","description":"一些法律研究","keywords":"GFW, 法律"},"mdxcode":"\"use strict\";\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    a: \"a\",\n    blockquote: \"blockquote\",\n    li: \"li\",\n    p: \"p\",\n    strong: \"strong\",\n    ul: \"ul\",\n    ...props.components\n  };\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"关于GFW的法律定罪之“非法获取计算机系统数据、非法控制计算机信息系统罪”。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"之前看“不能使用该名称”的GFW定罪系列文章，阐述了司法实践中对于计算机概念不清晰导致的问题，觉得非常学术，逻辑上真的很有道理。所有回避攻击的手段怎么就变成入侵计算机或者非法访问网站了呢？\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"但最近在阅读Clash的源码时，突然开始觉得，“非法获取计算机系统数据、非法控制计算机信息系统罪”对于节点的提供者或许是成立的。\"\n    }), \"\\n\", _jsxs(_components.blockquote, {\n      children: [\"\\n\", _jsxs(_components.p, {\n        children: [_jsx(_components.strong, {\n          children: \"《中华人民共和国刑法》第285五条第2款\"\n        }), \" 违反国家规定，侵入前款规定以外的计算机信息系统或者采用其他技术手段，获取该计算机信息系统中存储、处理或者传输的数据，或者对该计算机信息系统实施非法控制\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"下面说说为何觉得成立。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"包括Clash在内，所有翻墙软件都具有两个部分，一个被称为outbound，为将加密后的数据发送至远程服务器（或接收数据）。outbound的常用协议为常见的ss、ssr等等。这个部分没有上述罪名的问题。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"另一个部分称为inbound，此部分接管计算机系统的tcp请求(通常使用http或socks5)，将计算机系统原本应直接发送到服务器的流量接管到翻墙软件中。此系“非法获取计算机信息系统数据”的可能\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"在获取inbound传入的传输数据之后，使用outbound指定的协议，与proxy服务器建立加密的连接，通过节点服务器发送流量。而节点服务器接管流量并返回到用户端时，传输的数据同样要使用软件的inbound写入浏览器。此系“非法控制计算机信息系统”的可能。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"不论如何，“获取计算机信息系统中传输的数据”是肯定无法避免的。此时的问题在于：1.是否违反国家规定（非法性）这一点非常口袋了，又要回到信道上。2.获取数据的客体并非是人，而是计算机程序，虽然程序的制作者并没有获取任何数据，但节点的提供者是可以的，很好的例子就是机场面板里可以显示用户最近使用的IP。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"对于翻墙软件的制作者而言，如果上述对于节点提供者的“非法获取计算机信息系统数据、非法控制计算机信息系统罪”成立，则“提供侵入、非法控制计算机信息系统的程序、工具罪”也相应成立。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"当然，这一切的前提，都建立在“非法性”的基础上。什么样的技术用于做什么合法没有规定。最受争议的“非法信道”在司法实践中也一直脱离了法律中“物理信道”的解释，涵盖了非物理信道，可以称其为口袋之源。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"参考：\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://zh.wikipedia.org/wiki/%E6%8F%90%E4%BE%9B%E4%BE%B5%E5%85%A5%E3%80%81%E9%9D%9E%E6%B3%95%E6%8E%A7%E5%88%B6%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BF%A1%E6%81%AF%E7%B3%BB%E7%BB%9F%E7%9A%84%E7%A8%8B%E5%BA%8F%E3%80%81%E5%B7%A5%E5%85%B7%E7%BD%AA#cite_note-lx-1\",\n          children: \"提供侵入、非法控制计算机信息系统的程序、工具罪\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://zh.wikipedia.org/wiki/%E9%9D%9E%E6%B3%95%E8%8E%B7%E5%8F%96%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BF%A1%E6%81%AF%E7%B3%BB%E7%BB%9F%E6%95%B0%E6%8D%AE%E3%80%81%E9%9D%9E%E6%B3%95%E6%8E%A7%E5%88%B6%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BF%A1%E6%81%AF%E7%B3%BB%E7%BB%9F%E7%BD%AA\",\n          children: \"非法获取计算机信息系统数据、非法控制计算机信息系统罪\"\n        })\n      }), \"\\n\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = props.components || ({});\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","excerpt":" 关于GFW的法律定罪之“非法获取计算机系统数据、非法控制计算机信息系统罪”。  之前看“不能使用该名称”的GFW定罪系列文章，阐述了司法实践中对于计算机概念不清晰导致的问题，觉得非常学术，逻辑上真的很有道理。所有回避攻击的手段怎么就变成入侵计算机或者非法访问网站了呢？  但最近在阅读C","prevPost":{"title":"关于Golang程序的内存占用过大的问题","link":"/posts/关于Golang程序的内存占用过大的问题"},"nextPost":{"title":"GlobalProtect启动退出脚本(MAC)","link":"/posts/GlobalProtect启动退出脚本(MAC)"},"headings":[]},"__N_SSG":true}