[{"id":"2023-11-19 06:09:27","content":"\n昨天是靠褪黑素睡觉的，今天真的睡不了一点。\n\n大概是我无法忍受我一天啥也不看的感觉，个人的事情做起来太容易没日没夜的了，我又要订计划了。最近变得不是很想嗑cp，大概是无法靠画同人调整作息了。但我想看一些书，永远有想干的事情。\n\n齐木楠雄的灾难，我看了一个多月了，每天都说看一集，还是看不了，看20分钟视频跟完成任务似的。\n\n再见博客。\n\n","tags":[],"imgsmd":[],"sourceFile":"002.md","csrIndex":[13,0]},{"id":"2023-11-19 04:29:12","content":"\n笑死，什么叫程序恰好能跑通，靠 bug 跑通吗？写程序从来没有靠运气跑通的说法。自己不能完全理解怎么运行的，项目运行起来的核心依赖了什么东西都不知道，兼容性的核心是怎么做的不知道，不想去了解，更新核心导致依赖不兼容，没出问题就叫恰好能跑通，出问题就叫烂代码，够牛的……有问题先debug而不是抱怨有bug竟然一个难得的品质。不能接受bug是常态，不想debug，从来靠命跑通第三方项目的人不适合维护程序，又没KPI又不挣钱，洗洗睡吧。\n\n我觉得人家（原作者）代码不管结构和结构已经都写得够清楚了。唯一缺的就是没有公开的测试。测试挺重要的，自己用不到这么多内容，考虑不了那么多的边界条件，又永远不知道来自互联网的内容会有什么bug……写10行代码写100行测试，还要起测试用服务器和mock数据，就问你，一个人写累不累……\n\n我最近也是越来越不喜欢更新依赖了，每一次更新都要去处理兼容性问题，不兼容就是版本回退。还有尽量少用在持续更新的小的第三方库，我宁愿照着再写一遍，有bug也好改。\n\n不过说来其实大部分项目开头后不重构都是屎山，如果开头的架构就非常好了，那就是工程经验和产品经验都很丰富的人。而且就算都是有经验的人，也会根据习惯认为另一种有经验的东西是屎山，没有必要……在我接触JSX，css-in-js 和函数式组件之初，我的天哪，这不是很容易写成屎山……但其实也就是不了解而已……虽然我还是很讨厌 JS 和 TS 的类型推断，但明显随着使用时间的增长觉得，函数式还是挺好用的。但是对象有对象的好处，如果没有 this 指针问题我还是会用 class。除了 css-in-js，这个我现在还是不喜欢，我还是更喜欢 CSSOM。tailwind 这类挺好的，除了要多记些东西（我从前可不是这么说的）\n\n我现在正处于到处是屎山的状态。并且我自己每一年的习惯都有点不一样，还可能看了某个库的架构感觉真好，想抄，导致改着改着后发现全变成了屎山……我也不是很想改了，现在心态就是，看得懂，任何时候可以捡起来维护，能用，就行。细节有空再说吧，又没有KPI。少更新依赖真的……\n\n","tags":[],"imgsmd":[],"sourceFile":"002.md","csrIndex":[13,1]},{"id":"2023-11-18 21:05:52","content":"\n温知识：shift + esc 可打开 chrome 的任务管理器，查看各个页面和插件的 cpu，内存，网络，pid 等\n\n","tags":[],"imgsmd":[],"sourceFile":"002.md","csrIndex":[13,2]},{"id":"2023-11-18 20:04:28","content":"\n想在博客养一只猫猫！但是要引入动画库我是不太愿意的……我觉得首屏已经有一点点慢了，代码体积还是有点大的，除了框架外，最占大头就是 mdx 放前端解析，直接让公用JS代码多了40k……但是我又不用！对！重点是我他妈的不用 mdx 写！我唯一用到 mdx 的地方还是解析 tag 绑定 react 事件，标签！好吧这也算了，前端解析数据注定是这个样子的。\n\n当然如果不考虑 seo 的话，可以优化的东西就多多了，seo导致所有内容都必须先加载出来。但我现在想想，除了信息密度大的页面，其他也无所谓的。嗯，就这样吧。\n\n还有，styled-component，说好用也好用，说不好用也不好用，一定要说的话我觉得还是不好用，可能只适合个人搞开发。不如 css 自带的变量管理、tailwind 功能class那一套，那一套是真的挺好用的。\n\n","tags":[],"imgsmd":[],"sourceFile":"002.md","csrIndex":[13,3]},{"id":"2023-11-16 22:47:44","content":"\n微软，你干什么？\n\n\n","tags":[],"imgsmd":["![](https://cdn.jsdelivr.net/gh/NamiLing/upic/picgo/202311162247378.webp)"],"sourceFile":"002.md","csrIndex":[13,4]},{"id":"2023-11-15 23:33:56","content":"\n感冒了就想画这种。\n\n\n\n","tags":[],"imgsmd":["![](https://cdn.jsdelivr.net/gh/NamiLing/upic/picgo/202311152326469.webp)"],"sourceFile":"002.md","csrIndex":[13,5]},{"id":"2023-11-14 19:54:31","content":"\n脑袋，哦莫（好重）。不要，感冒。已经不转了。\n\n","tags":[],"imgsmd":[],"sourceFile":"002.md","csrIndex":[13,6]},{"id":"2023-11-13 23:35:54","content":"\n经常都觉得我做的东西看起来都好冷冰冰。有没有一种可能，冷的是内容 (= =)\n\n动不动就大几百字，往这边倒垃圾，也不用 emoji🤡。我在别的平台是经常用表情的。\n\n可能一个人的话，就没有什么阴阳怪气的必要了吧。\n\n","tags":[],"imgsmd":[],"sourceFile":"002.md","csrIndex":[13,7]},{"id":"2023-11-13 06:10:38","content":"\n一不小心 debug 了 4 个小时，但居然搞定了动态高度的无限滚动！布局虽然看起来没变化，实际上完全不是一个渲染方式。这两天改了700多行吧，从统一 datafetching 的方式开始，以后对接多后端就会方便很多！\n\n我觉得我那个 virtual list 的实现还行，泛用性还是挺强的，对外没有任何状态需要管理，父级组件除了存数据，啥也不用干。唯一的问题是 sources 和 props 有点重复了，要不改成回调函数渲染算了，耐思。\n\n——如果我这次也能安全度过感冒的话。\n\n","tags":[],"imgsmd":[],"sourceFile":"002.md","csrIndex":[13,8]},{"id":"2023-11-11 21:26:00","content":"\n诶居然是双十一。什么都没买，不知道要买什么。\n\n我又重构了……不过上次是服务端的底层，这次是客户端的。因为我觉得总有一天，我是会用到数据库的，先把接口的形状调整好吧。然后做成无限滚动的。感觉一小条一小条的东西还是能无限滚动比较过瘾。\n\n然后就是无限滚动的 virual list 实现，两年前我写 fgo 的工具时也有写过，但那个是定高的，动态高度的当时没思路。\n\n然后我看了一眼推特，推特是监听resize事件直接注入transform的。我觉得很神奇，前面没有加载的元素的高度占用是怎么算的……？\n\n然后我又看了一眼……前面消失的元素没法算。前向加载时已有元素的 translateY 也一直在变化。\n\n我大概是想到了做法。每次重新渲染前面的会对比已经之前的 place holder height，有变化的话说明窗口 resize 过，后面的元素也要跟着一起更新。よいよい，真好，我学。\n\n微博是有一个recycle scroller，相册滚动也是这么个思路。而且微博宽度是定宽的，也就是上高度不会有任何shift，实现起来会简单很多。\n\n那还是学推特吧，主要是响应式做到底。\n\n\n","tags":[],"imgsmd":[],"sourceFile":"002.md","csrIndex":[13,9]}]