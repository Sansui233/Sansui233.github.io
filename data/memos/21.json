[{"id":"2022-05-21","content":"\n博客重构记录：由于吐槽写得太长加了 memo 分页逻辑，使用了首屏静态页面分页前端 query CSR 的方式，以减少 FCP 时间。但这样的问题是即便是带 query 的链接，首屏也是会要先闪一下，再替换掉内容，毕竟是静态页面。 这有点难解决。\n\n有一个非常 tricky 的办法，在样式做上欺骗，把字号换成和背景一个色（或者加遮罩），在 CSR 逻辑处理完后再显示。但这样的弊端是 FCP 时间会相对比较长，特别是网不好的情况下。本来分页就是用来减少 FCP 时间的。这么做虽然流量减少了，但又很难说到底能减少多少 FCP 时间。\n\n另外 Link 由于路由处理有延迟，导致换页时体感有延迟，中途没反馈如果网不好可能会以为是页面有 Bug。果然 CSR 异步请求还是得加数据切换时的交互提示……啊烦，设计好难。后续还想抠动画，但就是体力活，纯抠……\n\n","tags":[],"imgsmd":[],"sourceFile":"001.md","csrIndex":[21,0]},{"id":"2022-05-20","content":"\n关于 Next.js 的容易造成的误区和目前吸引我的点。先说误区。\n\n1. SSG（静态站点生成）这名字取得有误导性，并不是真正完全的静态站点。\n\n一般对于 **静态站点** 是指 build 预渲染后的纯前端页面，直接出现最终结果，不需要任何服务器，给一个 index.html 点开就能用。但 SSG 实际做的只有 “可以获取预渲染所需数据”，但有的渲染 Feature 仍然需要用到服务器处理，其 build 结果并不是静态站点，也没有做任何预渲染，export 才是。因此即便没有用到任何的 SSR，也会有 feature 在 export 中不支持。纯 React 客户端的 build 阶段相当于 Next.js 的 export 阶段。\n\n1. SSR（服务端渲染）字面上更容易造成误解，和传统的服务端渲染有区别\n\n首先要理解 CSR 的对立面是 Pre-render，而不是 SSR。SSR 只是一种 pre-render 的方法，SSG 也是一种 pre-render 的方法。\n\n其次要理解，**SSG 也运行在服务端**。更准确的说法是 SSG 是“服务端 build 时预渲染”，SSR 是“服务端运行时预渲染”。但是 Server-side rendering 字面上把 SSG 也概括进去了。\n\nNext.js 对 SSG 和 SSR 的定义。\n\n> ### [Two forms of Pre-rendering](https://nextjs.org/docs/basic-features/pages#two-forms-of-pre-rendering)\n>\n> - [**Static Generation (Recommended)**](https://nextjs.org/docs/basic-features/pages#static-generation-recommended): The HTML is generated at **build time** and will be reused on each request.\n>\n> - [**Server-side Rendering**](https://nextjs.org/docs/basic-features/pages#server-side-rendering): The HTML is generated on **each request**.\n\n而传统说的服务端渲染，其实是同时包含了 Next.js 的 SSG 渲染与 SSR 渲染。\n\n那么问题是，按照 Next.js 的 SSR 定义，SSR 是不是无法 export 成静态页面？\n\n这其实要看有没有对 http request 进行处理，或者有别的要和 server 打交道的代码。 即便你用 SSR，但每次都是在做一些和 http request 无关的事情，那这不会对 export 造成影响。这也是为什么 `getInitialProps` 支持 export 但又支持得不太完全。\n\n比如 styled-components 可以预渲染时注入 style，但这个有两种写法，第一种是 styled-components [官方文档](https://styled-components.com/docs/advanced#server-side-rendering)，用的标准 SSR，无法 export。第二种写法在 [Next.js 仓库](https://github.com/vercel/next.js/tree/canary/examples/with-styled-components)，用的了服务端做预渲染，但又不像一般的 SSR，可以 export，只不过 req 和 res 为空，概念上可以说就是个 SSG。\n\n再说吸引我的点\n\n1. SSR 和 CSR 同构，可以看成 CSR 基础上增强首屏 SEO 能力，也可以看成传统 SSR 基础上加入 CSR 的优点（节省服务器资源bla），这样小型页面生成不用分开做数据 mock，直接一把唆。\n2. CSR 和 build 时预渲染都算是纯前端，能完全生成静态页面的。而 Next.js 依靠 Node 拥有一定的后端处理能力（虽然我用不上）\n\n","tags":[],"imgsmd":[],"sourceFile":"001.md","csrIndex":[21,1]},{"id":"2022-05-18","content":"\n今晚先把 Issue 修了，然后把分类页写完吧，现在和我想象的还是有差别。由于没有提前做界面设计，写起来十分痛苦……做设计真的太费时间了，下次再也不要推着写了。\n\n","tags":[],"imgsmd":[],"sourceFile":"001.md","csrIndex":[21,2]},{"id":"2022-05-17","content":"\n今天早上起床，醒之前是真实的恶梦。梦到我在家里睡觉，一觉醒来，父母都去世了，尸体就躲在我的身旁，就在床上，在睡梦中。\n\n------\n\nまた自殺したいと思った\n\n役に立たない。ただのクソ製造機。生きてる意味もない\n\n母は偉いです、それに対して、僕はただのクソなんです。いや、母だけではなく、人一倍ゴミクズです\n\nただの普段の生活もできないし\n\n连续一周每天睡 4 小时左右了。主要是因为我睡得晚，室友起得早。基本我睡 4 小时左右就会听到他们开始活动了。我真的不明白我为什么要睡那么晚，真的，心情会很差，但依然睡不着。之前有天晚上强制自己 2 点睡觉强制得我要疯了，最后是看了三集柯南才能稳定睡觉。\n\n从来没有完成自己的计划这么困难过。虽然从读研起就越来越困难了。但没有什么时候比现在更难。长期无法做自己想做的事情，所做的一切对我和对周围的人没有任何价值可言，只是个单纯的累赘。有很多人羡慕我因为有兴趣而有很强的自驱力，但其实为此我已经牺牲掉了赖以生存的所有，至少我目前是这么觉得的。\n\n我无法控制我写代码的时间，吃饭的时间，睡觉的时间，也无法控制我看两行论文就会分神。这些似乎都是随缘。这意味，我无法控制我的工作，无法精确计划，无法和他人长期有规律地合作。很可能今天专注了 24 小时，明天精神不好一整天都无法专注。\n\n我只能控制我画画的时间、打游戏的时间、看剧的时间。这些休闲的时间就可以控制。我不明白。我并无焦虑，我从不为正在做的事情焦虑，因为焦虑会导致完全无法投入。现在看来更像是一种 ADHD，但也无心诊断，就医这些日常都太麻烦了。我总是觉得日常生活太麻烦，以至于无法好好过每一天的日常，注定不会活太久。\n\n","tags":[],"imgsmd":[],"sourceFile":"001.md","csrIndex":[21,3]},{"id":"2022-05-16","content":"\n博客已重写，遇到不少问题，有机会写点文章。\n\n","tags":[],"imgsmd":[],"sourceFile":"001.md","csrIndex":[21,4]},{"id":"2022-04-15","content":"\n关于为什么会出现前端框架的思考。\n\n最近摸鱼看了下 Next.js，确实是很方便，而且这其实像是，Manage your js pages in an html way。\n\n然后我就在想，如果我的目的是生成静态页面，用框架只是为了组件化，那为什么直接 HTML + JS 不行呢？除开发上的亿点点不便（因为这是可以通过工具解决的），出现了一整个 JS 框架到底是为什么？我就不能用 HTML 和 WebComponent 实现视图组件化复用，JS 还是仅仅实现交互逻辑吗？\n\n而且如果只是想组件化，按理说，出个 JSX 和 v-html 弥补 html 不足就 OK 了，JS 做一下语法解析就成，为什么最后直接搞出了一整套虚拟 DOM？有好处，但也没好像那么必要。\n\n然后看到一篇文章：[精读《现代 js 框架存在的根本原因》](https://juejin.cn/post/6844903608215945229)。里面提到的关键是数据状态与视图绑定的问题。\n\n最后又对比着想了客户端的工具链，我个人觉得，根本问题出在，制定 HTML 的 W3C 和 制定 JS 标准的 ECMA 属于两个完全不同的组织。\n\n前端开发需要处理视图+数据逻辑，需要用到两种语言。不能用一种语言吗？可以，但一般而言非常难用。不同的语言确实有不同擅长的方向，视图还是声明式的语言清晰好用（如HTML、XML），而写逻辑是命令式的长处（如C++，Go）。 对于客户端而言，控制视图的工具和控制逻辑的工具是一起更新的，但对于 Web 则并非如此。ECMA 填 JS 坑填得人要学不动，w3c 在更新 Web API，HTML 语法还是那样的万年不变。即便能一起更新，也很难在几年内覆盖大部分用户， 不像客户端一样是独家定制，还经常强制更新，不更用不了。浏览器总是万年不换，做浏览器的厂商也是五花八门。\n\n在视图层与逻辑层过于割裂的情况下，为了满足越来越复杂的开发需要，干脆直接摒弃了用 html 控制视图的思路，出现了 jsx 这样的怪东西（不是贬义），用自由度极高的 JS 干完所有活，底层渲染优化一类的全都由框架实现，方便又好使。\n\n如今的页面大多都是 JS 写的了。Next.js 的路由让人感觉更像是 JS 直接无缝代替了 HTML。还是和从前一样简单而易于理解与维护的站点架构，只是因为 HTML 太拉了，所以用 JS 写了。\n\n","tags":[],"imgsmd":[],"sourceFile":"001.md","csrIndex":[21,5]},{"id":"2022-02-15","content":"\n由于兴趣原因想扒一个 Vue 写的前端。虽然 Webpack 经常把变量打包得妈都不认，但对于字符串和 property 是不会替换的。大致步骤如下\n\n### 1. Network 选项卡查看数据文本\n\n按照现代前端写 WebApp 的惯性，数据量很大的情况都是 AJAX，请求一个数据文件由浏览器解析。这个数据文件在 Network 中找找很容易获得，是个 JSON 文件。文件 A 字段经过加密，其余都是明文存储。但是 A 字段是最关键的，接下来就是从源代码中找解密方法。\n\n### 2. 搜索 API URL + 元素审查\n\n既然是 AJAX 必然是明文字符串请求的 API。那就先搜寻了一下 API URL 附近代码，发现经过 webpack 打包后，有一个 g 变量原型上绑定了很多方法。其中一个 replaceImgURL 引起了我的注意。因为之前在元素审查时发现，被加密的文本有一部分被替换为了图片。这个处理我不理解……你都加密过了还要换图片？换就换吧，还就换一个字？防得了谁呢……替换的 Img 的 label 刚好对得上。\n\n然后继续搜寻使用了 replaceImgURL 的代码。这下好了，方法就在原型上，直接叫decryption……\n\n### 3. 查看 decryption 的代码\n\n如果加密解密是自己手写的，那复制粘贴就完事。不过出现了报错，还是引入了 module。引入的 module 名自然是被打包成妈都不认的，但是这用法一看就是第三方库，因为让前端自个儿写加解密才不会设计得这么详细……\n\n```js\ne.enc.Utf8.parse('asdfac')\ne.DES.decrypt({ciphertext: e.enc.Hex.parse(a)})\n```\n\n一眼看到大写的 DES 还有 CRC 一类的，这不就巧了嘛。查了一下，这是 crypto-js 的库。把这几行代码搬到 TS 中写了解密 function，完美。\n\n------\n\n所以过程没有很复杂，完全用不到数学，甚至是直接调现有库。前端安全的话，嗯，还是觉得纯客户端解密没有绝对的安全。毕竟都不用和服务器通信，只要有时间总是可以还原出来。但也没有必要追求绝对安全，只需要提高解密的时间成本就可以了，人总是讲收益的。\n\n也是基于上述想法，我觉得本地差分隐私这个课题是就是扯淡。纯概率论，密码学都不用的，都先不说应用场景，当时看着看着就觉得谁真这么做那我可以去逆向了……\n\n------\n\n过年入了个 switch，买了个舞力全开。天生四肢协调小脑发达的我感觉非常不错，就是没什么场地可以动。路易吉鬼屋也不错的，就是太长了当时得在 3 天内刷完有点累。Mario Party 里面大富翁玩法还是 yyds，抢拍照的小游戏真的笑死了。然后入了几个之前 ios 上看过但没有玩的打折游戏，limbo, inside，勇敢的心，光之子。种田流星露谷也买了，可惜之前的存档不能导进去，没有 mod 少了一大乐趣。\n\n再到之前玩 MC1.18 的基岩版，改了个很久没维护的 Shader 的光照。之前 MC 是亮度 7 以下刷怪，所以 shader 写的是平方衰减。但现在是亮度 0 刷怪了，还是改回了线性。老实说差别也不是那么的大……物理强度和视觉强度还有一个 Log 的差异，不过在亮度 7 以下的地方要好一些了，之前一到亮度 7 以下是乌漆抹黑。\n\n然后最近有人留言问要不要玩 Java1.18 服，我加了一下，mac 好卡，卒。\n\n","tags":[],"imgsmd":[],"sourceFile":"001.md","csrIndex":[21,6]},{"id":"2022-01-29","content":"\n晚上开始画一个基于兴趣的设计图。1 个半小时被叫了三次，真的画不下去了。没有一点大片完整的时间，所处的环境对于创作而言就是噩梦。\n\n之前报了个色彩 60 天打卡，也是在今天画完了，但自从回家后基本所有的事敷衍了事，基本两天画一次，1 个半小时水一张。之前了解过自由职业者的工作环境，基本上没有人推荐在有父母的家里工作，“他们会觉得在家里蹲就是很闲，隔三岔五就有人说「诶，我过来玩一下啊」，或者父母有事没事让你拿个东西”。真实。所以年后就去外地朋友那住几天。烦死了。\n\n呵呵呵呵哒。\n\n------\n\n和某学土木的同学联机了几天 MC。但每天我们都有 3 个小时的时差，经常是从北京 9 点联机到 12 点左右，那边就差不多是 3 点了。土木的同学打起游戏也是真的肝，从不搞红石不挂机，就硬挖硬附魔。后面突然面试了一家牛逼公司然后过两天就开始实习了没再打了，她又去肝牛逼公司的项目了……\n\n过年不回家，真好。\n\n我的朋友们，或者说是曾经的朋友们，要么就非常厉害，想赚钱的能赚到很多钱，想搞建筑的最终搞了想搞的建筑，想拿北京户口的本科刚毕业就拿到了，想去国企混的进了最好的单位；要么就是人超好，装完出租公寓就让我先去住几天。大家都过上了想过的生活，好像是只有我在逐渐摆烂的哈。就当是我承接了所有的非气，也没什么不好，毕竟我既不想赚钱，也不想生活。\n\n","tags":[],"imgsmd":[],"sourceFile":"001.md","csrIndex":[21,7]},{"id":"2022-01-09","content":"\n记账之后，强迫性睡不着，干脆起来改点 issue。\n\n因为记账发现我居然一年有 1000 多的订阅，有点震惊，一直在整理思路，如果要整理大概可以写个文章叫，《普通用户一年会花多少钱购买互联网服务》。我个人需要刚需订阅的大概有 10 家服务，腾讯视频、B 站、微博、88VIP（网易云音乐、优酷、饿了么）、QQ 音乐、OneDrive、iCloud，还有机场。偶尔 Keep 健身、百度云也会买一点。\n\n互联网对于我的生活影响远比想象中的大。虽然个人不怎么看剧，优酷和腾讯视频一年可能就看一部剧，这么说买断（看观看次数付费）明显对我更友好。但由于爸妈会一起用所以续了，偶尔想看个电影或者小视频没有会员也看不了，又要忍受很长的广告。对于我这样的用户，由于平台的分散，互联网上看剧的花费早已超过了电视，换得片源和时间的自由。不过最近流传的某台出台的近百条傻逼规定，能不续费就不续了。\n\n除了娱乐上的花费，还多了一项和互联网存储有关的花费。几乎需要云同步的服务都需要花钱，不管是社交媒体还是文件存储，上网的成本比我想象中要高。微博大概是上述服务日常服务中最贵的，以图文为主的公域社交，没版权开销，把流量经营好就行了，会员也不会去这满天的广告，大部分主要是去买一些后来的功能，像是再次编辑、评论带图、改名字之类。 相比起来 B 站就很惨。B 站后面也开始买版权了，免费看番的时代过去了，在传统的内容创作方面，一小众圈子朋友在不到 1000 粉时就开始被运营盯上了拉到分区 Up 群，现在终于辛苦经营到 3000 粉。自己之前好好剪的第一个视频（也是唯一一个视频）大概也是被运营送上了首页，投过稿的人应该都能有事没事收到创作激励计划，现在这一块被也短视频行业分走了一部分，不过也没那么冲突，长视频做起来是真的慢，国内相关的Web2.0 性质的长视频平台除了 B 站也没别的了。另外，周围小红书用户也有一些，这些用户大致特点就是 ESFx……抖音用户没有，所以我至今也不是很明白抖音……文件存储，百度网盘靠免费垄断起家还审查个人文件实在令人无语，这不是网盘的该做的事。现在我是全下了下来搬到 OD 上了，但别人不会搬啊……\n\n虽然有博客记日记的恶习，但大部分时候是用电脑时才会写。手机上我是在用 Day One 记日记，因为买得早有永久会员。但是当时没买电脑，所以电脑不给同步账户。notion 记日记有种一言难尽的怪（这时 Web App 的缺陷尽数体现），logseq 的呈现方式又不适合记日记，纯 markdown 的有mweb，但日记还是希望是所见即所得的，结果绕来绕去还是 Day One 最适合。没法，专业的软件做专业的事。纸质日记本也有，但我又不是会固定时间写日记的，只是想起来就吐槽一波，大部分时候眼前连纸质日记本的影子都没有。\n\n游戏也没玩了，千石零宝伤到我了，这种 1% 概率不到的事情在我这一点也不罕见。\n\n困了，睡觉。\n\n","tags":[],"imgsmd":[],"sourceFile":"001.md","csrIndex":[21,8]},{"id":"2022-01-07","content":"\n今天吉他练完了 Like a star，嗯，扫弦扫得很爽，手指甲给磨没了……已经没法再弹了，全是用肉弹不响了，扫着也痛。大概是因为之前没有弹过力度这么大这么频繁的扫弦，算一算半个月给食指磨了 4 mm 的指甲，中指也扫裂了一半大概 1.5mm，无名指弹泛音都出不来了。我会主动去做美甲也是活久见。\n\n","tags":[],"imgsmd":[],"sourceFile":"001.md","csrIndex":[21,9]}]