[{"id":"2022-05-26","content":"\n推荐一个网页版[图片处理 app](https://imagestool.com/zh_CN/)，目前最全的没有之一。\n\n------\n\n前天看完了博人转主线，导致昨天开始没有火影主线看了，于是莫名 emo。emo 了就摸了两张鱼，反而比平时睡得早一点。\n\n\n\n","tags":[],"imgsmd":["![2022-05-26-2](https://cdn.jsdelivr.net/gh/NamiLing/upic/uPic/2022-05-26-2.jpg)","![2022-05-26-1](https://cdn.jsdelivr.net/gh/NamiLing/upic/uPic/2022-05-26-1.jpg)"],"sourceFile":"001.md","csrIndex":[22,0]},{"id":"2022-05-25","content":"\n今天实现动画 Mount when scroll into view port，用了一个特别简单有意思的方式做了首屏列表 trail 渲染，通俗说就是元素依次显示出来，每一条有点时间差。\n\n挂载动画还是用的 css animation，主要是 css 做挂载动画还是很好写的，效率也比 JS 高。重点是在如何给元素的挂载加上时间差。我在这里没有用任何 setTimeout 一类的控制时间的方式。\n\n做 scroll into viewport 要用到 [Intersection Observer API](https://developer.mozilla.org/zh-CN/docs/Web/API/Intersection_Observer_API)，但如果仅仅是判断 scroll into view 再进行挂载，尽管后续元素的是按动画依次挂载上来的，但首屏的各个条目仍然是一起出现的，没有任何时间差。于是我将 List Item 的占位高度设置为 100vh, 第一个就能挤掉所有后续元素，挂载后回归正常高度，第二个元素进入 viewport；第二个元素高度仍为 100vh，同样挤掉后续的所有元素，挂载后回归正常高度。\n\n这样挂载的时间差其实是取决于 JS 修改 height 的时长和浏览器重绘所花费的时间，并非人为可控的。如果不做任何处理，时间差将是非常短的。不过自己实测后感觉已经够用了。\n\n最烦的其实是 SEO，如果真的 mount on scroll 算是懒加载了，会直接没首屏……所以要兼顾首屏数据只能采用 改 display 或者 visibility 的动画方式，而不是 mount on scroll.\n\n","tags":[],"imgsmd":[],"sourceFile":"001.md","csrIndex":[22,1]},{"id":"2022-05-24","content":"\n今天看 react-spring 的标注，发现几乎读不懂。于是去学习了更多有关 typescript 标注的知识，主要是 extends 和 infer。\n\n看了只有一个感觉：有必要引入如此复杂的编程模式吗！我看标注一般都是因为懒得看文档，认为最容易让人从根本上理解设计原理的文档就是代码本身。但第一次遇到读起来如此困难的标注。实在不知道把类型搞成变量做判断这一套的意义在哪…… 确实可以简化一些代码，但也真的引入了复杂亿点的编程模式。可能还是写库会用到，平时倒没有这个需求。而且由于 function 也是 object 的关系，extends 接箭头函数太难断句了，真的难受，断句断到我哭。算了箭头函数本来就是一个复杂场景下视觉上极难断句的语法……\n\n","tags":[],"imgsmd":[],"sourceFile":"001.md","csrIndex":[22,2]},{"id":"2022-05-22","content":"\n2022-05-26 更新：我焯，我服了，兄弟们，是不是微信办公人群都用是不会写长文的啊！又是这位……如果你无意间也看到了这里，希望你能去看一下[提问的智慧](https://github.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way/blob/main/README-zh_CN.md)，可以说你算是条条踩雷。我也不是什么厉害的人物，所以不要叫我大佬，这并不能取悦到谁。我回答问题仅仅是出于分享的心情，愉快的问答是聚焦于技术问题本身的平等交流。\n\n------\n\n我讨厌上来就给我说：“我不是这种情况，所以你说的情况不存在”的人，把自己的认知当做全部。这已经不是有没有共情能力的问题，是对于世间的多样性已经丧失掉了求知欲与敬畏之心。\n\n我从前也是这样的人，当时我觉得写个 json 结构转换代码真的特别简单，不认为这个学校里会有人写一整天都不会，一起做大作业的室友不会写我还硬要她写。最后她没办法，求另一个室友用一个小时帮她搞定了。现在我都很后悔这个事，意识到人和人之间的天赋点可能真的差很远时，是在有些理解“艺术”而非“画画技术”之后。在没有人文素养的时候我是真的可怕，可能是那种 pua 人，尽管不是故意 pua，仅仅是觉得“我自己做真的觉得超简单的，你为什么不行”。\n\n当提出意见时：\n\n（可以接受）我知道可能有很多情况，但我觉得是这样比较好，原因是（一系列客观事实）\n\n（不能接受）我觉得是这样比较好，因为我的经验中没有别的情况\n\n后者如果天天接触，我又无法对他直言，那么之后那个人会触发我 PTSD 的，亲测有效。\n\n------\n\n服了，头一回遇到 issue be like:\n\nQ：我出现了 A 问题\n\n我: 我明白了，请告知你的运行环境信息，因为我这里无法复现，\n\nQ：可我出现了 A 问题啊\n\n我：你能先把你的环境信息告诉我吗？否则我无法复现\n\nQ：环境是 xxx，希望快点修谢谢\n\n我：已测试，并非此项目的问题，是其它地方的问题，你可以用以下步骤检查哪里出问题……\n\nQ：可我就是出了A问题呀\n\n我：你能先把每个步骤的检查结果告诉我吗？\n\n…………(*$^#(^(^@%_这他喵的，总是重复自己的问题不按回复查原因有意思吗？还是说我说的不够明确他不知道自己需要干什么？而且我在开头就很想说，这种问题一看就是自己魔改过其他地方导致的，我还自己去复现环境只是个以防万一，要不是出于礼貌我立刻当街踢皮球。\n\n没事，很幸运，这么久了这才头一回当客服。\n\n","tags":[],"imgsmd":[],"sourceFile":"001.md","csrIndex":[22,3]},{"id":"2022-05-21","content":"\n博客重构记录：由于吐槽写得太长加了 memo 分页逻辑，使用了首屏静态页面分页前端 query CSR 的方式，以减少 FCP 时间。但这样的问题是即便是带 query 的链接，首屏也是会要先闪一下，再替换掉内容，毕竟是静态页面。 这有点难解决。\n\n有一个非常 tricky 的办法，在样式做上欺骗，把字号换成和背景一个色（或者加遮罩），在 CSR 逻辑处理完后再显示。但这样的弊端是 FCP 时间会相对比较长，特别是网不好的情况下。本来分页就是用来减少 FCP 时间的。这么做虽然流量减少了，但又很难说到底能减少多少 FCP 时间。\n\n另外 Link 由于路由处理有延迟，导致换页时体感有延迟，中途没反馈如果网不好可能会以为是页面有 Bug。果然 CSR 异步请求还是得加数据切换时的交互提示……啊烦，设计好难。后续还想抠动画，但就是体力活，纯抠……\n\n","tags":[],"imgsmd":[],"sourceFile":"001.md","csrIndex":[22,4]},{"id":"2022-05-20","content":"\n关于 Next.js 的容易造成的误区和目前吸引我的点。先说误区。\n\n1. SSG（静态站点生成）这名字取得有误导性，并不是真正完全的静态站点。\n\n一般对于 **静态站点** 是指 build 预渲染后的纯前端页面，直接出现最终结果，不需要任何服务器，给一个 index.html 点开就能用。但 SSG 实际做的只有 “可以获取预渲染所需数据”，但有的渲染 Feature 仍然需要用到服务器处理，其 build 结果并不是静态站点，也没有做任何预渲染，export 才是。因此即便没有用到任何的 SSR，也会有 feature 在 export 中不支持。纯 React 客户端的 build 阶段相当于 Next.js 的 export 阶段。\n\n1. SSR（服务端渲染）字面上更容易造成误解，和传统的服务端渲染有区别\n\n首先要理解 CSR 的对立面是 Pre-render，而不是 SSR。SSR 只是一种 pre-render 的方法，SSG 也是一种 pre-render 的方法。\n\n其次要理解，**SSG 也运行在服务端**。更准确的说法是 SSG 是“服务端 build 时预渲染”，SSR 是“服务端运行时预渲染”。但是 Server-side rendering 字面上把 SSG 也概括进去了。\n\nNext.js 对 SSG 和 SSR 的定义。\n\n> ### [Two forms of Pre-rendering](https://nextjs.org/docs/basic-features/pages#two-forms-of-pre-rendering)\n>\n> - [**Static Generation (Recommended)**](https://nextjs.org/docs/basic-features/pages#static-generation-recommended): The HTML is generated at **build time** and will be reused on each request.\n>\n> - [**Server-side Rendering**](https://nextjs.org/docs/basic-features/pages#server-side-rendering): The HTML is generated on **each request**.\n\n而传统说的服务端渲染，其实是同时包含了 Next.js 的 SSG 渲染与 SSR 渲染。\n\n那么问题是，按照 Next.js 的 SSR 定义，SSR 是不是无法 export 成静态页面？\n\n这其实要看有没有对 http request 进行处理，或者有别的要和 server 打交道的代码。 即便你用 SSR，但每次都是在做一些和 http request 无关的事情，那这不会对 export 造成影响。这也是为什么 `getInitialProps` 支持 export 但又支持得不太完全。\n\n比如 styled-components 可以预渲染时注入 style，但这个有两种写法，第一种是 styled-components [官方文档](https://styled-components.com/docs/advanced#server-side-rendering)，用的标准 SSR，无法 export。第二种写法在 [Next.js 仓库](https://github.com/vercel/next.js/tree/canary/examples/with-styled-components)，用的了服务端做预渲染，但又不像一般的 SSR，可以 export，只不过 req 和 res 为空，概念上可以说就是个 SSG。\n\n再说吸引我的点\n\n1. SSR 和 CSR 同构，可以看成 CSR 基础上增强首屏 SEO 能力，也可以看成传统 SSR 基础上加入 CSR 的优点（节省服务器资源bla），这样小型页面生成不用分开做数据 mock，直接一把唆。\n2. CSR 和 build 时预渲染都算是纯前端，能完全生成静态页面的。而 Next.js 依靠 Node 拥有一定的后端处理能力（虽然我用不上）\n\n","tags":[],"imgsmd":[],"sourceFile":"001.md","csrIndex":[22,5]},{"id":"2022-05-18","content":"\n今晚先把 Issue 修了，然后把分类页写完吧，现在和我想象的还是有差别。由于没有提前做界面设计，写起来十分痛苦……做设计真的太费时间了，下次再也不要推着写了。\n\n","tags":[],"imgsmd":[],"sourceFile":"001.md","csrIndex":[22,6]},{"id":"2022-05-17","content":"\n今天早上起床，醒之前是真实的恶梦。梦到我在家里睡觉，一觉醒来，父母都去世了，尸体就躲在我的身旁，就在床上，在睡梦中。\n\n------\n\nまた自殺したいと思った\n\n役に立たない。ただのクソ製造機。生きてる意味もない\n\n母は偉いです、それに対して、僕はただのクソなんです。いや、母だけではなく、人一倍ゴミクズです\n\nただの普段の生活もできないし\n\n连续一周每天睡 4 小时左右了。主要是因为我睡得晚，室友起得早。基本我睡 4 小时左右就会听到他们开始活动了。我真的不明白我为什么要睡那么晚，真的，心情会很差，但依然睡不着。之前有天晚上强制自己 2 点睡觉强制得我要疯了，最后是看了三集柯南才能稳定睡觉。\n\n从来没有完成自己的计划这么困难过。虽然从读研起就越来越困难了。但没有什么时候比现在更难。长期无法做自己想做的事情，所做的一切对我和对周围的人没有任何价值可言，只是个单纯的累赘。有很多人羡慕我因为有兴趣而有很强的自驱力，但其实为此我已经牺牲掉了赖以生存的所有，至少我目前是这么觉得的。\n\n我无法控制我写代码的时间，吃饭的时间，睡觉的时间，也无法控制我看两行论文就会分神。这些似乎都是随缘。这意味，我无法控制我的工作，无法精确计划，无法和他人长期有规律地合作。很可能今天专注了 24 小时，明天精神不好一整天都无法专注。\n\n我只能控制我画画的时间、打游戏的时间、看剧的时间。这些休闲的时间就可以控制。我不明白。我并无焦虑，我从不为正在做的事情焦虑，因为焦虑会导致完全无法投入。现在看来更像是一种 ADHD，但也无心诊断，就医这些日常都太麻烦了。我总是觉得日常生活太麻烦，以至于无法好好过每一天的日常，注定不会活太久。\n\n","tags":[],"imgsmd":[],"sourceFile":"001.md","csrIndex":[22,7]},{"id":"2022-05-16","content":"\n博客已重写，遇到不少问题，有机会写点文章。\n\n","tags":[],"imgsmd":[],"sourceFile":"001.md","csrIndex":[22,8]},{"id":"2022-04-15","content":"\n关于为什么会出现前端框架的思考。\n\n最近摸鱼看了下 Next.js，确实是很方便，而且这其实像是，Manage your js pages in an html way。\n\n然后我就在想，如果我的目的是生成静态页面，用框架只是为了组件化，那为什么直接 HTML + JS 不行呢？除开发上的亿点点不便（因为这是可以通过工具解决的），出现了一整个 JS 框架到底是为什么？我就不能用 HTML 和 WebComponent 实现视图组件化复用，JS 还是仅仅实现交互逻辑吗？\n\n而且如果只是想组件化，按理说，出个 JSX 和 v-html 弥补 html 不足就 OK 了，JS 做一下语法解析就成，为什么最后直接搞出了一整套虚拟 DOM？有好处，但也没好像那么必要。\n\n然后看到一篇文章：[精读《现代 js 框架存在的根本原因》](https://juejin.cn/post/6844903608215945229)。里面提到的关键是数据状态与视图绑定的问题。\n\n最后又对比着想了客户端的工具链，我个人觉得，根本问题出在，制定 HTML 的 W3C 和 制定 JS 标准的 ECMA 属于两个完全不同的组织。\n\n前端开发需要处理视图+数据逻辑，需要用到两种语言。不能用一种语言吗？可以，但一般而言非常难用。不同的语言确实有不同擅长的方向，视图还是声明式的语言清晰好用（如HTML、XML），而写逻辑是命令式的长处（如C++，Go）。 对于客户端而言，控制视图的工具和控制逻辑的工具是一起更新的，但对于 Web 则并非如此。ECMA 填 JS 坑填得人要学不动，w3c 在更新 Web API，HTML 语法还是那样的万年不变。即便能一起更新，也很难在几年内覆盖大部分用户， 不像客户端一样是独家定制，还经常强制更新，不更用不了。浏览器总是万年不换，做浏览器的厂商也是五花八门。\n\n在视图层与逻辑层过于割裂的情况下，为了满足越来越复杂的开发需要，干脆直接摒弃了用 html 控制视图的思路，出现了 jsx 这样的怪东西（不是贬义），用自由度极高的 JS 干完所有活，底层渲染优化一类的全都由框架实现，方便又好使。\n\n如今的页面大多都是 JS 写的了。Next.js 的路由让人感觉更像是 JS 直接无缝代替了 HTML。还是和从前一样简单而易于理解与维护的站点架构，只是因为 HTML 太拉了，所以用 JS 写了。\n\n","tags":[],"imgsmd":[],"sourceFile":"001.md","csrIndex":[22,9]}]