{
    "version": "https://jsonfeed.org/version/1",
    "title": "Sansui's blog",
    "home_page_url": "https://sansui233.com",
    "feed_url": "https://sansui233.com/feed.json",
    "description": "记录学习和生活的个人博客",
    "author": {
        "name": "Sansui",
        "url": "https://sansui233.com/about.ico"
    },
    "items": [
        {
            "id": "https://sansui233.com/posts/2025-04-22-techs-about-steam-crack",
            "content_html": "<p>很久以前被淘宝的 Steam 假 CDKey 给坑过，因为价格其实也不便宜，打的正版宣传，其实是盗版，后来感觉太可疑了查了一下确认被坑了。现在突然想起来了解了一下。本文概述是日常语境中的 “Steam假入库”需要的一些步骤，概括起来为五个方面：解锁、下载、入库、DRM、API验证。</p>\n<h2>下载验证</h2>\n<p>steam 的下载鉴权流程是</p>\n<ol>\n<li>查找账号是否有拥有此游戏，有则显示下载按钮</li>\n<li>点击下载后，把游戏软件 Manifest 对应的密钥（DecryptionKey）明文写入一个本地文件 <code>Steam\\config\\config.vdf</code></li>\n<li>Steam （原版）根据 <code>config.vdf</code>中的信息，发送下载请求至 Steam CDN 进行下载</li>\n</ol>\n<p>“Steam 解锁” “Steam 假入库” 指的是绕过上述机制。具体而言，如果没有购买游戏，可以：</p>\n<ol>\n<li>将按钮变为可下载（至于是伪造请求实现还是逆向 hook 实现，我不知道，都可以，因为甚至不需要变按钮，给个外部的下载按钮也可以）</li>\n<li>点击按钮后，从不知名渠道获取一个正版账号的 Manifest（下载清单）和 Decryption Key（下载密码），写入<code>Steam\\config\\config.vdf</code></li>\n<li>Steam（原版）根据 <strong><code>config.vdf</code></strong>，发送下载请求至 Steam CDN 进行下载</li>\n</ol>\n<p>Steam 的下载验证可以说是相当简单，明文本地存密码，CDN 无状态的验证，这么多年没有改过流程，给入库工具空间（虽然说前端的事总有办法 Hack 但也是可以让 Hack 成本变高很多的）。不过 Steam 理念本来就是以平台服务留住玩家的，反倒是扩大了其影响力与营收。</p>\n<p>一些名词解释：</p>\n<ul>\n<li>解锁：指对没有购买的游戏，“可以显示下载按钮”。和能不能下载没有关系。</li>\n<li>下载：Steam 根据 <strong><code>Steam\\config\\config.vdf</code></strong> 的信息下载游戏文件。</li>\n<li>入库：指把下载好的游戏，在当前电脑的 Steam 库中显示。</li>\n</ul>\n<p>以上过程均不涉及对游戏本身的破解，只是对 Steam 下载过程的破解。也就是，破解的是 Steam，不是游戏。</p>\n<h2>运行时验证</h2>\n<p>这里开始才会涉及到游戏破解。</p>\n<p>有的 Steam 游戏下载下来后是不用破解的，直接找到游戏目录，点 exe 可以正常游玩（比如星露谷）。只是无法通过原版 Steam 打开，也就只能离线。</p>\n<p>有的游戏是无法脱离 Steam 直接运行的。这里涉及两层验证：</p>\n<h3>加密算法层</h3>\n<p>这是一层 DRM（数字版权加密保护）。Steam DRM 系统的名称为 SteamStub。SteamStub 的加密有各种的变体，每个游戏使用的不一致。只对 exe 的算法加密，是一个离线的步骤。不涉及 Steam 平台的验证。</p>\n<p>网上有一个开源工具叫 Steamless，可以破除 SteamStub 对游戏的 DRM，称为脱壳。但脱壳本身不处理 Steam 在线验证相关，只进行了脱壳的游戏也是无法正常游戏的。</p>\n<blockquote>\n<p>SteamStub DRM 和 Steamworks API 是两个独立层。Steamless <strong>仅移除 SteamStub 加密外壳</strong>，但游戏代码中与 Steam 平台功能（如成就、云存档、联机）相关的 API 调用（通过 <code>steam_api.dll</code>）仍会保留。</p>\n</blockquote>\n<h3>Steam API 验证</h3>\n<p>游戏还可能调用 Steam api 进行在线通信，如成就、云存档、联机相关的 API 调用。</p>\n<p>这是使用入库工具玩破解游戏可能被红信或封号的根本原因，因为对 API 的调用是发送到 Steam 官方服务器的。在小红书上了解到，有的玩的盗版可以与正版联机，说明 Steam 在联机时并不会验证账号是否拥有该游戏。包括 Steamtools 实现的家庭共享联机，也说明了 Steam 对于是否账号可以进行联机鉴权不足。但只要留有记录就有可能导致被封号，取决于 Steam 什么时候想管理盗版现象。</p>\n<p>反之，如果伪造一个 Steam 的服务器，并且替换游戏中的 Steam 相关的动态链接库，如 <code>steam_api.dll</code> ，游戏里所有对 Steam API 的调用被发送到假服务器上，返回一个假的结果。这种工具也已经有了，项目为 goldberg_emulator，简称 GBE。破解版的游戏通常会内置一个这样的虚拟 Steam 环境。</p>\n<h3>第三方厂商验证</h3>\n<p>很多大厂的游戏有自己的联机服务器和验证机制、不仅走 Steam API 的验证。这种也是可以通过虚拟环境破解，但没人做，除非专门对这个游戏的所有 API 做逆向。难度比逆向通用的 Steam API 高很多。</p>\n<h2>Steamtools 是什么</h2>\n<p>已知 Steamtools 主要是做 <strong>解锁</strong> 和 <strong>入库</strong>。对于会不会破解游戏，网上没有更多的信息。我也不想冒风险尝试使用它。</p>\n<p>根据官网的解释，Steamtools 可以离线运行（不如说破解游戏只能是离线运行），是提供了类似 GBE 的验证环境。有没有对 DRM 脱壳不清楚，但个人倾向于有，很多游戏都有 DRM 的保护，除了 SteamStub，还有其他的 DRM 验证方式，不脱壳玩不了。</p>\n<p>因此个人推测是，Steamtools 是集 <strong>解锁、下载、入库、破解、运行时验证</strong> 为一体的工具集。</p>\n<h2>SteamAutoCrack 是什么</h2>\n<p>只做 DRM 脱壳和 Steam API 验证。项目在 Github 上，破解后的游戏会运行在 GBE 的环境下。这种方式是完全离线运行的单机。</p>\n<h2>风险来源</h2>\n<p>完全脱离 Steam 运行没有风险，只要在线就可能有风险。</p>\n<p>假入库阶段的风险主要来自于入库工具对 Steam 请求拦截的覆盖程度不足。例如 Steam 版本更新了，使得 API 和下载流程有变化，而入库工具没有对其做处理，无法完全欺骗下载流程。网上看到假入库的人可能有囤积癖或者是打算做灰产，一次性入库了几十个游戏，直接导致被 SteamCDN 拉黑。</p>\n<p>运行时的风险也是来自于在线验证，如果是开着 Steam 玩的破解游戏，没有离线时甚至尝试联机，使得游玩信息发送到了 Steam 的服务器（比如不该有的存档、不该有的联机等等）。</p>\n<p>另外，入库工具会侵入式修改 Steam的客户端，直接打开 Steam 可能会有检测文件是否被修改。 Steamtools 提供了三种启动模式，可以随时恢复为原版 Steam 的运行。但淘宝卖的入库工具说不准是什么样的，当年骗我的店家那个用的是早期的 steamtools，使用店家的账号下载游戏后，使用 steamtools 离线运行（本来已经忘记了，努力想想竟然想得起来一点细节）。但现在的店家说不准是什么样的，在 B 站看到说有的是直接修改文件，从此都是盗版Steam 客户端，只能卸载重装。</p>\n<p>没有风险的方式：如果你有方式得到 Steam 正版的游戏文件，然后用 SteamAutoCrack 破解，能直接脱离 steam 运行则没有风险。</p>\n<p>对于更多的人而言，下载木马是最大的风险。</p>\n<h2>参考资料</h2>\n<ul>\n<li>bbs.steamtools论坛</li>\n<li>SteamManifestCache wiki</li>\n<li>SteamLess Readme</li>\n</ul>",
            "url": "https://sansui233.com/posts/2025-04-22-techs-about-steam-crack",
            "title": "Steam 假入库是怎么做的",
            "summary": "入库不仅仅是入库",
            "date_modified": "2025-04-21T19:59:00.000Z",
            "date_published": "2025-04-21T19:59:00.000Z",
            "tags": [
                "Diary"
            ]
        },
        {
            "id": "https://sansui233.com/posts/2025-04-19-windows-context-menu",
            "content_html": "<link rel=\"preload\" as=\"image\" href=\"https://img-cf.sansui233.com/imgs/2025/04/202504190843358.webp\"/><p>（发现简中圈居然没有人写这个事，写个草稿发别的地方）</p>\n<p>Windows11 右键菜单问题被诟病已有，网上很多还原为 win10 菜单的教程……但 win10 有 win10 的问题，有用的没用的都往里放，常用的不常用的混在一起。有没有一种方法可以兼顾好看，同时有合理的菜单层级呢？</p>\n<p>有的 —— Nilesoft Shell。可以自定义的 Win11 右键菜单。已经用了两年多了很好用（以至于差点忘了有这个软件）。</p>\n<h2>下载并安装</h2>\n<p>下载在官网： <a href=\"https://nilesoft.org/\">https://nilesoft.org/</a></p>\n<p>安装完后，新菜单应该已经生效了，并且会开机自启。这时候可以点点看，如果感觉效果满意就不用再看下去了。</p>\n<p>当然颜狗是不满意的，大部分一级菜单我用不上，我只想保留我常用的，不用的塞到更多选项。如图</p>\n<p><img src=\"https://img-cf.sansui233.com/imgs/2025/04/202504190843358.webp\" alt=\"\"/></p>\n<h2>挪动菜单层级</h2>\n<p>如果你是默认安装，<code>C:\\Program Files\\Nilesoft Shell</code> 应该能看见以下的文件结构</p>\n<pre><code>Nilesoft Shell/\r\n├── shell.exe\r\n├── shell.nss\r\n├── imports/\r\n│   ├── modify.nss\r\n│   └── ...\r\n└── ...\n</code></pre>\n<p>以 <code>.nss</code> 结尾的是配置文件，可以用记事本打开。以下是几个案例：</p>\n<h3>1. 收纳不常用菜单至 “更多选项”</h3>\n<p>例如，收纳所有名称里带有 “QQ” 和 “百度” 的菜单项，在 <code>modify.nss</code> 添加如下：</p>\n<pre><code>modify(mode=mode.multiple find=&quot;QQ|百度|网盘&quot; menu=title.more_options)\n</code></pre>\n<p>find 中包含的字符串会被匹配，“|”是或。表示匹配“QQ”或“百度”或“网盘”的任意项都会被挪走。</p>\n<p>这是主要的挪菜单的方式，我实际上挪了一大堆。</p>\n<pre><code>modify(mode=mode.multiple\r\n\tfind=&quot;收藏夹|打印|共享|PowerRename|Microsoft Defender|Change Attributes|File Locksmith|upic|火绒|百度|QQ|Acrobat|Adobe|OneDrive|在沙盒中运行|PicList|旧版 Windows Media Player&quot;\r\n\tmenu=title.more_options)\n</code></pre>\n<h3>2. “创建快捷方式”挪到顶层</h3>\n<p>有人可能看不惯 创建快捷方式 放在了 更多选项 里。要恢复把 <code>modify.nss</code> 中一行注释掉就好。</p>\n<pre><code>modify(mode=mode.multiple\r\n\twhere=this.id(\r\n\t\tid.send_to,\r\n\t\tid.share,\r\n\t\t// id.create_shortcut, 这行注释掉\r\n\t\tid.set_as_desktop_background,\r\n\t\tid.rotate_left,\r\n\t\t...\n</code></pre>\n<h3>3. 顶层添加新菜单项 “使用 vscode 打开”</h3>\n<p>在 <code>shell.nss</code> 中，新起一行添加</p>\n<pre><code>item(title=&#x27;Open with VS Code&#x27; image=[\\uE272, #22A7F2] cmd=&#x27;code&#x27; args=&#x27;&quot;@sel.path&quot; &amp;&amp; exit&#x27; sep=&#x27;top&#x27;)\n</code></pre>\n<p>添加的这行可以不在最后，添加的位置决定它在菜单中的位置。我添加在了中间，最后的几个 &quot;import&quot; 之间。</p>\n<p>要是问为什么我不用 vscode 自带的右键菜单……我的 vscode 装得太早了，那时还没有右键菜单关联，现在也懒得再装了就将就用吧……</p>\n<h3>4. 顶层菜单添加新目录</h3>\n<p>你要是在图片上右键，会发现系统自带有“使用 Windows 画图编辑”“使用照片编辑”“向左旋转”“向右旋转”……我的天，哪个天才设计的，你不知道自家照片 App 打开后能编辑也能旋转吗？（我知道这肯定是两波人开发的但还是想吐槽）</p>\n<p>秉持着只挪不删的原则，在“更多选项”前加了个“编辑”目录。以下加在了 <code>shell.nss</code></p>\n<pre><code>menu(mode=&quot;multiple&quot; title=&quot;编辑&quot; image=image.glyph(&quot;\\uE0A1&quot;))\r\n{\r\n}\n</code></pre>\n<p>然后在 <code>modify.nss</code> 里加了</p>\n<pre><code>modify(mode=mode.multiple\r\n\tfind=&quot;*编辑|旋转|PDF&quot;\r\n\tmenu=&quot;编辑&quot;)\n</code></pre>\n<p>这样等于说，编辑和旋转相关都被归到了新的“编辑”目录下。加上 PDF 相关操作挪进去。我没有装 WPS，装了 WPS 也可以把 WPS 挪一个目录。</p>\n<h2>生效</h2>\n<p>管理员权限运行安装目录下的 <code>shell.exe</code>，点 Register 生效</p>\n<h2>其他</h2>\n<p>按 shift 后右键菜单，会有一个“Developer” 目录。没错 shift 显示隐藏菜单也可以实现，配置的属性有 <code>vis=key.shift()</code> ，但不是实时变化的所以没有mac 上的好用。除此之外还有喜闻乐见的能配置主题、颜色、图标等……我不管了。</p>\n<h2>参考</h2>\n<p>官网的文档很详细，但是非常面向程序员。不过大部分的需求被人在论坛上问过了，也有人在 issue 里问。不会就去论坛翻一下。看不懂英文开翻译，看不懂文档丢给 AI。</p>\n<p>文档： <a href=\"https://nilesoft.org/docs\">https://nilesoft.org/docs</a></p>\n<p>论坛： <a href=\"https://github.com/moudey/Shell/discussions\">https://github.com/moudey/Shell/discussions</a></p>",
            "url": "https://sansui233.com/posts/2025-04-19-windows-context-menu",
            "title": "Windows11 右键菜单自定义 - NileSoft Shell",
            "summary": "颜狗就是得样式和功能性全要，怎么了",
            "date_modified": "2025-04-19T01:21:00.000Z",
            "date_published": "2025-04-19T01:21:00.000Z",
            "tags": [
                "工具"
            ]
        },
        {
            "id": "https://sansui233.com/posts/2025-01-05-2024-summary",
            "content_html": "<link rel=\"preload\" as=\"image\" href=\"https://cdn.jsdelivr.net/gh/NamiLing/upic/picgo/202401131219995.webp\"/><link rel=\"preload\" as=\"image\" href=\"https://img-cf.sansui233.com/imgs/2025/01/202501050253199.webp\"/><link rel=\"preload\" as=\"image\" href=\"https://img-cf.sansui233.com/imgs/2025/01/202501050335032.webp\"/><link rel=\"preload\" as=\"image\" href=\"https://img-cf.sansui233.com/imgs/2025/01/202501050330486.webp\"/><link rel=\"preload\" as=\"image\" href=\"https://img-cf.sansui233.com/imgs/2025/01/202501050325838.webp\"/><link rel=\"preload\" as=\"image\" href=\"https://img-cf.sansui233.com/imgs/2025/01/202501050055049.webp\"/><p>印象中之前每年其实都有写去年主要干了什么，看了什么作品。但又忘了都写在了哪里。今年想起来还是在这里写吧。</p>\n<p>主要说说看了些什么吧。</p>\n<h2>实用小技术</h2>\n<ol>\n<li>无线 iPad 当作电脑副屏</li>\n</ol>\n<p>某天突然想躺着用手柄玩电脑的游戏，所以 <a href=\"https://github.com/LizardByte/Sunshine\">sunshine</a> + moonlight(iPad) 串流。效果非常不错！</p>\n<ol start=\"2\">\n<li>便携显示屏</li>\n</ol>\n<p>后面，我又嫌无线的码率不稳定，组装了个便携显示屏，变成了躺着用电脑副屏……配件全部拼多多的。</p>\n<ul>\n<li>显示屏，京东方 NV156FHM N69</li>\n<li>驱动版、按键板、软排线</li>\n<li>外壳、音响</li>\n</ul>\n<ol start=\"3\">\n<li>新的代理协议与客户端</li>\n</ol>\n<p>今年对于魔法上网，非常重要的事情就是去年年底 clash-core 删库。不过也正好，促使我看看有没有人设计新的协议。</p>\n<p>协议方面尝试了 hysteria2 和 naive，测试下来已经把 hysteria2 当作主力了。顺便读了下 http2 <a href=\"https://github.com/abbshr/rfc7540-translation-zh_cn\">rfc7540</a> 和 http3 <a href=\"https://datatracker.ietf.org/doc/html/rfc9114\">rfc 9114</a> （但现在又忘了！）</p>\n<p>客户端试了 <a href=\"https://sing-box.sagernet.org/\">singbox</a>，在 ios 上替代了 shadowrocket，性能好非常多。电脑端 GUI 是典型的后端程序配置的思维，很难用，还是用 clash-meta 系列了。</p>\n<h2>单机游戏</h2>\n<ol>\n<li><a href=\"https://store.steampowered.com/app/240720/Getting_Over_It_with_Bennett_Foddy/\">Getting Over it</a> (掘地求升)</li>\n</ol>\n<p>我的天，有生之年我居然打通了这个8年前的破游戏！</p>\n<p>打通的那一瞬间，我感觉觉得自己已经可能面对任何困难无所不能了。但是山顶的聊天室早已空无一人，有一点寂寞。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/NamiLing/upic/picgo/202401131219995.webp\" alt=\"Getting over it\"/></p>\n<ol start=\"2\">\n<li><a href=\"https://store.steampowered.com/agecheck/app/1086940/?l=schinese\">博德之门3</a></li>\n</ol>\n<p>tga 2023 年度游戏，不好玩。去年买了，今年和 meme 大师与墨墨联机了好几次，还是玩不下去！打架打一局太久了……而且打不好还要 SL……补药啊！（后面没法联机了其实主要是因为我作息太乱了）</p>\n<ol start=\"3\">\n<li><a href=\"https://store.steampowered.com/app/1426210/_/?l=schinese\">双人成行</a></li>\n</ol>\n<p>2021 年度游戏，好玩，这个还是感谢陈 sir 陪我打完了，而且因为他是全成就大师所以我也跟着全成就了。因为我竟然买了两年都没有玩，显得特别可怜……</p>\n<ol start=\"4\">\n<li><a href=\"https://store.steampowered.com/app/2198150/Tiny_Glade/\">Tiny Glade</a></li>\n</ol>\n<p>新出的休闲建筑游戏，最不像游戏的游戏。建筑方式新颖，而且好好看哦！</p>\n<p>玩了后做了个视频，竟然被 HR 联系了……差点当诈骗私信……</p>\n<p><img src=\"https://img-cf.sansui233.com/imgs/2025/01/202501050253199.webp\" alt=\"Tiny Glade\"/></p>\n<ol start=\"5\">\n<li><a href=\"https://www.nintendo.com/hk/switch/animal_crossing_new_horizons/\">动物森友会</a></li>\n</ol>\n<p>到今年才打开这个几年前的游戏。建岛是好玩的，画风也可爱，但因为手游也有在刷，对于刷刷刷的都有点疲惫了。</p>\n<ol start=\"6\">\n<li><a href=\"https://store.steampowered.com/app/976730/Halo_The_Master_Chief_Collection/\">Halo</a></li>\n</ol>\n<p>meme 大师带飞的经典 FPS，有剧情，非常好游戏！我只用跟在后面捡各种好玩的枪就好了（不是）</p>\n<ol start=\"7\">\n<li><a href=\"https://store.steampowered.com/app/620/Portal_2/?l=schinese&amp;curator_clanid=31468181\">传送门2</a></li>\n</ol>\n<p>十几年前的解谜神作，好丸！多人模式也是 meme 大师带飞的。</p>\n<ol start=\"8\">\n<li><a href=\"https://www.bilibili.com/video/BV1hS411w7tR\">Second Eden-理想箱庭物语</a></li>\n</ol>\n<p>这是个新的 minecraft 深度魔改整合包，基于模拟殖民地 mod。我觉得比很多整合包都要好，考虑了流程、循环、引导，有些 mod 加的解谜结构很好玩。但模拟殖民地本身有 bug，加上流程上其实也不是特别完整，只建了一小半。</p>\n<ol start=\"9\">\n<li>零大陆</li>\n</ol>\n<p>这是个超老的 Minecraft1.8 原版 RPG 整合包。真的非常震撼能做到这个程度，流程设计、地图设计上超级完整……可惜循环有问题，卡在一个冒险模式下的银河城地下区域了。</p>\n<p><img src=\"https://img-cf.sansui233.com/imgs/2025/01/202501050335032.webp\" alt=\"零大陆\"/></p>\n<ol start=\"10\">\n<li>模拟地铁</li>\n</ol>\n<p>休闲小游戏，也是老游戏了，极简地铁规划，最后发现还是开滴滴比较好。内容对得起价格。也因此和喜欢地铁的朋友有聊些城建游戏。</p>\n<p><img src=\"https://img-cf.sansui233.com/imgs/2025/01/202501050330486.webp\" alt=\"模拟地铁\"/></p>\n<ol start=\"11\">\n<li><a href=\"https://store.steampowered.com/app/813230/ANIMAL_WELL/?l=schinese\">动物井 (Animal Well)</a></li>\n</ol>\n<p>解谜 + 平台跳跃。太好玩了，这才是真正的 2024 年度游戏！！而且只 33 M，性能也超好！是像素美术但是是很现代的赛博梦幻像素美术，好看的！</p>\n<p><img src=\"https://img-cf.sansui233.com/imgs/2025/01/202501050325838.webp\" alt=\"Animal Well\"/></p>\n<ol start=\"12\">\n<li><a href=\"https://store.steampowered.com/app/391540/Undertale/?l=schinese&amp;curator_clanid=31318556\">传说之下 (UnderTale)</a></li>\n</ol>\n<p>经典日式 RPG，脑洞超大角色有意思，剧情很温暖。是Meme 依据本人的游戏时长与偏好定制的 steam 礼物……非常喜欢！</p>\n<p><img src=\"https://img-cf.sansui233.com/imgs/2025/01/202501050055049.webp\" alt=\"UnderTale\"/></p>\n<h2>动画&amp;漫画</h2>\n<ol>\n<li><a href=\"https://www.bilibili.com/bangumi/media/md21087073\">葬送的芙莉莲</a></li>\n</ol>\n<p>中世纪魔法动画，难得味这么正，不算是我非常喜欢的类型但能看下去。而且作画的流畅程度真的……太有钱了！整体比较日常，很温馨。</p>\n<ol start=\"2\">\n<li><a href=\"https://www.bilibili.com/bangumi/media/md28339713\">蓝色禁区 Blue Lock</a></li>\n</ol>\n<p>足球番，我原以为我不喜欢看，最后根本停不下来……动画第一季做得实在太好了，但第二季是 PPT，1 分都不想给……漫画非常棒，不愧2024 年的日本漫画销冠。</p>\n<p>不过我是其实从其中一对 CP 图决定看，结果看完动画觉得这两人麦太多了……不如好好看球！</p>\n<ol start=\"3\">\n<li><a href=\"https://www.bilibili.com/video/BV1ag4y1W78U\">异形舞台 Alien Stage</a></li>\n</ol>\n<p>动画音乐剧，讲的外星人饲养地球人当宠物，看人们在舞台上通过选秀比赛相杀的故事。特点是，一集一个寡妇（夫）……太刀了！</p>\n<h2>电影</h2>\n<ol>\n<li>你想活出怎样的人生</li>\n</ol>\n<p>宫崎骏动画电影，我觉得依旧很好看，很温暖。</p>\n<ol start=\"2\">\n<li>蓦然回首（Look Back）</li>\n</ol>\n<p>藤本树动画电影，讲普通画画人的故事。非常牛美术风格。尽管我不是画画人，也没有很好的画画天赋。但也有一些感受有经历过，日复一日练基础，什么时候都在考虑画画……</p>\n<p>以及藤本树居然开始走治愈系了！</p>\n<ol start=\"3\">\n<li>志愿库 - 存亡之战</li>\n</ol>\n<p>怎么突然出现了国庆战争片……这个真的拍得挺好的，算是近年陈凯歌的不那么扑的了。以及我有朱一龙演技滤镜，在超烂低成本不被任何人看好的改编网剧里，因为演技太好而突然红的，真的没得说。</p>\n<ol start=\"4\">\n<li>名侦探柯南 - 黑铁的鱼影</li>\n</ol>\n<p>和雨疏的年度固定节目，不错的粉丝向主线剧场。真好啊真好十年后还在和她一起看柯南。</p>\n<h2>音乐</h2>\n<p>年度歌手还是 Radwimps，基本老歌。上半年没怎么听</p>\n<p>年底听 4 块钱的直播，才发现日系真是年年有天才。「晚餐歌」真的很厉害。原来不是我不喜欢听歌了，是没关注到好听的歌了，网易云日推越来越不行了，一直推各种时下 OP ED。</p>\n<h2>技能相关</h2>\n<ul>\n<li>\n<p>游戏，给 MC 服务器写了 彩虹帽子 数据包。想来这其实是第一次和游戏有关的编程，经典入口是帧更新 tick()。</p>\n</li>\n<li>\n<p>画画，学了平面设计的课，作业也很肝完了，有一些收获。然后又看了些曼奇的网课，素描关系有提升，就是增加了短调子、空间感、体积感的意识。我之前也不是感受不到，而是没觉得差一点明度就会差很多。这是 Ti - Se 画画相比于 Se - Ti 的劣势，需要有理论后才能画得好……</p>\n</li>\n<li>\n<p>原神里头一回赶上音游的版本，写了几首比较难的谱面，这个非常满意，是我自己都可以反复玩的！</p>\n</li>\n</ul>\n<h2>专业相关</h2>\n<p><del>这随便吧又没人看。</del></p>\n<ul>\n<li>\n<p>笔记主题没怎么更，我也用得越来越少了</p>\n</li>\n<li>\n<p>博客有更新，但忘了！</p>\n</li>\n<li>\n<p>新写了个服务器的监控页。</p>\n</li>\n<li>\n<p>论文挣扎着狂补。</p>\n</li>\n<li>\n<p>有去接触 GPU 相关的，不想只停留在业务 MVC 再 CRUD。但看了发现没需求的话确实用不上。</p>\n</li>\n</ul>\n<p>公司的相关还是不说了……主要是图形学和，久违的 OOP 编程，新的语言 C<span class=\"tag\">#，但长得非常通用面向对象，没有太多的入门门槛。不禁感叹外面世界的语言真是五花八门……但要说写界面好用还是声明式的，OOP </span>写界面特别过程式就，扭曲，痛苦，但无疑性能会更好。</p>",
            "url": "https://sansui233.com/posts/2025-01-05-2024-summary",
            "title": "2024 年的总结与分享",
            "summary": "怎么全在写游戏……",
            "date_modified": "2025-01-05T01:21:00.000Z",
            "date_published": "2025-01-05T01:21:00.000Z",
            "tags": [
                "Diary"
            ]
        },
        {
            "id": "https://sansui233.com/memos?id=2025-01-05 08:53",
            "content_html": "<link rel=\"preload\" as=\"image\" href=\"https://img-cf.sansui233.com/imgs/2025/06/202506232219346.webp\"/><h2>2025-06-24 15:57:40</h2>\n<p>之前有被说老是会说不，其实也想改掉总是说不。迎合等于忽略事实，拒绝等于冥顽不灵不听意见。不过往好了说，迎合是把握大众趋势，拒绝等于独立思考。我现在不太想直接说不，只好岔开着说一个看起来没有说不，实际就是说不的方式。</p>\n<p>说起来为什么会有老说不的习惯，因为一直以来我说不都是没用的，比如不想吃这么多饭，不想打半个小时电话。当然说是没用的，我计时说只有一分钟也没用，所以最近才直接挂电话拒绝情感索取……总之我已经被这种情感索取消耗掉了所有可能培养 Fe 的可能性。</p>\n<p>再说到，捞女游戏出来时，我没有觉得这游戏有什么过分的，讽刺这类群体没什么不好，有这类想法的人我不敢说有多少，但身边统计学有人是这样的，就会感觉这样的人并不少，至少比死宅二次元多……当然说可以成是利益导向，我并不觉得利益导向有问题，只是维持家庭到后期的需要是责任感，因利益结婚的人也可以有责任感，只是捞一把的人大概是不会想负责任的没得捞就跑了。</p>\n<p>感觉最近一年看了实在太多乱七八糟的东西，然后记忆力更差了……与其说差其实也是不用的就会渐渐忘掉。表达能力也下降地很厉害，东一句西一句。还是要尝试去体系化地表达同一个主题不要太跳脱。那首先要少写 meme……</p>\n<p>雀</p>\n<h2>2025-06-23 22:14:04</h2>\n<p>60天的速写牢嗯嗯。我觉得画画和写代码真的是不太能同时做到的事情，状态比较冲突。</p>\n<p><img src=\"https://img-cf.sansui233.com/imgs/2025/06/202506232219346.webp\" alt=\"60天速写\"/></p>\n<h2>2025-06-20 17:47:21</h2>\n<p>看了眼新的 next.js，感觉真是啥方案都补全了……当时感觉 styled-component 的ssr 方案也是到处找不到，最后跑去个小仓库看怎么在 _document.js 里插 style。结果现在直接看到各个文档直接把相关写出来了……嗯……行吧……然后当时觉得一个页面一直在 pages和 components 之间切也是挺烦的，其实也根本不会复用 UI 组件，只是拆出去能好看点。现在一看可以写一个目录下了……嗯……行吧……省得找了。网页真是挺标准化的东西，游戏不太能……</p>\n<p>看了下 subgrid……很有用。之前首页grid 其实预想的设计是右下角放标签的，但最终放弃了放标签的想法，原因是标题和描述长度不同，导致每个 card 标签的高度不一致，反而乱乱的。如果想做到标签高度一致，只能固定每个卡片的各个部分高度，做不了响应式的高度。现在 subgrid 可以做这种二级对齐了。不过鉴于 subgrid 是一个很新的feature，css 没法 polyfill 还是不用的好……</p>\n<p>什么，已经3年了吗……确实不知道我在干什么，其实是看了很多 AI 相关的，但基本都是被要求重写创新点所以只是看论文，加上复现边边角角的论文其实是相当困难的事情。我当时一直讨厌跑别人的 python 的工程，主要因为包管理太狗屎了，几乎到毕业时，我都只有一个 256G 的 mac，对于空间要求非常抠。实验室的服务器没权限让人自己搭环境，也没有任何做工程的氛围，在入学时根本还没有跑过任何一个 ML 的 Hello world，完全不理解原理的时候，导师就在说代码就是重复造轮子，不要多花时间在这上面，只要读论文和写论文讲故事。那时候 ML 入门的东西还比较少，还在 tensorflow 占主流 pytorch 刚有苗头的时候，Seq2Seq 还能每年有很多论文，沐神也还没开始写书，感觉整个实验室的工程能力都极其烂……我到现在也不能理解为什么能有人在工程能力为0的情况下写论文，该说写吗，就是编吧，没有任何实践的证明靠几十篇 paper 延伸一个假想的算法，最后 code 一下说，我们的方法好，没有实践上的各种问题，没有因为缺乏实践踩坑效果不好而推翻整个前期方案的情况，只会有看起不太创新而推翻整个前期方案的情况。怎么可能那么顺利？不可能的啊！当然不是所有组都是这样的，但不合的组是真的吃屎而且不能中途退出……</p>\n<h2>2025-05-12 03:00:00</h2>\n<p>我觉得前端越来越无聊的原因是发现总在茴……感觉是自从开始卷设计之后写茴就快到头了。卷设计之前还在卷客户端，最早学的时候还是jQuery那确实不方便。后面出框架解决数据绑定算是真正的革新。但近几年好像都在卷设计，你要说框架没有更新吗也更新了，但是更新地好像你用之前的东西也没有什么不便，rsc 出来之前 next 的 ssr 不照样能做吗成本也差不多。用 swr ？无限列表不也是超老的思想吗，而且频繁取新数据这事就没什么好说的，重点是在于维持正确的 playceholder 和判定交互行为那一套，硬要解耦重点也是在交互埋点上吧，这个又是和业务强项关的……除数据绑定之外还解决了什么呢……还有什么八股总是问virtual node解决了什么问题，标准答案是可以端……我真的一脸懵逼，我请问呢，没有virtual node就不能全端通用吗？都是抽象层，不能全端通用难道不是看有没有人适配 native gui 吗……也就是 React 闲得拓展业务搞了个跨平台api维护。当然谷歌也闲直接跨平台重绘，直接调图形引擎属实老本行……虽然我更喜欢后者的做法，但商业上确实会偏向前者…感到更无聊了。</p>\n<h2>2025-04-28 03:19:26</h2>\n<p>快乐不是来源于多能把东西做得多方便，而是来自于“居然这么东西还能这么做的”的好奇。</p>\n<p>换个人的话……快乐不是来源于东西本身有多美，而是来源于发现美的眼睛（好土）。</p>\n<h2>2025-04-18 22:12:23</h2>\n<p>本来想发长文那边，但最终还是太过于自我与情绪化了，也没了修改的力气，算了。</p>\n<hr/>\n<blockquote>\n<p>我原以为大家都是这样，原来只有我是这样</p>\n</blockquote>\n<p>1</p>\n<p>时间是家里聚餐后正在清理与洗碗。很多人在客厅里来来往往，非常无所事事地吵闹。两只猫早已习惯自己的领地突然涌入十几号仆从，瘫在猫抓板上眯眼睡觉。偶尔人类来逗他，眼角的肌肉勉强一动，以示朕已阅。直到有人拿着猫条叫着 “来来来”，嗖地尊座下蹿下来。</p>\n<p>好吵，非常吵。一如既往地坐在电脑前，随便打开一个文档。嗯，今天一定要看完！</p>\n<p>不一会儿人们渐渐走光了。我出去说了声再见，然后继续回到房间专注。有人羡慕心流，说我画画时像陷入了心流。然而，于我而言这是日常，甚至画画远不如编程、阅读的专注度。大概普遍印象中，画画的人总是给人岁月静好的感受。一旦人的行为沾上了一点艺术气息，就会变得神圣、不可打断与亵渎。但倘若看到你在画二次元，又会令人感到亲近，有人会友好地询问我在画什么，有人则直言不讳地说是幼稚。为了不被打断专注，保留一点所谓的艺术气息是必要的。</p>\n<p>可惜我没有那么艺术，我只是在看文档，最普遍的、常人看不懂的、只知消耗巨量脑力，需要放松的工作。事实上我不需要放松，我的目光与思绪无法从屏幕上挪开，仿佛一旦挪开就会掉链子，我渴望更多的，更完整的逻辑。若此刻被打断思绪，就如同电视剧的最终悬念揭晓前突然被老师叫起来罚站。</p>\n<p>此时我隐隐约约听到了脚步声。我一边强行维护着专注，一边用微弱的本能祈祷着，不要来推我的门，不要来推我的门，不要来推我的门。</p>\n<p>过了一会儿，脚步声渐远，我那微弱的本能松了一口气，把这次的小小分心忘掉了，无事发生。</p>\n<p>当下一轮越来越近脚步声响起，我明白之后会发生什么。</p>\n<p>门把手转动的吱嘎声音，把手转到底时门的活塞与木质的结构撞击声音，然后是木门被突然推开时，整个房间的气压微弱的升高，带起了一阵风，四扇塑料窗子在耳朵哐啷地轰鸣，似乎连带着整个墙体的共振。整个小小的空间，上演了一出 jump scare，扰乱了房间的气流，也打断了我的心流。</p>\n<p>我顷刻间变得无比厌烦。我没有表现，我仍然想专注，可事实上此时我已经无法边看边思考了。我只是非常厌烦带来了这一切中断的人。有人可能会觉得你房间是不是质量太差？不是的，这是一般的框架结构房屋，钢筋的牵拉具有良好的抗震功效。普通的开门在别人看来是平平无奇的，但对于此时的我，一切细节在经历数次后都被放大，是空间的打破，是对已知未来的预测，是对预测之事的厌恶。</p>\n<p>房间门口出现了不可忽视的身影。她可能直接进来，不管我做的一切，想和我进行一场严肃的对话。或者是带着水果，然后问你在干什么。尽管我做什么其实并不重要，她只是随口一问。我还要把这些她听不懂的东西试图用她能听懂的语言概括，亦感到无比厌烦。如果她真的有求知欲，那是值得费一番功夫分享的。事实是她并不想费脑子理解我做的具体事物，她只是随口一问，想知道我在干什么，想掌握我在干什么。</p>\n<p>我等着她下一句开口说的话。但这次她没有说话，瞟了一眼我的屏幕，盯了一会儿，离去了。没有关门。</p>\n<p>但从前太多次的厌烦已经深入人心，无法被消解了。门窗的轰鸣亦是这样，无法消解。</p>\n<p>2</p>\n<p>如果她进门，真的让我聊我做的具体事物时，那可能更加糟糕。这就是“严肃的对话”场景。又会拐到更宏观的存在主义话题上，说服我自己做的一切都是没有价值的，或者是她看不到价值的，摧毁我原有的信念。信念是强大的，不易被轻易摧毁的。</p>\n<p>此刻我有些不想再回忆了，上述场景有轻度 PTSD。我很长时间都不认为这是 PTSD，直到我发现一旦回忆就会开始哭泣，尽管我没有任何想法，我的脑子一片空白只是在哭。我没有用逻辑去思考为什么哭和有没有必要哭，这这反应是几秒内瞬发的，超越了逻辑本身，等有逻辑时已经结束了。</p>\n<p>然而这一切都源于我想有逻辑地回复每一句话。已读乱回，做不到。</p>\n<p>她看了很多爹味短视频，都是三言两语不深入的大道理，任何场景都能套用同一套说辞，加上她自以为的假设，形成逻辑闭环，百战百胜。我能背下来了，我能复述她那不断重复的大道理。要说道理有没有缺陷，有，只重视概率上的因果而无视信念。她至今也无法理解或利用特质，又或者应该叫“个性”，这个脱离她掌控令她恐惧的词。</p>\n<p>但我并不想在辩论赛获胜，我只是想解决具体的问题。</p>\n<p>3</p>\n<p>有时会是猫猫抓门，猫猫的抓门很有礼貌，猫猫不会轰地开门。猫猫很直白地一本正经地蹲在旁边跃跃欲试，表示想趴在我身上，等着我的反馈。我很开心，总是让猫猫上身。尽管被打断了，也非常开心。</p>\n<p>4</p>\n<p>有人说一看你的家庭情感挺好的。不是，那也是我贯于伪装，电视剧里有那么多健康、日常的家庭关系可以参考。每个人都有伪装，因为社会实质上依就无法容纳有太多特质或者特殊经历的人——至少表现上如此。这不是人的问题，而是社会的分工是本就是一种机器。机器的一环如果出错了，对于后续的产业链可能会造成灾难。可人不是机器，那就招更加标准化的人。</p>\n<p>有次看演唱会晚归时，我假装肚子疼去医院晚回了，把同行的室友惊呆了。但换到现在我想大概难以做到那种程度的伪装，即便一时有这样那样的好处，但任何事情上都在伪装，在脱离本心的道路上渐行渐远，会给自身带来更严重的灾难。不，已经带来了。</p>\n<p>总之现阶段，矫枉过正，会显得不懂人情世故，我想也是必然吧。</p>\n<p>我很讨厌我的说话风格，一二三总之，清晰的罗列和一堆逻辑方向的用词。我已经在尽量避免爹味的痕迹。但我很久没有看过文学作品了，天天看论文和文档免不了如此。</p>\n<p>5</p>\n<p>坐班工作的时候我反而没有注意力切换的烦躁感。叫我也肯定是讨论工作问题，我所说的对方能理解，大家有在认真地理解对方具体的行动。而不仅仅是三两句陷入存在主义的危机。</p>\n<p>但是注意力切换问题还是存在的，有次被打断去看什么，回来不知道写到哪里了，之前什么细节需要注意，然后写了 bug ……</p>\n<p>6</p>\n<p>你为什么不工作？</p>\n<p>在最想找工作、转行的时候，说我的所作所为一无价值，对赚的那一点小钱进行对比贬低，以此劝我写论文。在决定把论文写完后，发现我写不完，劝我赶紧找工作。</p>\n<p>这么说，导师才是第一个问，你真的想写完论文吗，的人。虽然我对导师并无好印象，但我可以理解他，我和他更像是一类人。</p>\n<p>我觉得不要劝了，真正的支持确实只有钱了。我不需要关心，我分不清你们的关心和控制。我也不需要很多钱，可以每天吃三块钱的面过活。趁我还有力气偶尔想死时让我自己决定，我不想，也怪不到你们头上。</p>\n<p>不是说我想死，而是想死之人必有不甘。无所谓生死时才是真的躺了。至少有人真的有人会很切实地鼓励我写论文，我已经非常感激了。你不是一个人，运气也不算太坏，不是吗。</p>\n<h2>2025-04-16 07:31:00</h2>\n<p>看了眼 tool_call 到底是啥……这怎么也写茴……用 peft 模型让大模型能更好处理特定格式的输入输出，以满足传统编程的需要……说 AI 和 传统编程分界的话，大概在于 AI 只管 pe 算法但不管具体数据集格式，传统编程只管数据格式不管 pe 算法的啥的。由于数据格式无穷多，那不就还是写茴，而 tool_call 是其中之一……倒也可以算是种下游任务，只是不管算法本身的，最缺的是特定格式数据集的，我都称之为写茴……</p>\n<p>想起鄙人论文也涉及 pe（参数微调）……anyway 不重要了，应用花时间最多的还是在处理数据格式上，方法确实没啥值得说是创新的地方的，还是在写茴当 api 调库侠……文本分类问题，随便一个 lora 就可以解决真是忧伤……大模型的小版本也够用了，不再需要小模型了。对了，上次看的语音模型论文也是在 prompt 上做文章，直接把 encode 后的音频特征当输入塞进千问0.5b，输出再去掉特殊 token  就是 decode 成了 wav 了………训练的只有一个 encoder 以确保输出 token 能被顺利 decode 为人能听的音频……这何尝不算一种前置的 finetune……</p>",
            "url": "https://sansui233.com/memos",
            "title": "碎碎念2025",
            "date_modified": "2025-01-05T00:53:00.000Z",
            "date_published": "2025-01-05T00:53:00.000Z",
            "tags": [
                "Diary"
            ]
        },
        {
            "id": "https://sansui233.com/posts/2024-11-13-懒-快节奏与赛博巨婴",
            "content_html": "<p>1</p>\n<p>今天我想把一张图从 iPad 传到 iPhone 时，突然感觉很麻烦，因为需要打开并解锁，ipad，打开照片，再点击分享，点击AirDrop。</p>\n<p>然后猛然意识到，我是不是越来越懒了？</p>\n<p>对于懒与对于快节奏的追求本质上是一回事，都是简化简化再简化。我对简化的追求似乎有无止境的趋势，也喜欢比对市面上的效率工具，但这真的能提高生产力吗？</p>\n<p>从前拿着U盘传照片，会感叹信息化的便利。我学习计算机也想做让生活便利的事情，在更短的时间去体验到更多原本无法体验到的东西。后来用 qq 传照片，也感觉很方便。是什么时候开始连 AirDrop 都嫌弃太麻烦了呢？是不是对于我，只有意念传输才是终点？可那之后又能如何呢？</p>\n<p>2</p>\n<p>生活的意义来自于过程，而非终点。而衡量事物价格来自于终点，而非过程。</p>\n<p>毫无疑问，工作、劳动力是商品化的，意义与复杂性从不等于价格。不如说以找寻意义的方式寻找工作，很大程度上会面临吃不上饭。</p>\n<p>3</p>\n<p>从前会写书信，后来能随时短信联系变得好方便，一个月发几十块的短信。再后来即时通讯工具出来，联络更便宜更方便了，可人渐渐变成了24小时 oncall 状态，隔几个小时不看微信就会被说太慢了。大概一天只看两次微信的已经是异端了。</p>\n<p>也许和人有关，微信从一个方便联系感情的软件，变成了生产力工具，是随时随地接受需求的怪物。我起初能理解在微信同时加工作的人和亲人，之后变得难以理解，到现在又变得可以理解，感受是大不相同。从前是四海为友，后来是要把社交分开，到现在是感觉其实都是一回事，亲人不会更特别。</p>\n<p>当真的想要放松联络时，就会使用其他软件了。为什么 qq 依然在年轻人中流行？其实就是长辈不用。qq 的用户群有特别老的和特别年轻的，中间有明显的断层。</p>\n<p>4</p>\n<p>国人非常喜欢开发效率类工具，也喜欢记录。近几年新的效率工具，我所知道的绝大部分是国人在开发。可能与老中整体的环境相关。在我记忆中，如果一件事做得不好，就是要反省的，如果一件事做得好但慢，那就是没有效率。「效率」这个词似乎成为了魔咒。</p>\n<p>再加上不要自大、时刻谦逊、居安思危等等，于是养成了无法接受任何夸赞的性格。夸就是客套，真夸就是直冒冷汗。嗯，只要还面对着别人，没有一件事是我满意的。满意的东西现在会小心收藏起来，像 led 屏一样，不要轻易就被弄碎了。</p>\n<p>5</p>\n<p>人类造就科技成长，但又被科技裹挟，造就一个个被高度封装的便利化包裹的巨婴。从逻辑上说，国内早就已经进入赛博朋克，只是社会形态还没有跟上。</p>\n<p>这类抽象思考的空虚感令人害怕，时常觉得早已非人。也可能只是我的个人想法。希望脱离宏大叙事，去做出微小的选择。</p>\n<p>想画漫画了，草。</p>\n<p>写于2024年11月13日03时15分。</p>",
            "url": "https://sansui233.com/posts/2024-11-13-懒-快节奏与赛博巨婴",
            "title": "懒、快节奏与赛博巨婴",
            "summary": "科技为了便利，可便利是否有尽头",
            "date_modified": "2024-11-13T22:55:00.000Z",
            "date_published": "2024-11-13T22:55:00.000Z",
            "tags": [
                "Diary"
            ]
        },
        {
            "id": "https://sansui233.com/posts/2024-11-12-把drawio装修为简单美观的白板应用",
            "content_html": "<link rel=\"preload\" as=\"image\" href=\"https://img-cf.sansui233.com/imgs/2024/11/202411120511240.webp\"/><link rel=\"preload\" as=\"image\" href=\"https://img-cf.sansui233.com/imgs/2024/11/202411120511552.webp\"/><link rel=\"preload\" as=\"image\" href=\"https://img-cf.sansui233.com/imgs/2024/11/202411120516688.webp\"/><link rel=\"preload\" as=\"image\" href=\"https://img-cf.sansui233.com/imgs/2024/11/202411120513014.webp\"/><link rel=\"preload\" as=\"image\" href=\"https://img-cf.sansui233.com/imgs/2024/11/202411120514766.webp\"/><link rel=\"preload\" as=\"image\" href=\"https://img-cf.sansui233.com/imgs/2024/11/202411120511067.webp\"/><link rel=\"preload\" as=\"image\" href=\"https://img-cf.sansui233.com/imgs/2024/11/202411120515358.webp\"/><link rel=\"preload\" as=\"image\" href=\"https://img-cf.sansui233.com/imgs/2024/11/202411120516990.webp\"/><p><a href=\"http://draw.io\">draw.io</a> 是一个功能丰富的流程图绘制软件。此前写论文时我一直使用这个软件画图。在没有系统性的画图需要，转而变成了有时想要随手画矢量示意图后，这个软件启动交互流程步骤繁琐，我便极少使用它了。但在使用了 tldraw, excalidraw 后，又回到了 <a href=\"http://draw.io\">draw.io</a>，才发现这个软件的可定制性其实非常强，完全能满足随手画图的需要。这里记录一下如何把 draw.io 变成一个更适合打开即用的、默认效果更加现代的白板应用。</p>\n<p><img src=\"https://img-cf.sansui233.com/imgs/2024/11/202411120511240.webp\" alt=\"image.png\"/></p>\n<p>（草……windows 截图这边缘的黑框好丑啊！）</p>\n<h2>为什么是 draw.io</h2>\n<p>先对比一下适合需求的竞品（不想看请跳转下一节）：</p>\n<ul>\n<li><a href=\"https://www.microsoft.com/en-us/microsoft-365/visio/flowchart-software\">visio</a>: 收费，而且 mac 上没有。</li>\n<li><a href=\"https://www.tldraw.com/\">tldraw</a>, <a href=\"https://excalidraw.com/\">excalidraw</a>: 更适合作为 sdk 使用，作为成品有些过于简单，在易用的同时，想多做一点非流程图的东西又很复杂，中文字体也不契合其默认的手写设计。而且并没有打包为桌面 App，文件关联是个问题。</li>\n<li><a href=\"https://www.processon.io/\">processon</a>: 要登录</li>\n<li><a href=\"https://www.figma.com/\">figma</a>: 要用梯子登录</li>\n<li>powerpoint: ……我只是想偶尔画个示意图</li>\n<li>飞书: 每30天要扫码登录 ……我只是想偶尔画个示意图</li>\n<li>adobe illustrator: 没有常用预制样式库，漫长的启动时间，对于没接触过的人学习成本很高。</li>\n<li>无边记、goodnotes: 苹果移动端生态 only</li>\n</ul>\n<p><a href=\"http://draw.io\">draw.io</a> 没有上述的问题，但它由于设计之初不是个草图应用，所以：</p>\n<ul>\n<li>默认较为重型的 UI</li>\n<li>启动先选择储存位置，太慢了</li>\n<li>默认组件样式很丑，看起来只适合工控图</li>\n<li>有时会感觉曲线箭头很难调，怎么都不流畅</li>\n</ul>\n<p>我根据以上三点问题大致说一下如何改进。</p>\n<h2>更换UI布局</h2>\n<p>默认的 UI 较为传统的重型设计，熟悉这类UI是相当好用的，但按钮组过多会显得不够轻便。在 <code>其它→主题→外观</code> 中可以更换为其他的主题，有5套可用：经典、极简、简易、草图、atlas。</p>\n<p>我个人用得比较多的是「简易」，并且关掉了左侧栏形状库的栏，改为用顶栏，右侧格式栏在顶部有快速按钮展开。</p>\n<p>习惯 tldraw、excalidraw 的用户应该还是更适合「草图」主题，绑定了基础形状的快捷键。需要去手动调出格式栏。</p>\n<p><img src=\"https://img-cf.sansui233.com/imgs/2024/11/202411120511552.webp\" alt=\"image.png\"/></p>\n<h2>更改启动流程</h2>\n<p>默认情况下，启动时会弹出选择保存位置的框。新建画布时，又会先看到一大串模板的选择题，还得去想命名。但很多时候，随便画图是不需要保存的。</p>\n<p>在经典主题下，需要去「其它」→「显示开始画面」上取消勾选。在其它的主题下，则需要去菜单的「设置」→「配置」里取消勾选「显示开始画面」。</p>\n<p><img src=\"https://img-cf.sansui233.com/imgs/2024/11/202411120516688.webp\" alt=\"image.png\"/></p>\n<h2>配置默认样式</h2>\n<p>要做到更改默认样式，需要写 JSON 配置。尽管可以在侧栏按「设置为默认样式」，但只能当前打开的窗口生效，刷新、新开文档都会导致默认样式回到最初的样子。</p>\n<p>在经典主题下，需要通过 「其它」→「配置」打开，其它主题下，则是「设置」→「配置」。</p>\n<blockquote>\n<p><strong>我的配置已经上传到 <a href=\"https://gist.github.com/Sansui233/a7f5b88e35194f82b1a76a7e05df4f5c\">gist</a>。</strong></p>\n</blockquote>\n<p>JSON 写法参考了如下文档：</p>\n<ul>\n<li><a href=\"https://drawio-app.com/blog/customise-default-shape-libraries-templates-and-plugins-in-draw-io-for-confluence-cloud/\">Customise default shape libraries, templates and plugins in draw.io for Confluence Cloud - draw.io</a></li>\n<li><a href=\"https://www.drawio.com/doc/faq/configure-diagram-editor\">Configure the draw.io editor</a></li>\n</ul>\n<p><a href=\"http://draw.io\">draw.io</a> 的图形分为 vertex（顶点图形） 和 edge（箭头、线段）两类，选中按 <code>ctrl + e</code> 即可查看当前图形应用的样式。</p>\n<h3>配色与样式设计</h3>\n<p>整体采用的粗线条粗体，比较契合现代简约又活泼的趋势。edge 采用黑色，与高饱和的 vertex 非常好搭配。</p>\n<p>直接抄的无边记的颜色，有的有轻微的改动。不过无边记最印象化的水蓝色没有抄上去。</p>\n<p>默认的配色改为了最后一个蓝色。以下配色均可以在右侧的「格式栏」中找到并应用。</p>\n<p><img src=\"https://img-cf.sansui233.com/imgs/2024/11/202411120513014.webp\" alt=\"配色方案.png\"/></p>\n<h3>关于圆角矩形</h3>\n<p>现代设计中圆角矩形用得更多。对于圆角的弧度，可以通过属性 Arc Size 去调整。可以点击设置为默认样式，也可以配置到 JSON 里。</p>\n<p><img src=\"https://img-cf.sansui233.com/imgs/2024/11/202411120514766.webp\" alt=\"image.png\"/></p>\n<p>如果你使用的「经典」主题，需要自己选择圆角矩形的图形。在「草图」主题下，按 <code>D</code> 就是默认配置好的圆角矩形，相当简单。「简易」主题下的位置如图：</p>\n<p><img src=\"https://img-cf.sansui233.com/imgs/2024/11/202411120511067.webp\" alt=\"image.png\"/></p>\n<h3>关于曲线设置</h3>\n<p>曲线设置不对会变得很难调整，一张图说明大多数情况下的曲线操作与设置：</p>\n<p><img src=\"https://img-cf.sansui233.com/imgs/2024/11/202411120515358.webp\" alt=\"曲线.png\"/></p>\n<h3>想更换为手写风格？</h3>\n<p>在不选中任何东西的情况下，把右侧格式栏的草图勾选上即可，就可以获得类似 excalidraw 的手写风格啦！</p>\n<p>另外，如果没有自定义 JSON， 「草图」主题下的默认样式也是手写风格的。</p>\n<h3>关于默认字体（附网页用字号推荐）</h3>\n<p>JSON 中这几个字段设置默认字体。我默认英文是 Inter，中文是使用的系统黑体。文字大小我设置为了网页标准 16px。</p>\n<pre><code class=\"hljs language-json\"><span class=\"hljs-punctuation\">{</span>\n  <span class=\"hljs-attr\">&quot;customFonts&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\n    <span class=\"hljs-string\">&quot;Inter&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;pingfang sc&quot;</span>\n  <span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">,</span>\n  <span class=\"hljs-attr\">&quot;defaultVertexStyle&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span>\n    <span class=\"hljs-attr\">&quot;fontSize&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">16</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-attr\">&quot;fontFamily&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;Inter&quot;</span>\n  <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\n  <span class=\"hljs-attr\">&quot;defaultEdgeStyle&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span>\n    <span class=\"hljs-attr\">&quot;fontSize&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">16</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-attr\">&quot;fontFamily&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;Inter&quot;</span>\n  <span class=\"hljs-punctuation\">}</span>\n<span class=\"hljs-punctuation\">}</span>\n</code></pre>\n<p>另外介绍一下常用网页文字大小的规范，现代的美术设计由于自己屏幕很大，或者对标准视距缩放大小没太多概念，非常容易把字给设置得很小（点名星穹铁道）</p>\n<ul>\n<li>16px 为默认正文大小，但由于主要是考虑了希腊字母面积比较小，所以也有的中文网站会设置为 15px。</li>\n<li>14px 偏次级小段落、不重要的文字，长时间阅读会累。</li>\n<li>13px 为代码常用大小。</li>\n<li>12px 已经非常小了，是正常视距下最小可视大小，适合做脚注、引用。</li>\n</ul>\n<p>再小的字号不推荐作为内容性文本使用。</p>\n<h3>关于背景网格</h3>\n<p>在简易主题中默认关闭的，经典主题中可以通过配置 JSON 为默认关闭。关掉背景网格会显得比较现代化。</p>\n<pre><code class=\"hljs language-json\"><span class=\"hljs-punctuation\">{</span>\n  <span class=\"hljs-attr\">&quot;defaultGridEnabled&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-literal\"><span class=\"hljs-keyword\">false</span></span><span class=\"hljs-punctuation\">,</span>\n  <span class=\"hljs-attr\">&quot;defaultPageVisible&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-literal\"><span class=\"hljs-keyword\">false</span></span>\n<span class=\"hljs-punctuation\">}</span>\n</code></pre>\n<p>但还是有时可能需要开启网格，那就什么都不选中，右侧栏开启网格就可以了。</p>\n<h2>其他使用 Tips</h2>\n<h3>导出设置</h3>\n<p>导出时注意一下缩放。网页标准大小字体为 16px，编辑时画布 100% 缩放下一切正常。但是当导出为位图（jpg, png）时，需要根据你的显示器缩放进行放大，否则文字一定会糊。</p>\n<p>我的显示器为 150% 界面缩放，因此需要缩放到 150% 才能大概清晰，如果要让 4k 屏也看得无比清晰，最好导出 200% 缩放，且 dpi 尽量在 180 以上。</p>\n<p>另外可以直接框选后右键复制，不一定要导出。</p>\n<h3>一个文件画多张图</h3>\n<p>经常会遇到多张同系列图的需求。为此，你可以选择都画在一页上，要用时框选特定范围，右键复制为 png 。这样很适合边聊天边画图发给别人，但也会失去缩放、加白底、加白边等设置。至少你得打个组，把 16px 的文字放大后再复制，以确保结果不会糊。</p>\n<p><a href=\"http://draw.io\">draw.io</a> 也可以分页，建议是一页一个图，可批量导出。</p>\n<h3>从 Mermaid 生成图、嵌入 Notion</h3>\n<p>mermaid 是一种画流程图的代码，比较适合不想可视化排列对齐的强迫症。</p>\n<p>draw.io 可以在菜单中的「高级」使用 mermaid 生成图，下面的图就是导入 mermaid 生成的。</p>\n<p><img src=\"https://img-cf.sansui233.com/imgs/2024/11/202411120516990.webp\" alt=\"未命名绘图.png\"/></p>\n<p>由于 notion 无法画图，在 notion 我都是用的 mermaid，有点不好看但至少目的达到了。不过最近发现，<a href=\"http://draw.io\">draw.io</a> 的导出可以选择直接嵌入notion，点开还能进行编辑……实现方式是图像数据全部存放在了链接里……不得不说 draw.io 自主兼容性做得很强，从接入了那么多网盘就可见一斑。</p>\n<h3>自定义CSS</h3>\n<p>如果还是觉得 UI 太丑了，在 <a href=\"https://www.drawio.com/doc/faq/configure-diagram-editor\">Configure the draw.io editor</a> 中可以找到自定义 CSS 的部分（但我觉得 UI 排列上还是不错的，这足够了）</p>",
            "url": "https://sansui233.com/posts/2024-11-12-把drawio装修为简单美观的白板应用",
            "title": "把 draw.io 装修为简单且现代的白板应用",
            "summary": "装修无止境！",
            "date_modified": "2024-11-12T05:19:00.000Z",
            "date_published": "2024-11-12T05:19:00.000Z",
            "tags": [
                "工具"
            ]
        },
        {
            "id": "https://sansui233.com/posts/2023-09-29-windows-system-chinese-fonts-adjustment",
            "content_html": "<link rel=\"preload\" as=\"image\" href=\"https://img-cf.sansui233.com/imgs/2024/08/202408190158527.webp\"/><link rel=\"preload\" as=\"image\" href=\"https://img-cf.sansui233.com/imgs/2024/08/202408190318888.webp\"/><link rel=\"preload\" as=\"image\" href=\"https://img-cf.sansui233.com/imgs/2024/07/202407260100518.webp\"/><blockquote>\n<p>以下仅适用于低于 4k 缩放 200% 的显示器</p>\n</blockquote>\n<p>微软雅黑作为随着 Windows7 出现的字体，加上遥遥领先（？）的 ClearType，在当时的 1080p 显示器上十分清晰易读。</p>\n<p>但如今的显示器分辨率越来越高，旧版微软雅黑的设计存在着明显的缺陷。</p>\n<p>一是其字形设计并不平衡，中宫过大，有的字形可以以难看来形容；二是微软雅黑字形只在 4K 屏 200% 缩放（以上的配置）上有着较好的显示效果。</p>\n<p>微软曾经设计过“另一版的微软雅黑”，即 Noble Scarlet，但并没有在正式的系统中使用。这一版字体设计依然中宫偏大，但相对老版收敛了不少，平衡了一些。</p>\n<p>另外，如果你不巧像我一样用着 2K 或 2.5K 屏，</p>\n<ul>\n<li>在 24寸时，100% 缩放字体比较合适，但与 16 寸 1080p 显示器差不多清晰度，不过屏幕可用空间更大。</li>\n<li>在 21 寸时，100% 缩放字体会偏小，比较锻炼眼睛。150% 缩放字体大小比较合适，效果更细腻，但字型会比较怪，且屏幕可用空间与 1080p 相同。</li>\n<li>在 16 寸时，150% 缩放字体稍微偏小，效果比较细腻，但非整数倍缩放+ClearType 的加持下，一些像素被吞掉，笔画的间距不平衡，有种“ windows 特有的字被虫噬的美”。</li>\n</ul>\n<p><img src=\"https://img-cf.sansui233.com/imgs/2024/08/202408190158527.webp\" alt=\"字形\"/></p>\n<p>可以看到，上图的 100% 200% 缩放没有字形变形问题，可以说微软雅黑小字优化是考虑的 100% 缩放。100% 缩放显得糊则是因为图片放大放大倍率过高，实际不会有糊，而是有锯齿感。</p>\n<p>150% 缩放会由于 clearType 的“锐化”导致字形变化，不知道的还以为换了个字体。如果是125%、175%的缩放，字体变形更加糟糕。</p>\n<p>造成缩放问题的原因大概可以用下图进行简要解释：</p>\n<p><img src=\"https://img-cf.sansui233.com/imgs/2024/08/202408190318888.webp\" alt=\"缩放\"/></p>\n<p>Mac 上的 Retina 渲染相当于 4k 200% 缩放起步。而 windows 下， 2k-2.5k 的屏幕都在 200% 以下的缩放中挣扎。如果软件没有适配高分屏，没有 clearType，强制进行双线性缩放（常见于图片UI），就会显得非常糊。想体验这样的糊，可以下载旧版的原神启动器。</p>\n<h2>需要准备</h2>\n<ul>\n<li>\n<p><strong>Noble Scarlet</strong>  替换系统的微软雅黑。由于 Noble Scarlet 是一个未完成的字体，普遍使用的是社区修正版，以下是资源参考。</p>\n<ul>\n<li><a href=\"https://bbs.pcbeta.com/viewthread-1960120-1-4.html\">pcbeta</a></li>\n<li><a href=\"https://www.bilibili.com/read/cv6059905/\">bilibili</a></li>\n</ul>\n</li>\n<li>\n<p>系统字体替换工具：搜索 “<a href=\"https://www.fishlee.net/soft/SysFontReplacer/\">字体替换工具 by 随风飘扬</a>”。替换完后重启，否则可能有缩放错误。另外，github 上有一个非侵入式的系统字体替换工具 <a href=\"https://github.com/Tatsu-syo/noMeiryoUI\">noMeiryoUI</a>，可惜换不全 windows 11，只是作为预览不同字体在系统上的效果倒是个很不错的工具。</p>\n</li>\n<li>\n<p><a href=\"https://www.mactype.net/\"><strong>MacType</strong></a> 改善 ClearType 的虫噬渲染方式带来的不均匀，使用后提升非常非常大。</p>\n</li>\n<li>\n<p><strong><a href=\"https://source.typekit.com/source-han-serif/cn/\">思源宋体</a></strong>：推荐将浏览器的 Serif 字体设置为此字体。默认的宋体真的，不论中文英文，都很丑……只适合打印。</p>\n</li>\n</ul>\n<h2>常用正文黑体简述</h2>\n<p><img src=\"https://img-cf.sansui233.com/imgs/2024/07/202407260100518.webp\" alt=\"\"/></p>\n<h3>苹方</h3>\n<p>苹方是一款设计上很优秀的字体，其间架结构、中宫非常平衡，既兼顾了传统的汉字笔画细节又有规整而现代的几何化，间距合理，阅读起来非常舒适。</p>\n<p>但是……苹方的设计缺字重。</p>\n<p>在设计上，苹方没有 Heavy 字重（<a href=\"https://support.apple.com/en-us/103203\">参考</a>）。而在<a href=\"https://github.com/paraself/PingFang-Fonts\">流行的 github 苹方字体仓库</a>中，则是将 Bold 字重映射到了 Heavy，而将原本的Medium 映射到了 bold。虽然这个问题不是苹果设计的导致的，而是一个再次分发时的错误，但致使目前网上能搜索到的第三方仓库的苹方字体整体字重均偏细。</p>\n<p>另外，苹方在 2.5K 屏上表现非常糊，苹方问世时已经进入了 Retina 屏的时代，没考虑过在低 PPI 屏幕上的表现（不是4K屏缩放200%都别用）。</p>\n<p>第三，苹果设备的显示的西文字体是 <a href=\"https://zh.wikipedia.org/zh-hans/San_Francisco_(2014%E5%B9%B4%E7%9A%84%E5%AD%97%E4%BD%93)\">San Francisco</a>，不是苹方。在 <a href=\"https://lrd.im/blog/2022-01-17\">细数 Pingfang SC 的七宗罪</a> 中，也提到仅使用苹方导致不同设备字体 fallback 的不一致的问题。而作为系统字体里的其他问题，例如缺失本地化的字型，也是大部分字体所缺乏的，这已经不仅仅是一个字体问题，而是和字体相关的和 UI 技术标准化问题，难以仅通过字体解决。而无比例数字、冒号不垂直居中、没有垂直标点等细节，则都是因为苹果显示标点数字用的 SF 字体，苹方在此类字符上算是基本能用，但缺少多种场景下的细节。</p>\n<p>其他资源： <a href=\"https://www.figma.com/community/file/1089832205783108371\">Pingfang for windows - Figma</a></p>\n<p>另外，苹方是有版权限制，以下字体除了思源黑体，和大厂的开源黑体，均不可免费商用。</p>\n<h3>思源黑体系列</h3>\n<p>思源黑体(Noto sans) 是 google 的开源可商用字体，用于 Android 系统，在开源可商用的的黑体其质量无可替代。</p>\n<p>更纱黑体是思源黑体的衍生，修改了西文部分，相比思源黑体上更符合作为 无明显风格特征的系统字体，带 hinting 在 1080p 和 2.5k 下都能保证良好的清晰度。</p>\n<p>但是，思源黑体系列设计相比于国产的商用字体并不能算好，有时间架结构比较怪异，字形的细节不太统一，比如“用”字明显矮了一截，整理风格上给人一种不稳定感。同时也不是一个大气的字体，比如口字旁处理对于黑体而言偏小，“用”字矮了一些，但是在宋体设计上，“用”字矮的这一截反而让字体看起来平衡。而一个系列的字体衬线、非衬线的统一感来源于其比例，个人理解为思源/更纱系列是优先考虑宋体的字形，和黑体的比例有一定的结合。整体而言还是宋体的设计更加优秀。</p>\n<p>相对而言更纱黑体更适合作为系统字体，有着合理的 hinting。思源黑体是不太适合低 ppi 屏的，它的 Regular 字重看起来像 Bold。</p>\n<h3>方正兰亭系列（微软雅黑）</h3>\n<p>Noble Scarlet （社区版）常规体是新设计中宫收窄的微软雅黑，而粗体是方正兰亭黑 Pro，因此在加粗时，字体明显会变小一圈。</p>\n<p>微软雅黑系列字体在标点处理上很差，最直观的就是全角引号，太像半角的处理方式，很难看出前引号与后引号的区别。其实我在写这一篇文的时候，换了 Typora 的字体，才发现前后引号全打反了……</p>\n<p>方正兰亭黑 Pro 想对于两版微软雅黑都有着更小的中宫，字形设计中正。但也由于稍小了一些，在低 ppi 屏的小字上笔画更容易显得不太均匀，渲染效果不太好。另外使用此字体需要相比于其他所有字体更大的行距，因为其较小的中宫，字间距显得相对宽了。</p>\n<h3>汉仪旗黑系列</h3>\n<p>近年来的国产安卓厂商字体都是汉仪旗黑的衍生，代表阿里的普惠体、鸿蒙体、小米的字体、Oppo的字体。</p>\n<p>这系列字体间架结构合理，但笔画上更加激进，减弱了起笔与收笔的的传统突出，以追求几何感与现代的科技感。在观感上，这样规矩的方形会使得字体相比方正系列更加圆润，多了现代感但少了汉字的人情味，用于阅读小说时尤其明显。</p>\n<p>仅字形而言，作为 UI 是非常不错的。不过 Misans 渲染出来明显偏粗，我没有测试其他同系列字体是否也有这样的问题。</p>\n<h2>改掉 Windows 的默认中文无衬线字体</h2>\n<p>很多无法分别修改中英字体的 windows 原生应用，当只设置了英文字体时，显示的中文是新宋体（SimSun），比如 vs studio。原因在于系统里的 Microsoft Sans-serif 字体名，回落到的第一个字体就是新宋体……难以想象微软雅黑出了十多年了还有这样的问题。</p>\n<p>解决办法：</p>\n<ul>\n<li>winkey + R, 输入 regdit，进入 windows注册表</li>\n<li>进入 <code>HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\FontLink\\SystemLink</code></li>\n<li>把 Microsoft Sans Serif 的值中 SIMSUN.TTC 那一行去掉。这样默认的无衬线体就会往后 fallback 到系统的微软雅黑上。</li>\n</ul>\n<hr/>\n<p>创建于 2023-09-29 02:25:44</p>\n<p>更新于 2024-08-19 01:45:31</p>",
            "url": "https://sansui233.com/posts/2023-09-29-windows-system-chinese-fonts-adjustment",
            "title": "Windows 调整之中文字体",
            "summary": "让 windows11 字体更好看的一些设置与字体浅谈",
            "date_modified": "2024-08-01T18:08:00.000Z",
            "date_published": "2024-08-01T18:08:00.000Z",
            "tags": [
                "工具"
            ]
        },
        {
            "id": "https://sansui233.com/posts/windows-zsh-conf",
            "content_html": "<p>长久以来，遇到 bash 脚本会临时切 git-bash 中的 bash。由于用的语言都有自己的包管理器，倒也一直够用。但是最近涉及到一些 c++，由 git-bash 提供的最小化环境东西缺得太多，几乎不能当个日常 shell 用，也没有 pacman 包管理，最后决定还是单独安装 msys2。</p>\n<p>git-bash 和 msys2 同时安装不会冲突。msys2 是独立的 home 目录，而 git-bash 是与 windows 当前用户通用的。我本来想卸载 git-bash，但由于我现在还是用 powershell，最终发现 git-bash 不能卸载。一是 posh-git 只支持 git-bash 的 git；其次是，astro-nvim 中的一些插件需要 <code>git.exe</code> 在环境变量下，使用 alias 链接的 git 不行，而手动加环境变量会把 git 以外的程序也加进去，造成 msys2 的工具与 powershell 本身工具的冲突。</p>\n<p>想来想去，决定保留 git-bash 到最小化的状态，当成 powershell 的插件用。unix-like shell 以及相应的包管理还是 msys2。</p>\n<h2>安装 msys2</h2>\n<p>见 <a href=\"https://www.msys2.org/\">https://www.msys2.org/</a> 。安装过程没什么好说的，唯一要注意的在于安装目录的权限必须是当前用户可以完全控制，否则后续各种包的安装都会有一大堆问题。如果因为强迫症安装到 Program Files 下，则需要手动添加当前用户的权限。</p>\n<h3>软链接问题</h3>\n<p>windows 的软链接本来也是个很麻烦的问题。到 msys2 下，还多了一个软链接方式兼容问题。msys2 默认是 <code>ln -s</code> 是复制，要用 windows 风格的软链接，可以改安装目录下的各种 <code>.ini</code> 文件中的配置。</p>\n<pre><code>MSYS=&quot;winsymlinks:lnk&quot;\n</code></pre>\n<h2>zsh + zi</h2>\n<h3>zsh 的安装</h3>\n<pre><code class=\"hljs language-bash\">pacman -S zsh\n</code></pre>\n<p>老实说个人觉得和 linux 上的 zsh 相比还是差了一大截，用起来和 bash 感觉差不多。只是 zsh 插件管理的选择比较多</p>\n<h3>zi 的安装</h3>\n<p>关于 zsh 插件管理，之前在 git-bash 上我也安装了 oh-my-zsh，但是环境原因，遇到的 bug 着实太多，基本不用。另外，最大的问题是启动太慢，每次启动长达 10 秒。我分析了一下初始化脚本的执行时长，发现拖慢速度的罪魁祸首是初始化命令补全（就不能异步吗啊！）当然用 mac 时 omz 也有点慢，但显然没有 msys2 里这么离谱。</p>\n<p>下午吐槽这个事情后，Antarx 说他换 zi 了。我试了下，确实很快，从没超过3s，令人偷税。</p>\n<ul>\n<li>zi 的安装：<a href=\"https://wiki.zshell.dev/docs/getting_started/installation\">https://wiki.zshell.dev/docs/getting_started/installation</a></li>\n</ul>\n<p>安装过程最好在 msys2 的 GUI 终端下进行，因为需要登录的默认目录是在 home 的当前用户下。但这里又有另一个问题 —— msys2 不带 git。如果系统有另外安装 git，想复用，可以 cmd 启动 zsh，不指定启动的目录，指定继承环境变量。</p>\n<pre><code class=\"hljs language-cmd\">C:\\\\msys64\\\\msys2_shell.cmd -defterm -no-start -mingw64 -use-full-path -shell zsh\n</code></pre>\n<h3>zi 的配置与插件</h3>\n<p><a href=\"https://wiki.zshell.dev/docs/getting_started/installation\">安装Wiki</a> 在不断更新，检查最新版的安装方法。</p>\n<p>安装好后，<code>.zshrc</code> 里添加如下，写好重启 zsh 即可。</p>\n<pre><code class=\"hljs language-bash\">$ vi ~/.zshrc\r\n\r\n<span class=\"hljs-comment\"># zsh</span>\r\n<span class=\"hljs-built_in\">setopt</span> AUTO_PUSHD\r\n\r\n<span class=\"hljs-built_in\">export</span> CLICOLOR=1\r\n<span class=\"hljs-built_in\">export</span> LSCOLORS=ExGxFxdaCxDaDahbadeche\r\n<span class=\"hljs-built_in\">zstyle</span> <span class=\"hljs-string\">&#x27;:completion:*&#x27;</span> list-colors <span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">${(@s.:.)LS_COLORS}</span>&quot;</span>\r\n<span class=\"hljs-built_in\">alias</span> <span class=\"hljs-built_in\">ls</span>=<span class=\"hljs-string\">&#x27;ls --color=auto&#x27;</span>\r\n<span class=\"hljs-built_in\">alias</span> la=<span class=\"hljs-string\">&#x27;la --color=auto&#x27;</span>\r\n\r\n<span class=\"hljs-comment\"># zi</span>\r\n<span class=\"hljs-built_in\">typeset</span> -A ZI\r\nZI[BIN_DIR]=<span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">${HOME}</span>/.zi/bin&quot;</span>\r\n<span class=\"hljs-built_in\">source</span> <span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">${ZI[BIN_DIR]}</span>/zi.zsh&quot;</span>\r\n\r\n<span class=\"hljs-built_in\">autoload</span> -Uz _zi\r\n(( <span class=\"hljs-variable\">${+_comps}</span> )) &amp;&amp; _comps[zi]=_zi\r\n<span class=\"hljs-comment\"># source &lt;(curl -sL init.zshell.dev); zzinit</span>\r\n\r\n\r\n<span class=\"hljs-comment\"># 插件</span>\r\n<span class=\"hljs-comment\"># 提前运行一次 zi ice pick&quot;async.zsh&quot; src&quot;pure.zsh&quot;</span>\r\nzi light sindresorhus/pure \r\nzi light agkozak/zsh-z  <span class=\"hljs-comment\"># 不能用 eval &quot;$(zoxide init zsh)&quot; 会冲突</span>\r\nzi snippet OMZP::git\r\nzi light zsh-users/zsh-completions\r\n<span class=\"hljs-comment\"># 提前运行一次 zi ice wait lucid atload&#x27;_zsh_autosuggest_start&#x27;</span>\r\nzi light zsh-users/zsh-autosuggestions \r\n<span class=\"hljs-comment\"># 提前运行一次 zi ice wait lucid atinit=&#x27;zpcompinit&#x27;</span>\r\nzi light zdharma/fast-syntax-highlighting\r\n\r\n\n</code></pre>\n<h2>Windows Terminal 设置</h2>\n<p>在设置里改 json，加相应的 profile。可以使用 <code>-use-full-path</code> 继承 windows 系统的环境变量。</p>\n<pre><code class=\"hljs language-json\"><span class=\"hljs-punctuation\">{</span>\r\n    <span class=\"hljs-attr\">&quot;commandline&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;C:\\\\msys64\\\\msys2_shell.cmd -defterm -here -no-start -mingw64 -use-full-path -shell zsh&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-attr\">&quot;guid&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;{c420e0af-28d9-4742-a6b8-83d5fcf424e9}&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-attr\">&quot;icon&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;C:\\\\msys64\\\\mingw64.ico&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-attr\">&quot;name&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;msys2 zsh&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-attr\">&quot;startingDirectory&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;%USERPROFILE%&quot;</span>\r\n<span class=\"hljs-punctuation\">}</span>\n</code></pre>\n<h2>Vscode Terminal 设置</h2>\n<pre><code class=\"hljs language-json\"><span class=\"hljs-attr\">&quot;terminal.integrated.profiles.windows&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span>\r\n    <span class=\"hljs-attr\">&quot;MSYS2 zsh&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span>\r\n        <span class=\"hljs-attr\">&quot;path&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;C:\\\\msys64\\\\msys2_shell.cmd&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n        <span class=\"hljs-attr\">&quot;args&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span><span class=\"hljs-string\">&quot;-defterm&quot;</span><span class=\"hljs-punctuation\">,</span><span class=\"hljs-string\">&quot;-here&quot;</span><span class=\"hljs-punctuation\">,</span><span class=\"hljs-string\">&quot;-no-start&quot;</span><span class=\"hljs-punctuation\">,</span><span class=\"hljs-string\">&quot;-mingw64&quot;</span><span class=\"hljs-punctuation\">,</span><span class=\"hljs-string\">&quot;-use-full-path&quot;</span><span class=\"hljs-punctuation\">,</span><span class=\"hljs-string\">&quot;-shell&quot;</span><span class=\"hljs-punctuation\">,</span><span class=\"hljs-string\">&quot;zsh&quot;</span><span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">,</span>\r\n        <span class=\"hljs-attr\">&quot;env&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span> <span class=\"hljs-attr\">&quot;MSYSTEM&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;MINGW64&quot;</span> <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n        <span class=\"hljs-attr\">&quot;overrideName&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-literal\"><span class=\"hljs-keyword\">true</span></span>\r\n    <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n<span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\n</code></pre>\n<h2>Mintty 设置</h2>\n<p>Mintty 是 msys2 里默认的终端 GUI，默认 shell 是 bash。修改 <code>mingw64.ini</code> 为如下内容。</p>\n<pre><code>MSYS=winsymlinks:lnk\r\nMSYS2_PATH_TYPE=inherit\r\nMSYSTEM=MINGW64\r\nSHELL=/usr/bin/zsh\n</code></pre>\n<h2>npm设置</h2>\n<p>如果有使用 npm 进行包管理，继承自环境变量的 npm 补全时会报错。需要设置为</p>\n<pre><code class=\"hljs language-shell\"><span class=\"hljs-meta prompt_\">$ </span><span class=\"bash\">npm config edit</span>\r\nscript-shell=C:\\msys64\\usr\\bin\\bash.exe\r\nshell=C:\\msys64\\msys2\\usr\\bin\\bash.exe # 重要\r<span class=\"hljs-meta prompt_\">\n$ </span><span class=\"bash\">npm config list</span>\n</code></pre>\n<h2>conda 设置</h2>\n<p>如果有使用 conda 进行 python 开发，继承自环境变量的 conda 默认初始化脚本也有问题……从 Github 上查到的解决方法……</p>\n<pre><code class=\"hljs language-shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"bash\">&gt;&gt;&gt; conda initialize &gt;&gt;&gt;</span>\r<span class=\"hljs-meta prompt_\">\n# </span><span class=\"bash\">!! Contents within this block are managed by <span class=\"hljs-string\">&#x27;conda init&#x27;</span> !!</span>\r\nif [ -f &#x27;/c/Users/me/miniconda3/Scripts/conda.exe&#x27; ]; then\r\n    #eval &quot;$(&#x27;/c/Users/me/miniconda3/Scripts/conda.exe&#x27; &#x27;shell.zsh&#x27; &#x27;hook&#x27;)&quot;\r\n    eval &quot;$(&#x27;/c/Users/me/miniconda3/Scripts/conda.exe&#x27; &#x27;shell.zsh&#x27; &#x27;hook&#x27; | sed -e &#x27;s/&quot;$CONDA_EXE&quot; $_CE_M $_CE_CONDA &quot;$@&quot;/&quot;$CONDA_EXE&quot; $_CE_M $_CE_CONDA &quot;$@&quot; | tr -d \\x27\\\\r\\x27/g&#x27;)&quot;\r\nfi\r<span class=\"hljs-meta prompt_\">\n# </span><span class=\"bash\">&lt;&lt;&lt; <span class=\"hljs-string\">conda initialize &lt;&lt;&lt;</span></span>\n</code></pre>\n<h3>ssh配置共用</h3>\n<p>如果有多个 ssh 账户的密钥，最好是软链接一下配置目录。注意需要前面的修改软链接方式，否则还是去资源管理器手动软链接吧。</p>\n<pre><code class=\"hljs language-shell\">ln -s /c/Users/me/.ssh ~/.ssh\n</code></pre>\n<h2>参考</h2>\n<p><a href=\"https://hustlei.github.io/2018/11/msys2-for-win.html#%E5%AE%89%E8%A3%85git%E5%92%8Cvim\">msys2-for-win</a></p>\n<p><a href=\"https://sdl.moe/post/zsh-conf/\">https://sdl.moe/post/zsh-conf/</a></p>",
            "url": "https://sansui233.com/posts/windows-zsh-conf",
            "title": "Windows 命令行相关配置之 msys2+zsh+zi",
            "date_modified": "2024-03-15T20:35:00.000Z",
            "date_published": "2024-03-15T20:35:00.000Z",
            "tags": [
                "工具"
            ]
        },
        {
            "id": "https://sansui233.com/posts/2024-02-29_像素的一生",
            "content_html": "<link rel=\"preload\" as=\"image\" href=\"https://cdn.jsdelivr.net/gh/NamiLing/upic/picgo/202402292342847.webp\"/><link rel=\"preload\" as=\"image\" href=\"https://cdn.jsdelivr.net/gh/NamiLing/upic/picgo/202402292342848.webp\"/><link rel=\"preload\" as=\"image\" href=\"https://cdn.jsdelivr.net/gh/NamiLing/upic/picgo/202402292342849.webp\"/><link rel=\"preload\" as=\"image\" href=\"https://cdn.jsdelivr.net/gh/NamiLing/upic/picgo/202402292342850.webp\"/><link rel=\"preload\" as=\"image\" href=\"https://cdn.jsdelivr.net/gh/NamiLing/upic/picgo/202402292342851.webp\"/><link rel=\"preload\" as=\"image\" href=\"https://cdn.jsdelivr.net/gh/NamiLing/upic/picgo/202402292342852.webp\"/><link rel=\"preload\" as=\"image\" href=\"https://cdn.jsdelivr.net/gh/NamiLing/upic/picgo/202402292342853.webp\"/><link rel=\"preload\" as=\"image\" href=\"https://cdn.jsdelivr.net/gh/NamiLing/upic/picgo/202402292342854.webp\"/><link rel=\"preload\" as=\"image\" href=\"https://cdn.jsdelivr.net/gh/NamiLing/upic/picgo/202402292342856.webp\"/><link rel=\"preload\" as=\"image\" href=\"https://cdn.jsdelivr.net/gh/NamiLing/upic/picgo/202402292342857.webp\"/><link rel=\"preload\" as=\"image\" href=\"https://cdn.jsdelivr.net/gh/NamiLing/upic/picgo/202402292342858.webp\"/><link rel=\"preload\" as=\"image\" href=\"https://cdn.jsdelivr.net/gh/NamiLing/upic/picgo/202402292342859.webp\"/><link rel=\"preload\" as=\"image\" href=\"https://cdn.jsdelivr.net/gh/NamiLing/upic/picgo/202402292342860.webp\"/><link rel=\"preload\" as=\"image\" href=\"https://cdn.jsdelivr.net/gh/NamiLing/upic/picgo/202402292342861.webp\"/><link rel=\"preload\" as=\"image\" href=\"https://cdn.jsdelivr.net/gh/NamiLing/upic/picgo/202402292342862.webp\"/><link rel=\"preload\" as=\"image\" href=\"https://cdn.jsdelivr.net/gh/NamiLing/upic/picgo/202402292342863.webp\"/><link rel=\"preload\" as=\"image\" href=\"https://cdn.jsdelivr.net/gh/NamiLing/upic/picgo/202402292342864.webp\"/><p>内容来自于 2018 年谷歌的一个视频。原视频不长但内容很多，非常值得一看。Chrome 的渲染机制是在不断变化的。</p>\n<p>笔记原存于 Logseq，如果有类似于，“见CSS/图层”一类的语句，为笔记内超链接。相关概念需自行了解。</p>\n<p>📚 <strong>资料</strong></p>\n<ul>\n<li>\n<p><a href=\"https://www.bilibili.com/video/av35265997/?vd_source=a94b8ba67535fb1431364b8c5fac341d\">b站视频 - 2018</a></p>\n</li>\n<li>\n<p><a href=\"https://docs.google.com/presentation/d/1boPxbgNrTU0ddsc144rcXayGA_WF53k96imRH8Mp34Y/edit?pli=1\">英文slides</a></p>\n</li>\n<li>\n<p><a href=\"https://segmentfault.com/a/1190000020102554\">思否文章</a></p>\n</li>\n</ul>\n<p><strong>渲染流程</strong>：web content → magic(rendering) → pixels</p>\n<h2>1. Web content</h2>\n<p>最常见的 HTML + CSS + Javascript API</p>\n<p>还有图片、视频、音频、web assembly、WebGL、Canvas、PDF等等</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/NamiLing/upic/picgo/202402292342847.webp\" alt=\"Web Content\"/></p>\n<h2>2. 渲染</h2>\n<p>渲染是在一个 sandbox 进行的。渲染引擎 Blink 是渲染代码的一个子集。</p>\n<p>操作系统渲染 API：OpenGL，DirectX(Windows), vulkan。包含 textures shaders 等等。</p>\n<h3>2.1 渲染目标</h3>\n<ol>\n<li>\n<p>把 web content 渲染为 openGL 的调用</p>\n</li>\n<li>\n<p>为更新渲染建立起对应的数据结构</p>\n</li>\n</ol>\n<h3>2.2 基本渲染流程</h3>\n<p><img src=\"https://cdn.jsdelivr.net/gh/NamiLing/upic/picgo/202402292342848.webp\" alt=\"渲染流程\"/></p>\n<p>渲染流程太复杂，会被分为几个阶段进行数据结构的转换</p>\n<p>不是每一次更新渲染，都要走全部的流程。相关看 浏览器/渲染原理 中的回流与重绘。</p>\n<h4>HTML to DOM</h4>\n<p>解析 HTML 为 DOM 树。DOM树的作用有两个，一个表示文档结构，二是暴露 API 给 Javascript，由 V8 JS引擎进行 API 绑定。</p>\n<h4>CSS to ComputedStyle</h4>\n<p>CSS 转换为 StyleRule 集，每个 StyleRule 包含 CSSSelector 和 CSSPropertyValue。流程如图</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/NamiLing/upic/picgo/202402292342849.webp\" alt=\"css parser\"/></p>\n<p>根据 css 样式规则，计算出每个 DOM 元素样式属性的最终值，存储于 <strong>ComputedStyle</strong> 对象模型中，是一个 style properties 与 values 的超大映射。这个过程被称为 Style Resolution。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/NamiLing/upic/picgo/202402292342850.webp\" alt=\"style resolution\"/></p>\n<p><strong>ComputedStyle</strong> 对象已经暴露给了 JS。使用<code>getComputedStyle(element)[&#x27;padding-top&#x27;]</code>即可获取。在 Dev tools 的 Elements 中的 Computed 选项卡的值就是依据此 对象来的。</p>\n<h4>Layout Stage</h4>\n<p>例子：</p>\n<ul>\n<li>Web 最基础的 Block Flow 布局，需要计算出 Block 的 x、y、width、height。</li>\n<li>由于 Block 自适应高度，需要根据内容的尺寸，找到文字换行的地方，以计算每个 Block  的高度。</li>\n<li>每一个 Block 的矩形有多种边界（在CSS/盒模型中说得很清楚）。内容 overflow 时，需要计算两个矩形，一个是<strong>实际内容区域</strong>，一个是<strong>能显示出的内容的区域</strong>。如果内容可滚动，还要计算<strong>滚动边界</strong>和<strong>滚动条边界</strong>。</li>\n</ul>\n<p>Document 的根节点本身就是 overflow 且可滚动的。</p>\n<p>Layout Objects 也树结构存在，几乎与 DOM 是一对一，但并非总是如此。比如伪元素、浮动元素。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/NamiLing/upic/picgo/202402292342851.webp\" alt=\"layout\"/></p>\n<p>在 style 计算后会构建一个没有填入任何数据的 <strong>Layout Tree</strong>。</p>\n<p><strong>更新布局</strong>的本质就是遍历 layout tree 并向里面填充所有数据。</p>\n<p>Slides里说目前没有把 Layout Stage 的输入输出区分开，但没细说，只是说下个版本会改。放个图</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/NamiLing/upic/picgo/202402292342852.webp\" alt=\"Layout Stage NG\"/></p>\n<h4>Paint to display item lists</h4>\n<p>做类似于在指定坐标内画一个红色的矩形这样的动作。代码结构上 ，是 LayoutObject 有一个 Paint 方法。去调用更底层的 Paint  API。</p>\n<p><strong>此阶段生成“作画步骤”，还没有真的画出像素</strong>。步骤是可以重放的。至于为什么这样做，之后再说（然而之后并没有说）。</p>\n<p>Paint 是从 z-index 最大到最小进行的，而不是 DOM 的前后顺序。而两个并列的层叠上下文时，后覆盖前。在一个 CSS/层叠上下文 内，按层叠上下文的堆叠规则绘制（z轴的层叠规则），如图</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/NamiLing/upic/picgo/202402292342853.webp\" alt=\"image.png\"/></p>\n<h4>Rasterization 栅格化</h4>\n<p>将 Display Item（位于 CC Layer 中，之后说）中记录的 Paint 操作转化为<strong>位图</strong>(bitmap)。</p>\n<p>raster bitmap 通常保存于 GPU 内存中，被 <strong>OpenGL Texture Object</strong> 引用。GPU 不仅可以保存 bitmap，也可以生成 bitmap。叫 <strong>accelerated rasterization</strong>。</p>\n<p><strong>此时像素纹理已经生成到内存，但还是没有画到屏幕上。</strong></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/NamiLing/upic/picgo/202402292342854.webp\" alt=\"Rasterization\"/></p>\n<p>栅格化通过 <strong>SKIA 库</strong>生成对 <strong>OpenGL</strong> 的调用。SKIA 提供了一系列对硬件的抽象。具体而言，PaintOps 会调用 SKIA 中的 SkCanvas 对象。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/NamiLing/upic/picgo/202402292342856.webp\" alt=\"SKIA\"/></p>\n<p>由于渲染过程是在 sandbox 进行的， 不能产生系统调用，OpenGL 调用是通过 command buffer 塞进另一个进程 <strong>GPU Process</strong> 执行的。GPU Process 接受到绘制命令后通过 GL API 去产生真正的 GL 调用。</p>\n<p>使用 GPU process 隔离渲染进程除了渲染进程有沙盒机制外，OpenGL 可能也不太稳定或者是有漏洞。GPU Process 可以做一些保护措施。</p>\n<p>GL API 来源于系统动态库 <code>libGLESv2.so</code>。但是 windows 中来自于 Google 的 ANGLE 库 <code>libglesv2.dll</code>，因为 Windows 上渲染不是用的 OpenGL，而是 DirectX API。ANGLE 库可以翻译 OpenGL 调用为 DirectX 调用。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/NamiLing/upic/picgo/202402292342857.webp\" alt=\"GL API\"/></p>\n<h2>3. 图层合成</h2>\n<h3>3.1 帧与动画</h3>\n<p>每一帧是当前 Web 内容的完整呈现。</p>\n<p>动画是连续的帧。针对第一部分提到的 style、layout、paint、raster，浏览器都做了跟踪失效的处理，只重绘改变的部分，其他部分复用。</p>\n<h3>3.2 合成线程</h3>\n<p>一个单独的渲染线程，减少 JS 主线程的其他操作和渲染之间 block。</p>\n<p><strong>图层</strong>给合成线程渲染。比如 video 和 gif 在单独的图层，还有 transform3D, will-change 等 css 属性也会新建图层进行处理。</p>\n<p>合成线程也需要处理交互。能处理的先合成线程处理（比如滚动），处理不了的就进主线程。</p>\n<p><strong>Layer Tree</strong>（CC Layer Tree）</p>\n<p>图层也是以树结构存在，前序遍历。</p>\n<p>有的图层的存在不是绘制，而是图层效果，比如剪贴蒙版、滤镜。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/NamiLing/upic/picgo/202402292342858.webp\" alt=\"layer tree\"/></p>\n<p>图层的合成位于 CC (Chronium compositor) namspace, 所以代码里有很多 <code>cc::layer</code>。</p>\n<p>如果一个 Layout Object 没有指定单独的 layer(比如没有 will-change 属性)，就会被绘制到父 layer 的图层。</p>\n<p>Paint Layer 是要被分到 CC LayerTree 的。这就是CSS/层叠上下文与CSS/图层之间的关系。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/NamiLing/upic/picgo/202402292342859.webp\" alt=\"image.png\"/></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/NamiLing/upic/picgo/202402292342860.webp\" alt=\"paint layer map\"/></p>\n<h3>3.3 compositioning update</h3>\n<p>在上一章的流程中，没有讲到合成这步，实际要加上。因为合成不是必须的，但合成步骤能优化渲染。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/NamiLing/upic/picgo/202402292342861.webp\" alt=\"更新合成\"/></p>\n<p>未来，创建图层的工作会放到 paint 之后（slimming paint）</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/NamiLing/upic/picgo/202402292342862.webp\" alt=\"commit\"/></p>\n<p><strong>commit</strong></p>\n<p>提交一次合成。这里合成线程与主线程都存在 layer tree，需要同步合成线程与主线程的状态。</p>\n<h3>3.4 Tilling</h3>\n<p>在 rastering 阶段，把 CC layer 分块成 tile。</p>\n<p><strong>tile 是 raster 的最小单位</strong>，在专门的 <strong>raster 线程</strong> 进行栅格化。</p>\n<p>合成线程有一个 <strong>tile manager</strong> 安排 tile 优先级。</p>\n<p>不同分辨率的 tile 策略是不同的。</p>\n<h3>3.5 Drawing</h3>\n<p>不同 tile 合成为 <strong>Quad</strong>。Quad 引用内存中的 raster output，封装在合成进程中，再提交到浏览器进程。浏览器动画帧的<strong>帧</strong>概念就是 Quad。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/NamiLing/upic/picgo/202402292342863.webp\" alt=\"Quad\"/></p>\n<p>不同 commit 有先后顺序，需要从 pending <strong>激活</strong>再绘制。</p>\n<h3>3.6 Display</h3>\n<p>浏览器进程将 Quad 展示到屏幕上的过程。位于 Viz 组件中，调用 OpenGL 绘制 GPU 进程中的 Quad 资源，和 rastering 的 GL call 一样。</p>\n<p>大部分平台的显示合成输出是双倍缓冲（有过游戏画面撕裂经验的应该对这有概念），quad 是在后台缓冲器（GPU的还是Viz？）中绘制的，用 swap 命令让后台的 quad 到前台展示。</p>\n<h2>4. 总结</h2>\n<p>Blink 引擎严格执行了主线程的步骤。但由于要实现 Web 平台化，是有一些合成线程的权限的。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/NamiLing/upic/picgo/202402292342864.webp\" alt=\"总结\"/></p>\n<h2>其他</h2>\n<p>渲染器和浏览器都用到了 GPU，都有向GPU进程的IPC通道。</p>\n<p>如果想让滚动的交互产生的动画不在主线程而在合成线程执行，需要强制 will-transform 分层</p>",
            "url": "https://sansui233.com/posts/2024-02-29_像素的一生",
            "title": "笔记 - 像素的一生",
            "summary": "浏览器渲染原理",
            "date_modified": "2024-02-29T23:45:00.000Z",
            "date_published": "2024-02-29T23:45:00.000Z",
            "tags": [
                "学习"
            ]
        },
        {
            "id": "https://sansui233.com/posts/白嫖怪的经验",
            "content_html": "<p>作为一个合格的白嫖怪，列举一些个人用过的免费/低价云服务。</p>\n<blockquote>\n<p>注：不要滥用，白嫖在很多时候都是违反 TOS（服务条款）的。</p>\n</blockquote>\n<p>依据项目结构，主要分类为：</p>\n<ol>\n<li>免费域名购买</li>\n<li>静态前端托管</li>\n<li>api 服务托管</li>\n<li>数据库服务托管</li>\n<li>服务器购买</li>\n<li>GPU 平台（AI）</li>\n</ol>\n<h2>域名相关</h2>\n<p>由于国内存在对热门国外服务 ban 域名的情况，先持有个人域名是有必要的。有免费的，付费域名也不贵。但要注意国内域名要走备案，而备案又要求买国内的服务器，这不符合白嫖的认知。所以域名只看国外。</p>\n<h3><a href=\"https://www.freenom.com/\">Freenom</a></h3>\n<p>可注册免费域名。1 个域名免费 1 年，续费要钱，1 年后想继续免费需要注册新域名。不适合长期持有。通常用于一些不想被人发现的临时服务。</p>\n<h3><a href=\"https://www.namecheap.com/\">Namecheap</a></h3>\n<p>6 位纯数字 + xyz 域名，一年只要 1 刀，个人开发值得拥有。只要不抢热门，域名普遍不贵。</p>\n<h3><a href=\"https://cloudflare.com/\">Cloudflare</a></h3>\n<p>著名的慈善 CDN 机构（不是）。在 CF 买域名要钱，但可以转入域名，并进行免费 DNS 解析，免费的防火墙和访问控制，免费的数据统计，免费的 SSL……</p>\n<p>我个人非常喜欢 CF 的 dashboard，很直接。对域名进行管理，从输入网址开始只需要点三步，登录（切页面）=&gt; 选域名 =&gt; 选功能，全程只切了两个页面。</p>\n<p>对比一下阿里云。点登录按钮（切页面）=&gt; 登录（切页面）=&gt; 点控制台（切页面）=&gt; 选域名控制台 =&gt; 选域名列表 =&gt; 选管理（切页面）。</p>\n<h2>静态资源托管</h2>\n<h3><a href=\"https://github.com\">Github pages</a></h3>\n<p>静态网页托管。hexo + github pages。静态博客，经典搭配，原汁原味。</p>\n<p>不过被墙得厉害，即使没有墙，域名也被国内浏览器屏蔽。</p>\n<h3><a href=\"https://www.jsdelivr.com/\">Jsdelivr</a></h3>\n<p>静态资源托管。Github 的加速网站。很多人拿来当图床。也容易被屏蔽。相当于把 github 当 cms 用，所以管理文件没有那么好用。</p>\n<p>如果是目的不是用于开发，是明确违反了 TOS 的，只是量小的话没有人管罢了。Github 本身也不是拿来存二进制的。</p>\n<h3><a href=\"https://vercel.com/\">Vercel</a></h3>\n<p>静态网页托管（其实可以不静态）。特点是国内 ping 值低，自动绑免费的 SSL。不过有一段时间 vercel 的 ip 也是被墙了的。所有没有在国内备案的服务都不保证直连的可访问性，特别是在量比较大的情况下。</p>\n<h3>Cloudflare pages</h3>\n<p>静态前端页面部署，类似 Vercel，优点大概是比 vercel 更难被墙。</p>\n<h2>网盘，OSS</h2>\n<p>嗯……网盘的资源，怎么能不算资源呢？</p>\n<p>不过，要获取网盘资源的直链，至少要经过两层的 API，延迟相当高。而且国内的服务防滥用机制相当严格（国内带宽贵啊）</p>\n<p>但有一个好处……现在网盘普遍在卷内容管理系统 (CMS)，面向用户的产品，管理文件比 OSS 好用。主要稳定性在 API 上。</p>\n<h3><a href=\"https://alist.nn.ci/\">Alist</a> 网盘列表程序</h3>\n<p>文档必看，这是一个集合了阿里云盘、百度网盘、Onedrive 等的网盘列表程序，利用各个网盘的 API，对各个网盘资源直接下载。看文档直接了解有什么服务可以白嫖，可以白嫖到什么程度。我在这照抄一下常用的不走服务器流量时的网盘：</p>\n<ol>\n<li>百度网盘：可直接下载 20M 以内的文件，限速。</li>\n<li>阿里云盘：可下载所有文件，分享的链接限速，自己的网盘不限速。</li>\n<li>Onedrive：可下载所有文件，不限速，但在国外。有 API 调用上限。</li>\n</ol>\n<p>当然，Alist 本身还是要有服务器的，但还有 paas 可以白嫖。</p>\n<h3><a href=\"https://www.backblaze.com/cloud-backup/personal\">BackBlaze</a></h3>\n<p>对象存储，有一定的免费额度，cloudflare CDN 下行流量免费，可以说是个人白嫖图床最优选吧。知道这个是因为 rclone。</p>\n<h2>API 托管</h2>\n<p>主要列举 PaaS 平台。</p>\n<h3><a href=\"https://vercel.com/\">Vercel</a></h3>\n<p>没错又是 Vercel。Vercel 还可以托管 Node.js 和 Python 脚本等等，拿来托管小的 API 服务是非常适合的。比如 <a href=\"https://waline.js.org/\">Waline</a>。</p>\n<blockquote>\n<p>支持的语言：nodejs、php、python、ruby、go</p>\n</blockquote>\n<p>纯读取的 API 只用 Vercel 就可以了。如果需要上传下载动态内容，使用 Vercel + 任意数据库就可以，大部分网页应用的本质就是 CRUD。</p>\n<p>Vercel 的免费版 <a href=\"https://vercel.com/docs/limits/overview\">有限制</a>，对于个人站点来讲绰绰有余的限制。付费不便宜。</p>\n<h3><a href=\"https://fly.io/\">Fly.io</a></h3>\n<p>有很小的免费额度。曾经用过，长期无访问会休眠。休眠不删数据。</p>\n<h3>Heroku</h3>\n<p>曾经白嫖界的王者，现在没有免费的实例了，只有 Github 学生包还有免费。会休眠，据说现在会删数据。</p>\n<h3>国内平台边缘计算</h3>\n<p>阿里云函数计算，腾讯云函数计算，都不是很贵。用边缘函数当服务主要是麻烦在不同平台的适配上。还有，国内走公网流量计费，也不适合大带宽的服务。</p>\n<h2>数据库，BaaS</h2>\n<p>BaaS 这里主要是指是数据库加上部分的后端服务，比如以 restful api 的方式访问数据库，而不是对数据库服务建立连接后写 sql。Headless CMS 也是一种 BaaS。</p>\n<ol>\n<li><a href=\"https://leancloud.cn/pricing/\">LeanCloud</a> 开发版有一点免费额度。</li>\n<li><a href=\"https://supabase.com/pricing\">Supabase</a> 有 10G 免费额度。实例需要每周至少一触发，目前在用。知道的人不多，国内的薅羊毛大军没有进发到这。</li>\n<li><a href=\"https://firebase.google.cn/pricing?hl=zh-cn\">Firabase</a> 有一点点免费额度。</li>\n</ol>\n<p>总体用得不多，可以看文章结尾的参考。</p>\n<h2>低价服务器</h2>\n<p>常逛 hostloc 会知道几个被大量滥用、不保证在线率、随时可能跑路的商家。主打一个买了买不了吃亏，买了买不了上当。个人用来做实验倒是挺适合吧，多买几个，白嫖一个靠谱的 API 重定向做一下负载均衡还算也 OK。</p>\n<ol>\n<li><a href=\"https://www.racknerd.com/\">racknerd</a> 12 刀 1 年的小服务器，普遍 DC 02 机房三网直连。</li>\n<li><a href=\"https://virmach.com\">virmach</a> 价格同上。有日本的机房，速度啥的挺好的。我是第一批迁过去的，传家宝系列，至今 10 刀一年。但发生过严重宕机，unavailable 了两天。</li>\n<li><a href=\"https://greencloudvps.com/\">greencloud</a> 没用过，有一年独服很便宜倒是，记得一年才 22 刀。好像日本和 virmach 是一个机房，和 virmach 一起宕机。</li>\n</ol>\n<h2>AI 服务</h2>\n<ol>\n<li><a href=\"http://colab.google\">Colab</a> github 很多项目在这白嫖 demo，跑跑小项目用可以，实例不保存环境，大模型启动很慢。可以充钱，充钱后可能抽到 A100（我抽到过 233）</li>\n<li><a href=\"https://www.autodl.com/\">autodl</a> 收费但便宜，分钟级动态租用，环境给得非常方便，接入国内网盘符合国内环境，有时候要抢实例。</li>\n<li><a href=\"https://huggingface.co/\">huggingface</a> 有免费的 cpu space，充钱用 gpu。</li>\n<li><a href=\"https://www.kaggle.com/\">Kaggle</a> 有一点免费的 gpu 时间，体验用。</li>\n</ol>\n<h2>参考</h2>\n<ol>\n<li><a href=\"https://gist.github.com/imba-tjd/d73258f0817255dbe77d64d40d985e76\">☁️ 一些免费的云资源</a></li>\n<li><a href=\"https://blog.lv5.moe/p/website-hosting-and-function-computing-service-selection\">Cloudflare or Vercel——网站托管与函数计算服务选择</a></li>\n<li><a href=\"https://github.com/tzhangchi/awesome-free-saas\">tzhangchi/awesome-free-saas: an awesome list of free SaaS (software as a service) for you.</a></li>\n<li><a href=\"https://ldo.one/post/backblaze-yes/\">愉快的白嫖 Backblaze 的 10G 对象存储 - Hub | ldo.one</a></li>\n</ol>\n<hr/>\n<p>发现我的语言完全丧失了中文原有的简洁性，Sad。</p>",
            "url": "https://sansui233.com/posts/白嫖怪的经验",
            "title": "白嫖怪的经验",
            "summary": "降本增效？嗯？",
            "date_modified": "2023-12-29T22:09:00.000Z",
            "date_published": "2023-12-29T22:09:00.000Z",
            "tags": [
                "乱七八糟的分享"
            ]
        }
    ]
}