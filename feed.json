{
    "version": "https://jsonfeed.org/version/1",
    "title": "Sansui's blog",
    "home_page_url": "https://sansui233.com",
    "feed_url": "https://sansui233.com/feed.json",
    "description": "记录学习和生活的个人博客",
    "author": {
        "name": "Sansui",
        "url": "https://sansui233.com/about.ico"
    },
    "items": [
        {
            "id": "https://sansui233.com/posts/2025-07-24-embed-python-with-uv",
            "content_html": "<link rel=\"preload\" as=\"image\" href=\"https://img-cf.sansui233.com/imgs/2025/07/202507242029977.webp\"/><h2>conda 的问题</h2>\n<p>Python 新项目使用 uv 管理容易，但是总是有一些老项目不用。 conda 包管理一直以来都是 AI 的标配。我用 python 99% 都是在扒别人代码运行。这就导致了我运行了多少个项目，就装了多少份 torch……硬盘再大也经不起十几次折腾。</p>\n<p><img src=\"https://img-cf.sansui233.com/imgs/2025/07/202507242029977.webp\" alt=\"沐神都解决不了的\"/></p>\n<p>conda 的问题在于</p>\n<ol>\n<li>requirements.txt <strong>全手写</strong>！很多人可能忘更新配置，导致扒拉下来缺库运行不了，先解决一个小时的依赖问题再说。</li>\n<li>依赖和安装顺序强相关。比如项目需要更新的 numpy，但你可能要装个别的项目的库，python 发了论文和仓库就跑的项目是很多的。安装一个旧项目导致之前安装 numpy 被卸载，然后整个项目就垮掉。这种情况相当之多，又解决两个小时的依赖问题。</li>\n<li>（至少我不愿意看到）电脑里十几个相同版本的 torch 和 cuda。当时的硬盘还只有 256G，多装几个 torch 无法接受，嗯……</li>\n</ol>\n<p>直到现在都还是这样的，大家主打一个能跑完实验就行。包的更新是激进的，包管理是落后的。在几年前有人说用 PDM，后面有 poetry。这两是不用再手写 <code>requirements.txt</code> 了，依赖也会自动 resolve 不会覆盖来覆盖去的，但还是会装十几个 torch。直到 uv 开始用硬链接进行包管理。</p>\n<h2>uv 之于 conda 项目</h2>\n<p>uv 接管 python 界的依赖管理按理说已经没什么问题。但实际情况是，很多项目还是在用 conda。除非哪天 torch 和 HF 都把 uv 设置为首推，否则就得一直与  conda 存在的问题战斗。</p>\n<h3>1. 不提供 venv 的项目</h3>\n<p>用于研究的项目一般都是不提供的打包好的环境的，主要是太大了，每个人设备情况也不一样。所以下载后第一件事是</p>\n<pre><code class=\"hljs language-sh\">uv venv\r\n./.venv/Script/activate\n</code></pre>\n<p>如果这个项目不再更新了，或者是打算迁移到 uv，可以直接使用 uv 的方式管理依赖。uv 会自动维护 <code>pyproject.toml</code> 和 <code>uv.lock</code> 文件。</p>\n<pre><code>uv add -r requirements.in -c requirements.txt\n</code></pre>\n<p>如果这个项目，他还在更新，你时不时就得去拉一下分支。这时候最好用 <code>uv pip</code> 。至于依赖混乱问题，听天由命吧。<del>跑得起来就得了</del></p>\n<pre><code>uv pip install -r requirement.txt\n</code></pre>\n<h3>2. 提供 venv 的项目</h3>\n<p>提供 venv 的项目通常是给人用的，b 站的整合包一大堆。这种已经配好环境的项目也意味着你最好只用 pip。通常还是非常原始地调用 pip</p>\n<pre><code>./.venv/python -m pip install xxx\n</code></pre>\n<p>……等于说又开始了安装十几份 torch 的依赖管理模式。用 uv 是可以重复利用缓存的。这个时候 uv 的问题在于无法接管 python 环境，需要设置一下环境变量：</p>\n<pre><code class=\"hljs language-sh\"><span class=\"hljs-built_in\">export</span> UV_PYTHON=<span class=\"hljs-string\">&quot;./.venv/python&quot;</span>\r\nuv pip list\n</code></pre>\n<p>然后就可以利用 uv 的缓存了。</p>\n<p>当然，依赖混乱问题使用 <code>uv pip</code> 是无法避免的。这对于发行版也是一种麻烦。因为发行版的环境全给你配好了，但有的项目设计了插件系统，插件系统又需要装插件的 requirement.txt，安一个许久没更新的插件让主项目废掉的情况也不是不可能……</p>\n<p>如果让插件作者指定的兼容版本？只靠规范做不到，必须像MC那样检查版本号，不更新版本号就不放行。这样就算不更新代码了，也得倒逼作者每个版本都进行一次（至少是与主项目的）依赖兼容性测试。</p>\n<p>我觉得以当前 python 的运行方式，不 lock 子依赖的版本，这个问题是没法解决的。</p>\n<h2>uv 管理 torch 下载源</h2>\n<p>通常而言，在不指定 index 时 uv add torch 是去 pypi 或清华镜像源找 CPU 版本。如果打算每个项目都采用一样的 torch 版本 和 cuda ——</p>\n<h3>uv 创建的新项目</h3>\n<p>共用的 <code>uv.toml</code> 指定下载源。</p>\n<p>Linux 在 <code>.config/uv/</code> 下，Windows 在 <code>%APPDATA%/uv/</code> 下。</p>\n<pre><code class=\"hljs language-toml\"><span class=\"hljs-section\">[[index]]</span>\r\n<span class=\"hljs-attr\">url</span> = <span class=\"hljs-string\">&quot;https://mirrors.tuna.tsinghua.edu.cn/pypi/web/simple/&quot;</span>\r\n<span class=\"hljs-attr\">default</span> = <span class=\"hljs-literal\">true</span>\r\n<span class=\"hljs-section\">[[index]]</span>\r\n<span class=\"hljs-attr\">name</span> = <span class=\"hljs-string\">&quot;pytorch-cu128&quot;</span>\r\n<span class=\"hljs-attr\">url</span> = <span class=\"hljs-string\">&quot;https://download.pytorch.org/whl/cu128&quot;</span>\r\n<span class=\"hljs-attr\">explicit</span> = <span class=\"hljs-literal\">true</span>\n</code></pre>\n<p>项目级别的 <code>pyproject.toml</code></p>\n<pre><code class=\"hljs language-toml\"><span class=\"hljs-attr\">dependencies</span> = [\r\n  <span class=\"hljs-string\">&quot;torch==2.7.1&quot;</span>,\r\n  <span class=\"hljs-string\">&quot;torchvision==0.22.1&quot;</span>,\r\n  <span class=\"hljs-string\">&quot;torchaudio==2.7.1&quot;</span>,\r\n]\r\n\r\n<span class=\"hljs-section\">[tool.uv.sources]</span>\r\n<span class=\"hljs-attr\">torch</span> = [\r\n  { index = <span class=\"hljs-string\">&quot;pytorch-cu128&quot;</span>},\r\n]\r\n<span class=\"hljs-attr\">torchvision</span> = [\r\n  { index = <span class=\"hljs-string\">&quot;pytorch-cu128&quot;</span>},\r\n]\r\n<span class=\"hljs-attr\">torchaudio</span> = [\r\n  { index = <span class=\"hljs-string\">&quot;pytorch-cu128&quot;</span>},\r\n]\n</code></pre>\n<p>然后执行 <code>uv sync</code> 安装。</p>\n<h3>uv pip 管理老项目</h3>\n<p>直接指定命令行 的 <code>--index-url</code></p>\n<pre><code class=\"hljs language-shell\">uv pip install torch==2.5.1 torchvision==0.20.1 torchaudio==2.5.1 --index-url https://download.pytorch.org/whl/cu124\n</code></pre>\n<p>和用 pip 的方式差不多，区别是会硬链接到集中的缓存，不会重复占用十几份 torch。当然。该有的依赖冲突还是会有的。<del>关键是装好后就不要更新了</del></p>",
            "url": "https://sansui233.com/posts/2025-07-24-embed-python-with-uv",
            "title": "uv 管理 conda 项目依赖",
            "summary": "沐神都解决不了的……",
            "date_modified": "2025-07-24T20:12:00.000Z",
            "date_published": "2025-07-24T20:12:00.000Z",
            "tags": [
                "学习"
            ]
        },
        {
            "id": "https://sansui233.com/posts/2025-07-12-compare-css-solutions",
            "content_html": "<p>css 的写法一直算比较混乱的。层叠的样式表与 DOM 结构的分离看似清晰，但也因此容易产生屎山，组合太自由，哪些选择器用了哪些选择器没用，共用的嵌套的，分离的。今天小编就带你一探究竟（……）</p>\n<h2>CSS类复用粒度</h2>\n<p>我自己把 css 选择器（类）的复用粒度分三个层级。</p>\n<h3>组件类</h3>\n<p>粒度最大的层级，通常按组件级别语义化。选择器一般是下面这些名字</p>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-selector-class\">.wrapper</span>\r\n<span class=\"hljs-selector-class\">.container</span>\r\n<span class=\"hljs-selector-class\">.list-item</span>\n</code></pre>\n<p>组件化的选择器下面通常有很多条的 css。</p>\n<h3>功能类</h3>\n<p>通常是共用的样式或状态，比如</p>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-selector-class\">.open</span>\r\n<span class=\"hljs-selector-class\">.close</span>\r\n<span class=\"hljs-selector-class\">.light</span>\r\n<span class=\"hljs-selector-class\">.dark</span>\r\n<span class=\"hljs-selector-class\">.glass-effect</span>\n</code></pre>\n<p>这个看起来好像和组件类不冲突，但硬说的话组件类其实应该是这样</p>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-selector-class\">.container</span><span class=\"hljs-selector-class\">.open</span> { 此处将 <span class=\"hljs-selector-class\">.open</span> 的所有样式全覆盖 }\r\n<span class=\"hljs-selector-class\">.container</span><span class=\"hljs-selector-class\">.close</span> { 此处将 <span class=\"hljs-selector-class\">.close</span> 的所有样式全覆盖 }\r\n<span class=\"hljs-selector-class\">.container</span><span class=\"hljs-selector-class\">.light</span> { 此处将 <span class=\"hljs-selector-class\">.light</span> 的所有样式全覆盖 }\r\n<span class=\"hljs-selector-class\">.container</span><span class=\"hljs-selector-class\">.dark</span> { 此处将 <span class=\"hljs-selector-class\">.dark</span> 的所有样式全覆盖 }\n</code></pre>\n<p>组件类的状态严格在组件的 scope 下。功能类则是可以不限 Scope 的复用。</p>\n<p>这 CSS 容易混乱的根源。在工程维护角度，功能类是最不敢乱动的类，不知道动了后哪里样式就会出问题。但在设计角度，用功能类复用一些状态又确实很方便，统一设计也好用。比如增加统一的圆角、描边、阴影样式。</p>\n<p>功能类的优缺点是一体两面——图像的只有主观的好看与否，没有客观的对错。</p>\n<h3>原子类</h3>\n<p>定义海量常用的基础样式类，在 class 上直接写类名就能获得对应效果。就是 tailwind css。</p>\n<p>原子类相较于功能类粒度更小，也不会轻易改动 css 属性。</p>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-selector-class\">.flex</span>\r\n<span class=\"hljs-selector-class\">.col-1</span>\r\n<span class=\"hljs-selector-class\">.text-sm</span>\n</code></pre>\n<h2>方案</h2>\n<p>通常来说，一个库的样式会着重在一个某一个粒度上。</p>\n<h3>原生 css</h3>\n<p>用原生 css 时通常会以 <strong>组件化</strong> 的粒度为主，带极少的功能类。现在配合 css 变量使用。早期的网页简单，一个 CSS 文件就能搞定全站，设计上并没有考虑项目变得越来越复杂后的实践。</p>\n<p><strong>优点</strong>：性能好，扁平的结构利好小项目。适合写研究新样式。</p>\n<p><strong>缺点</strong>：过于扁平，大量工程化后易屎山，存在样式与 DOM 分离带来的维护混乱。</p>\n<h3>SCSS</h3>\n<p>古法预处理器，可能多层嵌套 css，可组合。是 <strong>组件化</strong> 的粒度。在 CSS.module 出来前，用 SCSS 分割 Scope 挺好用。</p>\n<p><strong>优点</strong>：结构非常清晰</p>\n<p><strong>缺点</strong>：</p>\n<ol>\n<li>编译后的选择器很长一串，从浏览器渲染角度，匹配DOM是耗性能的</li>\n<li>难以应对复杂项目 DOM 结构的改变，需要考虑扁平化 + 命名，但这样做和原生 CSS 的维护体验也不相上下。</li>\n</ol>\n<h3>CSS Module</h3>\n<p>CSS Module 是完全 <strong>组件化</strong> 的粒度。相比起 SCSS 的样式与 DOM 分离，CSS Module 为组件内部样式耦合，组件间样式分离。</p>\n<p><strong>优点：</strong> 在组件粒度分割合理的情况下，清晰易维护。</p>\n<p><strong>缺点</strong>：依赖预构建，写类名写起来太磨叽了。整体我用得不多没法评价。</p>\n<h3>BootStrap</h3>\n<p><strong>组件化</strong> 为主，少量原子化修饰的预置样式库，拿来即用是不错的。早期 CSS 框架大多是指预制样式，和预构建的库有本质区别。</p>\n<h3>Tailwind css</h3>\n<p>完全原子化的神奇之库，通过编译可以有功能类和组件类。它更像是重新定义了 css 语法。</p>\n<p><strong>优点</strong></p>\n<ol>\n<li>灵活，快，好看</li>\n<li>工具链齐全，可以裁剪掉不用的原子类。</li>\n</ol>\n<p><strong>缺点</strong></p>\n<ol>\n<li>稍微要写复杂一点的样式，DOM 就会被一大堆 class 埋没。</li>\n<li>从浏览器渲染角度，匹配、合并大量 CSS 样式是需要更多性能开销的</li>\n<li>要做到同种样式的复用，必须组合原子类，变成功能类或组件类，否则维护起来相当麻烦。这似乎违背了用 tailwind css 的初衷，熟悉了 css 的不如直接自己用 css 手撮功能类和组件类。</li>\n<li>其实我是 tailwind 黑，嗯。但无法否认开发时确实很快很方便。</li>\n</ol>\n<h3>原生 css in js</h3>\n<p>指 JS Object 转译为 CSS。由于写起来太不像 CSS，复杂的功能写起来过于不直观 ，我直接 PASS。</p>\n<h3>Styled-components</h3>\n<p><strong>组件化</strong>的 CSS in JS 方案，写起来像 CSS 实际是 JS。支持客户端动态修改 CSS 具体属性（其他方案做状态改变主要依靠 selector 的匹配）</p>\n<p><strong>优点</strong>：</p>\n<p>灵活好拓展，比如主题管理不仅仅是颜色，还可以是图片资源一类的。</p>\n<p><strong>缺点</strong>：</p>\n<ol>\n<li>因为是 JS 转 CSS，服务器编译慢和客户端渲染慢得选一个</li>\n<li>React 的 useContext 要被废弃了，而 styled-components 严重依赖此 hook，导致进入了维护状态。JS 框架发展太快了。</li>\n</ol>\n<h3>Linaria</h3>\n<p>自定义 <strong>功能类</strong> 的 CSS in js 方案，同时也支持 <strong>组件化</strong> 写法</p>\n<p><strong>优点</strong>：</p>\n<p>是预构建方案，和原始的 CSS 写法和思路差不多。</p>\n<p><strong>缺点</strong>：</p>\n<ol>\n<li>组件化鸡肋， 功能类和组件化过于割裂，反而使得组件化样式管理困难（比如组件样式和自定义原子样式写两个地方，加上DOM 上写 classname，等于写个样式得看三个窗口）</li>\n<li>使用功能类有点像原子化，又完全不如 tailwind 已经给你预设好一堆东西的效率。写类名和 cssmodule 一样，太磨叽了</li>\n</ol>\n<p>总之有点四不像。</p>\n<h2>构建组建库</h2>\n<p>每一个 CSS 方案都有对应的构建组件库的实践。 <a href=\"https://github.com/shadcn-ui/ui\">shadcn</a> 是基于 tailwind 构建组件库实践。</p>\n<h2>CSS 框架选择要素</h2>\n<ol>\n<li>样式复用</li>\n<li>样式组合</li>\n<li>动态样式</li>\n<li>主题切换</li>\n<li>代码提示</li>\n<li>自动裁剪</li>\n<li>随意重构</li>\n<li>渲染性能</li>\n<li>实践的统一性</li>\n</ol>\n<p>最重要的还是自己的需求。</p>",
            "url": "https://sansui233.com/posts/2025-07-12-compare-css-solutions",
            "title": "踩了一圈 CSS 构建方案的坑",
            "summary": "前端代码中质量最薄弱的一环",
            "date_modified": "2025-07-12T12:49:00.000Z",
            "date_published": "2025-07-12T12:49:00.000Z",
            "tags": [
                "学习"
            ]
        },
        {
            "id": "https://sansui233.com/memos?id=2025-07-10 16:20",
            "content_html": "<link rel=\"preload\" as=\"image\" href=\"https://img-cf.sansui233.com/imgs/2025/06/202506232219346.webp\"/><h2>2025-07-25 00:48:53</h2>\n<p>#动画</p>\n<p><strong>灵笼</strong>：6分。看了一下第一季，不是很喜欢，再看时发现之前姐给我看过三集。一是画风，我不太理解为什么 3D 怪兽设计都爱长得和侏罗纪再现一样再加上器官质感（早年CG角色设计书也是这么讲生物拼接，实在喜欢不起来），二是开头就全是大场面特效动作戏不走剧情，后面马克的剧情推起来还行，虽然还是俗了点，几个角色的性格和剧情都很重的商业套路化的，有点腻。</p>\n<p><strong>罗小黑战记2</strong>：9分。看完把1和tv又看了一遍。罗小黑还是太正常了，好久没见过动画角色的性格这么像普通生活中的正常人的了，没有吵架没有咯噔的很舒服的成年人卡通动画。然后打戏很爽很精彩，拆飞机那场戏惊到我了。笑点还是很足，维持着冷幽默的风格。剧情上相比1是要稍微弱一些的，但有的地方还是真的很好笑。</p>\n<p><strong>时光代理人</strong>：7分，在看。这种委托式单元剧会让我想起哑舍。现在感受是卖男同和女同都卖得太明显了……每一集的主题都是比较常见，感觉演得比较套路，不过还是会被浅浅感动一下。质量还算不错。这动画给我最大的感觉时找男角色参考经常看到。</p>\n<p>至于凡人修仙啥的我就补不了了，云开飞机也学不了，还有近年来不问三九的几篇文。半年来我对生活的感知力下降地很严重，最近靠某剧的强刺激找回了一点。但还是差得太远了。我必须工作，必须，感觉像在生活。</p>\n<p>看到木头说写了几十个剧本了。真好啊。剧本是这样的，能写的人一只能写。如果笛子做绿蓝时不要那么急着放出全部，那么多故事是够她出一辈子的。剧本在构思出来时是一件很开心的事，只是要花时间专门构思的，否则连贯不起来。</p>\n<p>没有生活，想看看有生活感的镜头与图。</p>\n<h2>2025-07-23 14:51:23</h2>\n<p><a href=\"https://www.deviantart.com/jepricreations/art/Windows-11-Cursors-Concept-886489356\">这个光标</a> 质量很不错，在<a href=\"https://zhutix.com/ico/windows-11-cursors-design/\">致美化</a>上也能下载到。</p>\n<h2>2025-07-10 05:03:50</h2>\n<p>这是一篇日常的看电视、看剧、看游戏的生活记录。用时三小时二十分钟。</p>\n<p><strong>看电视</strong></p>\n<p>看了《歌手2025》，然后循环了好几天的李佳薇的天后。唱得感人肺腑，没有花里胡哨的表演，就是纯粹的好听且有感情。想想要是我还是14岁的话，大概不太会喜欢来这种老派唱法，当时太注重音色好听了。现在觉得，扎实的歌手真的厉害。</p>\n<p>随后观摩了一下2022年李佳薇发表在B站的<a href=\"https://www.bilibili.com/video/BV1H94y117gL\">《天后》演唱教学</a>。在听她唱歌前，我都在想这歌还能怎么唱。结果她在视频中演绎出了三种情感，游刃有余。轮到自己想学时，只想说死嘴快唱啊……非常难学，对声音收放的控制细腻多变，三句够我学一年。想起来大学有个室友也是很会唱歌，在没有学过唱歌时，听起来就特别专业，闻着落泪哭。</p>\n<p>想想我也可能近五年没有听过单曲循环了。自从补完 radwimps 往后，再没有觉得能循环的歌，连 rad 的歌都是十年前的。原来不能循环只是歌不好听，华语乐坛倒退十年名不虚传。</p>\n<p><strong>查无此剧的爆火电视剧</strong></p>\n<p>看了那个环大陆播放，所有二创花絮都被彻底封杀的国产耽美剧《逆爱》。如果平时不看剧也不看娱乐圈，一定是查无此剧。但凡有追剧、追星、追文的一定会知道。在海外的耽美圈算是非常火爆的程度，拿了几个平台的收视第一，我很少在推特上看到如此多万赞的国产作品相关的话题。</p>\n<p>这个剧开始非常土到尴尬土到空气安静土到怀疑人生，脚趾在墙上抠出了马里亚纳海沟。从3集后喜剧元素多了起来。3-7是比较好的推进，几集看下来令人上头。但 8-10 集是有问题的，故事逻辑连贯性、剪辑、角色性格的稳定程度有大问题，像突然一个还算有点专业水平的作品变成了同人 cut。</p>\n<p>不过对于投资成本不足十分之一的网剧来说也是不容易了。这个剧组不仅剧组穷演员也穷，受的演员是欠债前司 60 万来拍这戏的，因此过得非常抠，还钱还了三年了还没还完。他的新经纪公司是才成立不久的，他自己还是股东，出资 5000，整个公司认缴 10 万，公司只有三个人……实在太传奇了。</p>\n<p>这剧的二创在两周内换了6个名字，几个视频过百万后，相关视频 B 站全部下架，不论什么内容只要带相关 tag 就不过审，俗称“防爆”。因此这个剧不像从前的呆过的热坑，当时随便一刷就是质量很高的作品，二创满天飞。现在找同人剪辑全靠推荐系统协同过滤（我草死去的老牌算法课突然攻击我）不然只能看到毫无营养的十几秒帅哥怼脸。有时候很怀念有 KOL 推荐的时候，活人很多，高质量的东西可以通过口口相传而保留，但那时反而因为好作品太多了，需要推荐系统来挖掘没人转发的好作品。到 2022 年时，冷坑的高质量二创都只有几千人看了，如果不是关注一些剪辑类的 Up 转发，完全见不到。</p>\n<p><strong>游戏与故事</strong></p>\n<p>其实只是在崩铁上线新剧情时上去过了4个小时左右的剧情，约等于看剧情。</p>\n<p>看完 3.4 的剧情时是非常震撼而惆怅的。一改游戏讲故事流水账作风，信息密度大，故事紧凑，没有把所有信息都放到对白里了，过场多，倒计时也足够震撼。4小时的剧情把白厄所经历的一切刻画地淋漓尽致，他是个永远无法超脱神（程序员）给定的命运（深度学习程序）的人（变量），明知救世无望，却仍然背负起三千万次轮回，宁可自身人性尽灭，以延续这个世界令人绝望的、永远止尽的循环，直到弑神的时机到来。除开剧情本身，这章表现力还要归功于美术，过场的时钟非常有仪式感，让人想起了命运石之门那不断变动的世界线，以及高潮的弑神之章回归了2D动画，终于把经费用在了该用的地方。整个角色的战斗技能设计甚至都是在为讲剧情服务，不停轮回，不停地爆天星对昔日的同伴下杀手。人的声音从阳光开朗的青年逐渐变成人气尽逝的沉重。</p>\n<p>之前 3.3 遐蝶上线时，还在一个视频下面喷了遐蝶单薄的塑造，除了美丽和特效要啥没啥。要成长没成长，要推剧情推不动剧情，作用只剩小女友，完全比不过同期那刻夏的人格魅力。</p>\n<p>总体评价是：翁法罗司的剧情非常好。虽然之前也有时会说崩铁的剧情好，但是衡量标准是在游戏里比的。在我心中，影视剧情和游戏剧情有断层的差距（文字剧情类游戏除外）。被认为现象级的游戏剧情，讲故事的质量都不会高于一个合格的电视剧或动画，我也因此无法云游戏剧情——观影体验实在不好。像是FGO 最受好评的第六章动画改编，放在番剧的角度看上也是很一般，我记得当时我给表弟看时，播了两集实在说不出什么好看的理由，太缺主心骨（故事的主轴）了，不过在游戏里的史诗氛围要好一些，但剧情本身依然不及专为剧集而写的故事剧本。毕竟影视发展这么多年，每一个有效的镜头、反应、声音，相互配合而成的连贯的故事节奏，表达的信息不是游戏能比的。</p>\n<p>人类有恐怖谷效应，当一个东西有点像人但明显不是人时，人类会感到诡异。放到讲故事和游戏也有类似的尴尬。纯文字会给人很多想象的空间，小说会很精彩。文字剧情类游戏由于动画少，对于镜头声音也都有点想象的空间，只要文字能写好也很不错，FGO 大概可以算半个。以上观众的兴奋感会来源于主观的想象。但是，如果你的角色写实且能动，你的画面也写实且有镜头的变换，你就把观众的想象夺走了，转而提供由你（游戏）提供表演的反馈。此刻，种种“能让角色动起来”的美好愿景，反而变成了讲故事的阻碍。角色动作就是预设的状态机反复播，镜头表现最需要的光影、黑白灰被受制于渲染风格、场景和设备性能。于是你专拍大头微表情，做表情融合，虽然也动不太起来，至少能有无数个 PPT 表情了。</p>\n<p>然后大量剧情也是站桩、播几个动画，视觉层面，分镜、光影、角度（镜头语言）基本等于没有。声音层面，说一句话是一句话的，其他的比较说话节奏（打断）、背景氛围、随时随时音乐与音效的推进，也是基本没有。再加上抽卡二游的锚定了是卖角色和对应的战斗机制，新角色是按版本固定推出的，这其实完全不符合讲故事的角色出场逻辑。</p>\n<p>但我是来看剧情的，并不想打牌……星铁明显是在文字上下的功夫比较多，但什么东西都由文字表现出来，也因此过于冗长。但到 3.4 时，游戏更新后的开场动画着实有点吓到我了，味到非常正的二次元神性，又开始幻视 FGO。</p>\n<p><strong>博客</strong></p>\n<p>有考虑要不加给博客加音频和视频播放。想了 一会儿作罢，太麻烦了。现在想写复杂东西的情况只有两种，一是赚钱，二是特别常用，其余情况就一切从简，简单好维护就行。</p>\n<p>虽然如果有的话肯定想起来会想用用，但还得配合一整套的静态博客的 CMS，没有现成工具能满足需求，上传音视频还要做压缩这一套，也就是自己要用得爽要前后端写一整套……还是用微博吧。微博我也很少上传视频，确实没这需求。</p>\n<p><strong>再说平台的去 KOL 化</strong></p>\n<p>鉴于同人难找，我自身有收集整理的习惯，其实很想开个杂号转发一些东西。但 B 站不能开小号，严重影响我当活人……</p>\n<p>微博认真看剧的氛围越来越差，自从选秀节目成团盛行后演变为饭圈撕逼，八卦和没营养程度幻视小时候的星周刊。除此外就是一大堆社会新闻。我上微博时总有种即视感，和十几年人看二三十见的人上天涯虎扑似的。</p>\n<p>抖音的创作质量真的差，大部分做饭的人不会发那上面。</p>\n<p>至于小红书……很好，我最讨厌的一个平台，这个平台完全无法给创作水平相称的流量，按时间刷 tag 偶尔刷到了 10 比 1 的点赞率的剪辑，真的算好的同人作品了，但完全推不出去，并且因为完全去 KOL 化，也不能顺着点赞和转发链找作品。原子化，且信息茧房最严重。</p>\n<p>Lofter 能推好内容，毕竟专为同人而生的平台，大家会刷 Tag 下内容的周排名，还挺手动的，不是只靠黑箱似的推荐算法，我发同人漫画数据最好的也是在 Lofter。但我其实不太用这个产品。因为大部分的同人粮达不到要我想要的感觉，很少看。编辑严选的纸媒时代和电视台严选，把人口味养叼了，其实这种非常透明的大众严选也还是不错的。Lofter 没有视频类的，也很难看到一些创作者视角的碎碎念，仿佛不发原创就不要上这里发垃圾占 Tag（实际上还是有很多搬运）。</p>\n<p>我现在有点想看纸媒水平的中短篇作品。还是忘不了小狐狸化形记。在这个内容质量势微的时代，各种乱七八糟内容被啊晴的宣传与好看的外衣包裹着，更想看到实实在在硬好的东西，就像李佳薇的演唱那样。</p>\n<h2>2025-07-03 04:03:11</h2>\n<p>上周六和雨疏看了名柯的剧场版，感觉是近十年来最好的了，没整成动作片，也没有大场面，从始至终的都在比较紧凑地推理。</p>\n<p>天啦要干的事情一件也干不了。论文更新不动，游戏也打不了，觉也没有睡，也没有刷社交平台，也没有和人聊天。我是怎么做到的……显示我一直在 Chrome和 VSCode，但我也没有觉得我有用多少，标签页面还冻在知乎……我用电脑在 Chrome 都干啥啊？？？1点的时候只记得头非常沉重，是情绪波动太大导致的，当时只想说惩罚自己不准睡觉，开着就看论文。实际也没有看，可能一整天真的能花在论文上面的时间一共就1小时。现在实在思考不动了。我要两小时内干完一切睡觉……手工的事情明天再说，或者下辈子再说。</p>\n<h2>2025-07-02 20:00:48</h2>\n<p>今天是周三，把论文发过去，非常想死。</p>\n<p>为什么呢，我不知道，也不重要。上次可能是三年前了，浮现一大堆跳楼与砍手的想法。什么精神暴力。太难了，哭太多后头晕然后再是头躺着什么力气都没有。然后拼命尝试改论文一会儿来汇报结果吧。现在是 20:03:47。</p>\n<h2>2025-06-24 15:57:40</h2>\n<p>之前有被说老是会说不，其实也想改掉总是说不。迎合等于忽略事实，拒绝等于冥顽不灵不听意见。不过往好了说，迎合是把握大众趋势，拒绝等于独立思考。我现在不太想直接说不，只好岔开着说一个看起来没有说不，实际就是说不的方式。</p>\n<p>说起来为什么会有老说不的习惯，因为一直以来我说不都是没用的，比如不想吃这么多饭，不想打半个小时电话。当然说是没用的，我计时说只有一分钟也没用，所以最近才直接挂电话拒绝情感索取……总之我已经被这种情感索取消耗掉了所有可能培养 Fe 的可能性。</p>\n<p>再说到，捞女游戏出来时，我没有觉得这游戏有什么过分的，讽刺这类群体没什么不好，有这类想法的人我不敢说有多少，但身边统计学有人是这样的，就会感觉这样的人并不少，至少比死宅二次元多……当然说可以成是利益导向，我并不觉得利益导向有问题，只是维持家庭到后期的需要是责任感，因利益结婚的人也可以有责任感，只是捞一把的人大概是不会想负责任的没得捞就跑了。</p>\n<p>感觉最近一年看了实在太多乱七八糟的东西，然后记忆力更差了……与其说差其实也是不用的就会渐渐忘掉。表达能力也下降地很厉害，东一句西一句。还是要尝试去体系化地表达同一个主题不要太跳脱。那首先要少写 meme……</p>\n<p>雀</p>\n<h2>2025-06-23 22:14:04</h2>\n<p>60天的速写牢嗯嗯。我觉得画画和写代码真的是不太能同时做到的事情，状态比较冲突。</p>\n<p><img src=\"https://img-cf.sansui233.com/imgs/2025/06/202506232219346.webp\" alt=\"60天速写\"/></p>",
            "url": "https://sansui233.com/memos",
            "title": "碎碎念2025",
            "date_modified": "2025-07-10T08:20:00.000Z",
            "date_published": "2025-07-10T08:20:00.000Z",
            "tags": [
                "Diary"
            ]
        },
        {
            "id": "https://sansui233.com/posts/2025-04-22-techs-about-steam-crack",
            "content_html": "<p>很久以前被淘宝的 Steam 假 CDKey 给坑过，因为价格其实也不便宜，打的正版宣传，其实是盗版，后来感觉太可疑了查了一下确认被坑了。现在突然想起来了解了一下。本文概述是日常语境中的 “Steam假入库”需要的一些步骤，概括起来为五个方面：解锁、下载、入库、DRM、API验证。</p>\n<h2>下载验证</h2>\n<p>steam 的下载鉴权流程是</p>\n<ol>\n<li>查找账号是否有拥有此游戏，有则显示下载按钮</li>\n<li>点击下载后，把游戏软件 Manifest 对应的密钥（DecryptionKey）明文写入一个本地文件 <code>Steam\\config\\config.vdf</code></li>\n<li>Steam （原版）根据 <code>config.vdf</code>中的信息，发送下载请求至 Steam CDN 进行下载</li>\n</ol>\n<p>“Steam 解锁” “Steam 假入库” 指的是绕过上述机制。具体而言，如果没有购买游戏，可以：</p>\n<ol>\n<li>将按钮变为可下载（至于是伪造请求实现还是逆向 hook 实现，我不知道，都可以，因为甚至不需要变按钮，给个外部的下载按钮也可以）</li>\n<li>点击按钮后，从不知名渠道获取一个正版账号的 Manifest（下载清单）和 Decryption Key（下载密码），写入<code>Steam\\config\\config.vdf</code></li>\n<li>Steam（原版）根据 <strong><code>config.vdf</code></strong>，发送下载请求至 Steam CDN 进行下载</li>\n</ol>\n<p>Steam 的下载验证可以说是相当简单，明文本地存密码，CDN 无状态的验证，这么多年没有改过流程，给入库工具空间（虽然说前端的事总有办法 Hack 但也是可以让 Hack 成本变高很多的）。不过 Steam 理念本来就是以平台服务留住玩家的，反倒是扩大了其影响力与营收。</p>\n<p>一些名词解释：</p>\n<ul>\n<li>解锁：指对没有购买的游戏，“可以显示下载按钮”。和能不能下载没有关系。</li>\n<li>下载：Steam 根据 <strong><code>Steam\\config\\config.vdf</code></strong> 的信息下载游戏文件。</li>\n<li>入库：指把下载好的游戏，在当前电脑的 Steam 库中显示。</li>\n</ul>\n<p>以上过程均不涉及对游戏本身的破解，只是对 Steam 下载过程的破解。也就是，破解的是 Steam，不是游戏。</p>\n<h2>运行时验证</h2>\n<p>这里开始才会涉及到游戏破解。</p>\n<p>有的 Steam 游戏下载下来后是不用破解的，直接找到游戏目录，点 exe 可以正常游玩（比如星露谷）。只是无法通过原版 Steam 打开，也就只能离线。</p>\n<p>有的游戏是无法脱离 Steam 直接运行的。这里涉及两层验证：</p>\n<h3>加密算法层</h3>\n<p>这是一层 DRM（数字版权加密保护）。Steam DRM 系统的名称为 SteamStub。SteamStub 的加密有各种的变体，每个游戏使用的不一致。只对 exe 的算法加密，是一个离线的步骤。不涉及 Steam 平台的验证。</p>\n<p>网上有一个开源工具叫 Steamless，可以破除 SteamStub 对游戏的 DRM，称为脱壳。但脱壳本身不处理 Steam 在线验证相关，只进行了脱壳的游戏也是无法正常游戏的。</p>\n<blockquote>\n<p>SteamStub DRM 和 Steamworks API 是两个独立层。Steamless <strong>仅移除 SteamStub 加密外壳</strong>，但游戏代码中与 Steam 平台功能（如成就、云存档、联机）相关的 API 调用（通过 <code>steam_api.dll</code>）仍会保留。</p>\n</blockquote>\n<h3>Steam API 验证</h3>\n<p>游戏还可能调用 Steam api 进行在线通信，如成就、云存档、联机相关的 API 调用。</p>\n<p>这是使用入库工具玩破解游戏可能被红信或封号的根本原因，因为对 API 的调用是发送到 Steam 官方服务器的。在小红书上了解到，有的玩的盗版可以与正版联机，说明 Steam 在联机时并不会验证账号是否拥有该游戏。包括 Steamtools 实现的家庭共享联机，也说明了 Steam 对于是否账号可以进行联机鉴权不足。但只要留有记录就有可能导致被封号，取决于 Steam 什么时候想管理盗版现象。</p>\n<p>反之，如果伪造一个 Steam 的服务器，并且替换游戏中的 Steam 相关的动态链接库，如 <code>steam_api.dll</code> ，游戏里所有对 Steam API 的调用被发送到假服务器上，返回一个假的结果。这种工具也已经有了，项目为 goldberg_emulator，简称 GBE。破解版的游戏通常会内置一个这样的虚拟 Steam 环境。</p>\n<h3>第三方厂商验证</h3>\n<p>很多大厂的游戏有自己的联机服务器和验证机制、不仅走 Steam API 的验证。这种也是可以通过虚拟环境破解，但没人做，除非专门对这个游戏的所有 API 做逆向。难度比逆向通用的 Steam API 高很多。</p>\n<h2>Steamtools 是什么</h2>\n<p>已知 Steamtools 主要是做 <strong>解锁</strong> 和 <strong>入库</strong>。对于会不会破解游戏，网上没有更多的信息。我也不想冒风险尝试使用它。</p>\n<p>根据官网的解释，Steamtools 可以离线运行（不如说破解游戏只能是离线运行），是提供了类似 GBE 的验证环境。有没有对 DRM 脱壳不清楚，但个人倾向于有，很多游戏都有 DRM 的保护，除了 SteamStub，还有其他的 DRM 验证方式，不脱壳玩不了。</p>\n<p>因此个人推测是，Steamtools 是集 <strong>解锁、下载、入库、破解、运行时验证</strong> 为一体的工具集。</p>\n<h2>SteamAutoCrack 是什么</h2>\n<p>只做 DRM 脱壳和 Steam API 验证。项目在 Github 上，破解后的游戏会运行在 GBE 的环境下。这种方式是完全离线运行的单机。</p>\n<h2>风险来源</h2>\n<p>完全脱离 Steam 运行没有风险，只要在线就可能有风险。</p>\n<p>假入库阶段的风险主要来自于入库工具对 Steam 请求拦截的覆盖程度不足。例如 Steam 版本更新了，使得 API 和下载流程有变化，而入库工具没有对其做处理，无法完全欺骗下载流程。网上看到假入库的人可能有囤积癖或者是打算做灰产，一次性入库了几十个游戏，直接导致被 SteamCDN 拉黑。</p>\n<p>运行时的风险也是来自于在线验证，如果是开着 Steam 玩的破解游戏，没有离线时甚至尝试联机，使得游玩信息发送到了 Steam 的服务器（比如不该有的存档、不该有的联机等等）。</p>\n<p>另外，入库工具会侵入式修改 Steam的客户端，直接打开 Steam 可能会有检测文件是否被修改。 Steamtools 提供了三种启动模式，可以随时恢复为原版 Steam 的运行。但淘宝卖的入库工具说不准是什么样的，当年骗我的店家那个用的是早期的 steamtools，使用店家的账号下载游戏后，使用 steamtools 离线运行（本来已经忘记了，努力想想竟然想得起来一点细节）。但现在的店家说不准是什么样的，在 B 站看到说有的是直接修改文件，从此都是盗版Steam 客户端，只能卸载重装。</p>\n<p>没有风险的方式：如果你有方式得到 Steam 正版的游戏文件，然后用 SteamAutoCrack 破解，能直接脱离 steam 运行则没有风险。</p>\n<p>对于更多的人而言，下载木马是最大的风险。</p>\n<h2>参考资料</h2>\n<ul>\n<li>bbs.steamtools论坛</li>\n<li>SteamManifestCache wiki</li>\n<li>SteamLess Readme</li>\n</ul>",
            "url": "https://sansui233.com/posts/2025-04-22-techs-about-steam-crack",
            "title": "Steam 假入库是怎么做的",
            "summary": "入库不仅仅是入库",
            "date_modified": "2025-04-21T19:59:00.000Z",
            "date_published": "2025-04-21T19:59:00.000Z",
            "tags": [
                "Diary"
            ]
        },
        {
            "id": "https://sansui233.com/posts/2025-04-19-windows-context-menu",
            "content_html": "<link rel=\"preload\" as=\"image\" href=\"https://img-cf.sansui233.com/imgs/2025/04/202504190843358.webp\"/><p>（发现简中圈居然没有人写这个事，写个草稿发别的地方）</p>\n<p>Windows11 右键菜单问题被诟病已有，网上很多还原为 win10 菜单的教程……但 win10 有 win10 的问题，有用的没用的都往里放，常用的不常用的混在一起。有没有一种方法可以兼顾好看，同时有合理的菜单层级呢？</p>\n<p>有的 —— Nilesoft Shell。可以自定义的 Win11 右键菜单。已经用了两年多了很好用（以至于差点忘了有这个软件）。</p>\n<h2>下载并安装</h2>\n<p>下载在官网： <a href=\"https://nilesoft.org/\">https://nilesoft.org/</a></p>\n<p>安装完后，新菜单应该已经生效了，并且会开机自启。这时候可以点点看，如果感觉效果满意就不用再看下去了。</p>\n<p>当然颜狗是不满意的，大部分一级菜单我用不上，我只想保留我常用的，不用的塞到更多选项。如图</p>\n<p><img src=\"https://img-cf.sansui233.com/imgs/2025/04/202504190843358.webp\" alt=\"\"/></p>\n<h2>挪动菜单层级</h2>\n<p>如果你是默认安装，<code>C:\\Program Files\\Nilesoft Shell</code> 应该能看见以下的文件结构</p>\n<pre><code>Nilesoft Shell/\r\n├── shell.exe\r\n├── shell.nss\r\n├── imports/\r\n│   ├── modify.nss\r\n│   └── ...\r\n└── ...\n</code></pre>\n<p>以 <code>.nss</code> 结尾的是配置文件，可以用记事本打开。以下是几个案例：</p>\n<h3>1. 收纳不常用菜单至 “更多选项”</h3>\n<p>例如，收纳所有名称里带有 “QQ” 和 “百度” 的菜单项，在 <code>modify.nss</code> 添加如下：</p>\n<pre><code>modify(mode=mode.multiple find=&quot;QQ|百度|网盘&quot; menu=title.more_options)\n</code></pre>\n<p>find 中包含的字符串会被匹配，“|”是或。表示匹配“QQ”或“百度”或“网盘”的任意项都会被挪走。</p>\n<p>这是主要的挪菜单的方式，我实际上挪了一大堆。</p>\n<pre><code>modify(mode=mode.multiple\r\n\tfind=&quot;收藏夹|打印|共享|PowerRename|Microsoft Defender|Change Attributes|File Locksmith|upic|火绒|百度|QQ|Acrobat|Adobe|OneDrive|在沙盒中运行|PicList|旧版 Windows Media Player&quot;\r\n\tmenu=title.more_options)\n</code></pre>\n<h3>2. “创建快捷方式”挪到顶层</h3>\n<p>有人可能看不惯 创建快捷方式 放在了 更多选项 里。要恢复把 <code>modify.nss</code> 中一行注释掉就好。</p>\n<pre><code>modify(mode=mode.multiple\r\n\twhere=this.id(\r\n\t\tid.send_to,\r\n\t\tid.share,\r\n\t\t// id.create_shortcut, 这行注释掉\r\n\t\tid.set_as_desktop_background,\r\n\t\tid.rotate_left,\r\n\t\t...\n</code></pre>\n<h3>3. 顶层添加新菜单项 “使用 vscode 打开”</h3>\n<p>在 <code>shell.nss</code> 中，新起一行添加</p>\n<pre><code>item(title=&#x27;Open with VS Code&#x27; image=[\\uE272, #22A7F2] cmd=&#x27;code&#x27; args=&#x27;&quot;@sel.path&quot; &amp;&amp; exit&#x27; sep=&#x27;top&#x27;)\n</code></pre>\n<p>添加的这行可以不在最后，添加的位置决定它在菜单中的位置。我添加在了中间，最后的几个 &quot;import&quot; 之间。</p>\n<p>要是问为什么我不用 vscode 自带的右键菜单……我的 vscode 装得太早了，那时还没有右键菜单关联，现在也懒得再装了就将就用吧……</p>\n<h3>4. 顶层菜单添加新目录</h3>\n<p>你要是在图片上右键，会发现系统自带有“使用 Windows 画图编辑”“使用照片编辑”“向左旋转”“向右旋转”……我的天，哪个天才设计的，你不知道自家照片 App 打开后能编辑也能旋转吗？（我知道这肯定是两波人开发的但还是想吐槽）</p>\n<p>秉持着只挪不删的原则，在“更多选项”前加了个“编辑”目录。以下加在了 <code>shell.nss</code></p>\n<pre><code>menu(mode=&quot;multiple&quot; title=&quot;编辑&quot; image=image.glyph(&quot;\\uE0A1&quot;))\r\n{\r\n}\n</code></pre>\n<p>然后在 <code>modify.nss</code> 里加了</p>\n<pre><code>modify(mode=mode.multiple\r\n\tfind=&quot;*编辑|旋转|PDF&quot;\r\n\tmenu=&quot;编辑&quot;)\n</code></pre>\n<p>这样等于说，编辑和旋转相关都被归到了新的“编辑”目录下。加上 PDF 相关操作挪进去。我没有装 WPS，装了 WPS 也可以把 WPS 挪一个目录。</p>\n<h2>生效</h2>\n<p>管理员权限运行安装目录下的 <code>shell.exe</code>，点 Register 生效</p>\n<h2>其他</h2>\n<p>按 shift 后右键菜单，会有一个“Developer” 目录。没错 shift 显示隐藏菜单也可以实现，配置的属性有 <code>vis=key.shift()</code> ，但不是实时变化的所以没有mac 上的好用。除此之外还有喜闻乐见的能配置主题、颜色、图标等……我不管了。</p>\n<h2>参考</h2>\n<p>官网的文档很详细，但是非常面向程序员。不过大部分的需求被人在论坛上问过了，也有人在 issue 里问。不会就去论坛翻一下。看不懂英文开翻译，看不懂文档丢给 AI。</p>\n<p>文档： <a href=\"https://nilesoft.org/docs\">https://nilesoft.org/docs</a></p>\n<p>论坛： <a href=\"https://github.com/moudey/Shell/discussions\">https://github.com/moudey/Shell/discussions</a></p>",
            "url": "https://sansui233.com/posts/2025-04-19-windows-context-menu",
            "title": "Windows11 右键菜单自定义 - NileSoft Shell",
            "summary": "颜狗就是得样式和功能性全要，怎么了",
            "date_modified": "2025-04-19T01:21:00.000Z",
            "date_published": "2025-04-19T01:21:00.000Z",
            "tags": [
                "工具"
            ]
        },
        {
            "id": "https://sansui233.com/posts/2025-01-05-2024-summary",
            "content_html": "<link rel=\"preload\" as=\"image\" href=\"https://cdn.jsdelivr.net/gh/NamiLing/upic/picgo/202401131219995.webp\"/><link rel=\"preload\" as=\"image\" href=\"https://img-cf.sansui233.com/imgs/2025/01/202501050253199.webp\"/><link rel=\"preload\" as=\"image\" href=\"https://img-cf.sansui233.com/imgs/2025/01/202501050335032.webp\"/><link rel=\"preload\" as=\"image\" href=\"https://img-cf.sansui233.com/imgs/2025/01/202501050330486.webp\"/><link rel=\"preload\" as=\"image\" href=\"https://img-cf.sansui233.com/imgs/2025/01/202501050325838.webp\"/><link rel=\"preload\" as=\"image\" href=\"https://img-cf.sansui233.com/imgs/2025/01/202501050055049.webp\"/><p>印象中之前每年其实都有写去年主要干了什么，看了什么作品。但又忘了都写在了哪里。今年想起来还是在这里写吧。</p>\n<p>主要说说看了些什么吧。</p>\n<h2>实用小技术</h2>\n<ol>\n<li>无线 iPad 当作电脑副屏</li>\n</ol>\n<p>某天突然想躺着用手柄玩电脑的游戏，所以 <a href=\"https://github.com/LizardByte/Sunshine\">sunshine</a> + moonlight(iPad) 串流。效果非常不错！</p>\n<ol start=\"2\">\n<li>便携显示屏</li>\n</ol>\n<p>后面，我又嫌无线的码率不稳定，组装了个便携显示屏，变成了躺着用电脑副屏……配件全部拼多多的。</p>\n<ul>\n<li>显示屏，京东方 NV156FHM N69</li>\n<li>驱动版、按键板、软排线</li>\n<li>外壳、音响</li>\n</ul>\n<ol start=\"3\">\n<li>新的代理协议与客户端</li>\n</ol>\n<p>今年对于魔法上网，非常重要的事情就是去年年底 clash-core 删库。不过也正好，促使我看看有没有人设计新的协议。</p>\n<p>协议方面尝试了 hysteria2 和 naive，测试下来已经把 hysteria2 当作主力了。顺便读了下 http2 <a href=\"https://github.com/abbshr/rfc7540-translation-zh_cn\">rfc7540</a> 和 http3 <a href=\"https://datatracker.ietf.org/doc/html/rfc9114\">rfc 9114</a> （但现在又忘了！）</p>\n<p>客户端试了 <a href=\"https://sing-box.sagernet.org/\">singbox</a>，在 ios 上替代了 shadowrocket，性能好非常多。电脑端 GUI 是典型的后端程序配置的思维，很难用，还是用 clash-meta 系列了。</p>\n<h2>单机游戏</h2>\n<ol>\n<li><a href=\"https://store.steampowered.com/app/240720/Getting_Over_It_with_Bennett_Foddy/\">Getting Over it</a> (掘地求升)</li>\n</ol>\n<p>我的天，有生之年我居然打通了这个8年前的破游戏！</p>\n<p>打通的那一瞬间，我感觉觉得自己已经可能面对任何困难无所不能了。但是山顶的聊天室早已空无一人，有一点寂寞。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/NamiLing/upic/picgo/202401131219995.webp\" alt=\"Getting over it\"/></p>\n<ol start=\"2\">\n<li><a href=\"https://store.steampowered.com/agecheck/app/1086940/?l=schinese\">博德之门3</a></li>\n</ol>\n<p>tga 2023 年度游戏，不好玩。去年买了，今年和 meme 大师与墨墨联机了好几次，还是玩不下去！打架打一局太久了……而且打不好还要 SL……补药啊！（后面没法联机了其实主要是因为我作息太乱了）</p>\n<ol start=\"3\">\n<li><a href=\"https://store.steampowered.com/app/1426210/_/?l=schinese\">双人成行</a></li>\n</ol>\n<p>2021 年度游戏，好玩，这个还是感谢陈 sir 陪我打完了，而且因为他是全成就大师所以我也跟着全成就了。因为我竟然买了两年都没有玩，显得特别可怜……</p>\n<ol start=\"4\">\n<li><a href=\"https://store.steampowered.com/app/2198150/Tiny_Glade/\">Tiny Glade</a></li>\n</ol>\n<p>新出的休闲建筑游戏，最不像游戏的游戏。建筑方式新颖，而且好好看哦！</p>\n<p>玩了后做了个视频，竟然被 HR 联系了……差点当诈骗私信……</p>\n<p><img src=\"https://img-cf.sansui233.com/imgs/2025/01/202501050253199.webp\" alt=\"Tiny Glade\"/></p>\n<ol start=\"5\">\n<li><a href=\"https://www.nintendo.com/hk/switch/animal_crossing_new_horizons/\">动物森友会</a></li>\n</ol>\n<p>到今年才打开这个几年前的游戏。建岛是好玩的，画风也可爱，但因为手游也有在刷，对于刷刷刷的都有点疲惫了。</p>\n<ol start=\"6\">\n<li><a href=\"https://store.steampowered.com/app/976730/Halo_The_Master_Chief_Collection/\">Halo</a></li>\n</ol>\n<p>meme 大师带飞的经典 FPS，有剧情，非常好游戏！我只用跟在后面捡各种好玩的枪就好了（不是）</p>\n<ol start=\"7\">\n<li><a href=\"https://store.steampowered.com/app/620/Portal_2/?l=schinese&amp;curator_clanid=31468181\">传送门2</a></li>\n</ol>\n<p>十几年前的解谜神作，好丸！多人模式也是 meme 大师带飞的。</p>\n<ol start=\"8\">\n<li><a href=\"https://www.bilibili.com/video/BV1hS411w7tR\">Second Eden-理想箱庭物语</a></li>\n</ol>\n<p>这是个新的 minecraft 深度魔改整合包，基于模拟殖民地 mod。我觉得比很多整合包都要好，考虑了流程、循环、引导，有些 mod 加的解谜结构很好玩。但模拟殖民地本身有 bug，加上流程上其实也不是特别完整，只建了一小半。</p>\n<ol start=\"9\">\n<li>零大陆</li>\n</ol>\n<p>这是个超老的 Minecraft1.8 原版 RPG 整合包。真的非常震撼能做到这个程度，流程设计、地图设计上超级完整……可惜循环有问题，卡在一个冒险模式下的银河城地下区域了。</p>\n<p><img src=\"https://img-cf.sansui233.com/imgs/2025/01/202501050335032.webp\" alt=\"零大陆\"/></p>\n<ol start=\"10\">\n<li>模拟地铁</li>\n</ol>\n<p>休闲小游戏，也是老游戏了，极简地铁规划，最后发现还是开滴滴比较好。内容对得起价格。也因此和喜欢地铁的朋友有聊些城建游戏。</p>\n<p><img src=\"https://img-cf.sansui233.com/imgs/2025/01/202501050330486.webp\" alt=\"模拟地铁\"/></p>\n<ol start=\"11\">\n<li><a href=\"https://store.steampowered.com/app/813230/ANIMAL_WELL/?l=schinese\">动物井 (Animal Well)</a></li>\n</ol>\n<p>解谜 + 平台跳跃。太好玩了，这才是真正的 2024 年度游戏！！而且只 33 M，性能也超好！是像素美术但是是很现代的赛博梦幻像素美术，好看的！</p>\n<p><img src=\"https://img-cf.sansui233.com/imgs/2025/01/202501050325838.webp\" alt=\"Animal Well\"/></p>\n<ol start=\"12\">\n<li><a href=\"https://store.steampowered.com/app/391540/Undertale/?l=schinese&amp;curator_clanid=31318556\">传说之下 (UnderTale)</a></li>\n</ol>\n<p>经典日式 RPG，脑洞超大角色有意思，剧情很温暖。是Meme 依据本人的游戏时长与偏好定制的 steam 礼物……非常喜欢！</p>\n<p><img src=\"https://img-cf.sansui233.com/imgs/2025/01/202501050055049.webp\" alt=\"UnderTale\"/></p>\n<h2>动画&amp;漫画</h2>\n<ol>\n<li><a href=\"https://www.bilibili.com/bangumi/media/md21087073\">葬送的芙莉莲</a></li>\n</ol>\n<p>中世纪魔法动画，难得味这么正，不算是我非常喜欢的类型但能看下去。而且作画的流畅程度真的……太有钱了！整体比较日常，很温馨。</p>\n<ol start=\"2\">\n<li><a href=\"https://www.bilibili.com/bangumi/media/md28339713\">蓝色禁区 Blue Lock</a></li>\n</ol>\n<p>足球番，我原以为我不喜欢看，最后根本停不下来……动画第一季做得实在太好了，但第二季是 PPT，1 分都不想给……漫画非常棒，不愧2024 年的日本漫画销冠。</p>\n<p>不过我是其实从其中一对 CP 图决定看，结果看完动画觉得这两人麦太多了……不如好好看球！</p>\n<ol start=\"3\">\n<li><a href=\"https://www.bilibili.com/video/BV1ag4y1W78U\">异形舞台 Alien Stage</a></li>\n</ol>\n<p>动画音乐剧，讲的外星人饲养地球人当宠物，看人们在舞台上通过选秀比赛相杀的故事。特点是，一集一个寡妇（夫）……太刀了！</p>\n<h2>电影</h2>\n<ol>\n<li>你想活出怎样的人生</li>\n</ol>\n<p>宫崎骏动画电影，我觉得依旧很好看，很温暖。</p>\n<ol start=\"2\">\n<li>蓦然回首（Look Back）</li>\n</ol>\n<p>藤本树动画电影，讲普通画画人的故事。非常牛美术风格。尽管我不是画画人，也没有很好的画画天赋。但也有一些感受有经历过，日复一日练基础，什么时候都在考虑画画……</p>\n<p>以及藤本树居然开始走治愈系了！</p>\n<ol start=\"3\">\n<li>志愿库 - 存亡之战</li>\n</ol>\n<p>怎么突然出现了国庆战争片……这个真的拍得挺好的，算是近年陈凯歌的不那么扑的了。以及我有朱一龙演技滤镜，在超烂低成本不被任何人看好的改编网剧里，因为演技太好而突然红的，真的没得说。</p>\n<ol start=\"4\">\n<li>名侦探柯南 - 黑铁的鱼影</li>\n</ol>\n<p>和雨疏的年度固定节目，不错的粉丝向主线剧场。真好啊真好十年后还在和她一起看柯南。</p>\n<h2>音乐</h2>\n<p>年度歌手还是 Radwimps，基本老歌。上半年没怎么听</p>\n<p>年底听 4 块钱的直播，才发现日系真是年年有天才。「晚餐歌」真的很厉害。原来不是我不喜欢听歌了，是没关注到好听的歌了，网易云日推越来越不行了，一直推各种时下 OP ED。</p>\n<h2>技能相关</h2>\n<ul>\n<li>\n<p>游戏，给 MC 服务器写了 彩虹帽子 数据包。想来这其实是第一次和游戏有关的编程，经典入口是帧更新 tick()。</p>\n</li>\n<li>\n<p>画画，学了平面设计的课，作业也很肝完了，有一些收获。然后又看了些曼奇的网课，素描关系有提升，就是增加了短调子、空间感、体积感的意识。我之前也不是感受不到，而是没觉得差一点明度就会差很多。这是 Ti - Se 画画相比于 Se - Ti 的劣势，需要有理论后才能画得好……</p>\n</li>\n<li>\n<p>原神里头一回赶上音游的版本，写了几首比较难的谱面，这个非常满意，是我自己都可以反复玩的！</p>\n</li>\n</ul>\n<h2>专业相关</h2>\n<p><del>这随便吧又没人看。</del></p>\n<ul>\n<li>\n<p>笔记主题没怎么更，我也用得越来越少了</p>\n</li>\n<li>\n<p>博客有更新，但忘了！</p>\n</li>\n<li>\n<p>新写了个服务器的监控页。</p>\n</li>\n<li>\n<p>论文挣扎着狂补。</p>\n</li>\n<li>\n<p>有去接触 GPU 相关的，不想只停留在业务 MVC 再 CRUD。但看了发现没需求的话确实用不上。</p>\n</li>\n</ul>\n<p>公司的相关还是不说了……主要是图形学和，久违的 OOP 编程，新的语言 C<span class=\"tag\">#，但长得非常通用面向对象，没有太多的入门门槛。不禁感叹外面世界的语言真是五花八门……但要说写界面好用还是声明式的，OOP </span>写界面特别过程式就，扭曲，痛苦，但无疑性能会更好。</p>",
            "url": "https://sansui233.com/posts/2025-01-05-2024-summary",
            "title": "2024 年的总结与分享",
            "summary": "怎么全在写游戏……",
            "date_modified": "2025-01-05T01:21:00.000Z",
            "date_published": "2025-01-05T01:21:00.000Z",
            "tags": [
                "Diary"
            ]
        },
        {
            "id": "https://sansui233.com/posts/2024-11-13-懒-快节奏与赛博巨婴",
            "content_html": "<p>1</p>\n<p>今天我想把一张图从 iPad 传到 iPhone 时，突然感觉很麻烦，因为需要打开并解锁，ipad，打开照片，再点击分享，点击AirDrop。</p>\n<p>然后猛然意识到，我是不是越来越懒了？</p>\n<p>对于懒与对于快节奏的追求本质上是一回事，都是简化简化再简化。我对简化的追求似乎有无止境的趋势，也喜欢比对市面上的效率工具，但这真的能提高生产力吗？</p>\n<p>从前拿着U盘传照片，会感叹信息化的便利。我学习计算机也想做让生活便利的事情，在更短的时间去体验到更多原本无法体验到的东西。后来用 qq 传照片，也感觉很方便。是什么时候开始连 AirDrop 都嫌弃太麻烦了呢？是不是对于我，只有意念传输才是终点？可那之后又能如何呢？</p>\n<p>2</p>\n<p>生活的意义来自于过程，而非终点。而衡量事物价格来自于终点，而非过程。</p>\n<p>毫无疑问，工作、劳动力是商品化的，意义与复杂性从不等于价格。不如说以找寻意义的方式寻找工作，很大程度上会面临吃不上饭。</p>\n<p>3</p>\n<p>从前会写书信，后来能随时短信联系变得好方便，一个月发几十块的短信。再后来即时通讯工具出来，联络更便宜更方便了，可人渐渐变成了24小时 oncall 状态，隔几个小时不看微信就会被说太慢了。大概一天只看两次微信的已经是异端了。</p>\n<p>也许和人有关，微信从一个方便联系感情的软件，变成了生产力工具，是随时随地接受需求的怪物。我起初能理解在微信同时加工作的人和亲人，之后变得难以理解，到现在又变得可以理解，感受是大不相同。从前是四海为友，后来是要把社交分开，到现在是感觉其实都是一回事，亲人不会更特别。</p>\n<p>当真的想要放松联络时，就会使用其他软件了。为什么 qq 依然在年轻人中流行？其实就是长辈不用。qq 的用户群有特别老的和特别年轻的，中间有明显的断层。</p>\n<p>4</p>\n<p>国人非常喜欢开发效率类工具，也喜欢记录。近几年新的效率工具，我所知道的绝大部分是国人在开发。可能与老中整体的环境相关。在我记忆中，如果一件事做得不好，就是要反省的，如果一件事做得好但慢，那就是没有效率。「效率」这个词似乎成为了魔咒。</p>\n<p>再加上不要自大、时刻谦逊、居安思危等等，于是养成了无法接受任何夸赞的性格。夸就是客套，真夸就是直冒冷汗。嗯，只要还面对着别人，没有一件事是我满意的。满意的东西现在会小心收藏起来，像 led 屏一样，不要轻易就被弄碎了。</p>\n<p>5</p>\n<p>人类造就科技成长，但又被科技裹挟，造就一个个被高度封装的便利化包裹的巨婴。从逻辑上说，国内早就已经进入赛博朋克，只是社会形态还没有跟上。</p>\n<p>这类抽象思考的空虚感令人害怕，时常觉得早已非人。也可能只是我的个人想法。希望脱离宏大叙事，去做出微小的选择。</p>\n<p>想画漫画了，草。</p>\n<p>写于2024年11月13日03时15分。</p>",
            "url": "https://sansui233.com/posts/2024-11-13-懒-快节奏与赛博巨婴",
            "title": "懒、快节奏与赛博巨婴",
            "summary": "科技为了便利，可便利是否有尽头",
            "date_modified": "2024-11-13T22:55:00.000Z",
            "date_published": "2024-11-13T22:55:00.000Z",
            "tags": [
                "Diary"
            ]
        },
        {
            "id": "https://sansui233.com/posts/2024-11-12-把drawio装修为简单美观的白板应用",
            "content_html": "<link rel=\"preload\" as=\"image\" href=\"https://img-cf.sansui233.com/imgs/2024/11/202411120511240.webp\"/><link rel=\"preload\" as=\"image\" href=\"https://img-cf.sansui233.com/imgs/2024/11/202411120511552.webp\"/><link rel=\"preload\" as=\"image\" href=\"https://img-cf.sansui233.com/imgs/2024/11/202411120516688.webp\"/><link rel=\"preload\" as=\"image\" href=\"https://img-cf.sansui233.com/imgs/2024/11/202411120513014.webp\"/><link rel=\"preload\" as=\"image\" href=\"https://img-cf.sansui233.com/imgs/2024/11/202411120514766.webp\"/><link rel=\"preload\" as=\"image\" href=\"https://img-cf.sansui233.com/imgs/2024/11/202411120511067.webp\"/><link rel=\"preload\" as=\"image\" href=\"https://img-cf.sansui233.com/imgs/2024/11/202411120515358.webp\"/><link rel=\"preload\" as=\"image\" href=\"https://img-cf.sansui233.com/imgs/2024/11/202411120516990.webp\"/><p><a href=\"http://draw.io\">draw.io</a> 是一个功能丰富的流程图绘制软件。此前写论文时我一直使用这个软件画图。在没有系统性的画图需要，转而变成了有时想要随手画矢量示意图后，这个软件启动交互流程步骤繁琐，我便极少使用它了。但在使用了 tldraw, excalidraw 后，又回到了 <a href=\"http://draw.io\">draw.io</a>，才发现这个软件的可定制性其实非常强，完全能满足随手画图的需要。这里记录一下如何把 draw.io 变成一个更适合打开即用的、默认效果更加现代的白板应用。</p>\n<p><img src=\"https://img-cf.sansui233.com/imgs/2024/11/202411120511240.webp\" alt=\"image.png\"/></p>\n<p>（草……windows 截图这边缘的黑框好丑啊！）</p>\n<h2>为什么是 draw.io</h2>\n<p>先对比一下适合需求的竞品（不想看请跳转下一节）：</p>\n<ul>\n<li><a href=\"https://www.microsoft.com/en-us/microsoft-365/visio/flowchart-software\">visio</a>: 收费，而且 mac 上没有。</li>\n<li><a href=\"https://www.tldraw.com/\">tldraw</a>, <a href=\"https://excalidraw.com/\">excalidraw</a>: 更适合作为 sdk 使用，作为成品有些过于简单，在易用的同时，想多做一点非流程图的东西又很复杂，中文字体也不契合其默认的手写设计。而且并没有打包为桌面 App，文件关联是个问题。</li>\n<li><a href=\"https://www.processon.io/\">processon</a>: 要登录</li>\n<li><a href=\"https://www.figma.com/\">figma</a>: 要用梯子登录</li>\n<li>powerpoint: ……我只是想偶尔画个示意图</li>\n<li>飞书: 每30天要扫码登录 ……我只是想偶尔画个示意图</li>\n<li>adobe illustrator: 没有常用预制样式库，漫长的启动时间，对于没接触过的人学习成本很高。</li>\n<li>无边记、goodnotes: 苹果移动端生态 only</li>\n</ul>\n<p><a href=\"http://draw.io\">draw.io</a> 没有上述的问题，但它由于设计之初不是个草图应用，所以：</p>\n<ul>\n<li>默认较为重型的 UI</li>\n<li>启动先选择储存位置，太慢了</li>\n<li>默认组件样式很丑，看起来只适合工控图</li>\n<li>有时会感觉曲线箭头很难调，怎么都不流畅</li>\n</ul>\n<p>我根据以上三点问题大致说一下如何改进。</p>\n<h2>更换UI布局</h2>\n<p>默认的 UI 较为传统的重型设计，熟悉这类UI是相当好用的，但按钮组过多会显得不够轻便。在 <code>其它→主题→外观</code> 中可以更换为其他的主题，有5套可用：经典、极简、简易、草图、atlas。</p>\n<p>我个人用得比较多的是「简易」，并且关掉了左侧栏形状库的栏，改为用顶栏，右侧格式栏在顶部有快速按钮展开。</p>\n<p>习惯 tldraw、excalidraw 的用户应该还是更适合「草图」主题，绑定了基础形状的快捷键。需要去手动调出格式栏。</p>\n<p><img src=\"https://img-cf.sansui233.com/imgs/2024/11/202411120511552.webp\" alt=\"image.png\"/></p>\n<h2>更改启动流程</h2>\n<p>默认情况下，启动时会弹出选择保存位置的框。新建画布时，又会先看到一大串模板的选择题，还得去想命名。但很多时候，随便画图是不需要保存的。</p>\n<p>在经典主题下，需要去「其它」→「显示开始画面」上取消勾选。在其它的主题下，则需要去菜单的「设置」→「配置」里取消勾选「显示开始画面」。</p>\n<p><img src=\"https://img-cf.sansui233.com/imgs/2024/11/202411120516688.webp\" alt=\"image.png\"/></p>\n<h2>配置默认样式</h2>\n<p>要做到更改默认样式，需要写 JSON 配置。尽管可以在侧栏按「设置为默认样式」，但只能当前打开的窗口生效，刷新、新开文档都会导致默认样式回到最初的样子。</p>\n<p>在经典主题下，需要通过 「其它」→「配置」打开，其它主题下，则是「设置」→「配置」。</p>\n<blockquote>\n<p><strong>我的配置已经上传到 <a href=\"https://gist.github.com/Sansui233/a7f5b88e35194f82b1a76a7e05df4f5c\">gist</a>。</strong></p>\n</blockquote>\n<p>JSON 写法参考了如下文档：</p>\n<ul>\n<li><a href=\"https://drawio-app.com/blog/customise-default-shape-libraries-templates-and-plugins-in-draw-io-for-confluence-cloud/\">Customise default shape libraries, templates and plugins in draw.io for Confluence Cloud - draw.io</a></li>\n<li><a href=\"https://www.drawio.com/doc/faq/configure-diagram-editor\">Configure the draw.io editor</a></li>\n</ul>\n<p><a href=\"http://draw.io\">draw.io</a> 的图形分为 vertex（顶点图形） 和 edge（箭头、线段）两类，选中按 <code>ctrl + e</code> 即可查看当前图形应用的样式。</p>\n<h3>配色与样式设计</h3>\n<p>整体采用的粗线条粗体，比较契合现代简约又活泼的趋势。edge 采用黑色，与高饱和的 vertex 非常好搭配。</p>\n<p>直接抄的无边记的颜色，有的有轻微的改动。不过无边记最印象化的水蓝色没有抄上去。</p>\n<p>默认的配色改为了最后一个蓝色。以下配色均可以在右侧的「格式栏」中找到并应用。</p>\n<p><img src=\"https://img-cf.sansui233.com/imgs/2024/11/202411120513014.webp\" alt=\"配色方案.png\"/></p>\n<h3>关于圆角矩形</h3>\n<p>现代设计中圆角矩形用得更多。对于圆角的弧度，可以通过属性 Arc Size 去调整。可以点击设置为默认样式，也可以配置到 JSON 里。</p>\n<p><img src=\"https://img-cf.sansui233.com/imgs/2024/11/202411120514766.webp\" alt=\"image.png\"/></p>\n<p>如果你使用的「经典」主题，需要自己选择圆角矩形的图形。在「草图」主题下，按 <code>D</code> 就是默认配置好的圆角矩形，相当简单。「简易」主题下的位置如图：</p>\n<p><img src=\"https://img-cf.sansui233.com/imgs/2024/11/202411120511067.webp\" alt=\"image.png\"/></p>\n<h3>关于曲线设置</h3>\n<p>曲线设置不对会变得很难调整，一张图说明大多数情况下的曲线操作与设置：</p>\n<p><img src=\"https://img-cf.sansui233.com/imgs/2024/11/202411120515358.webp\" alt=\"曲线.png\"/></p>\n<h3>想更换为手写风格？</h3>\n<p>在不选中任何东西的情况下，把右侧格式栏的草图勾选上即可，就可以获得类似 excalidraw 的手写风格啦！</p>\n<p>另外，如果没有自定义 JSON， 「草图」主题下的默认样式也是手写风格的。</p>\n<h3>关于默认字体（附网页用字号推荐）</h3>\n<p>JSON 中这几个字段设置默认字体。我默认英文是 Inter，中文是使用的系统黑体。文字大小我设置为了网页标准 16px。</p>\n<pre><code class=\"hljs language-json\"><span class=\"hljs-punctuation\">{</span>\n  <span class=\"hljs-attr\">&quot;customFonts&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\n    <span class=\"hljs-string\">&quot;Inter&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;pingfang sc&quot;</span>\n  <span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">,</span>\n  <span class=\"hljs-attr\">&quot;defaultVertexStyle&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span>\n    <span class=\"hljs-attr\">&quot;fontSize&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">16</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-attr\">&quot;fontFamily&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;Inter&quot;</span>\n  <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\n  <span class=\"hljs-attr\">&quot;defaultEdgeStyle&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span>\n    <span class=\"hljs-attr\">&quot;fontSize&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">16</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-attr\">&quot;fontFamily&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;Inter&quot;</span>\n  <span class=\"hljs-punctuation\">}</span>\n<span class=\"hljs-punctuation\">}</span>\n</code></pre>\n<p>另外介绍一下常用网页文字大小的规范，现代的美术设计由于自己屏幕很大，或者对标准视距缩放大小没太多概念，非常容易把字给设置得很小（点名星穹铁道）</p>\n<ul>\n<li>16px 为默认正文大小，但由于主要是考虑了希腊字母面积比较小，所以也有的中文网站会设置为 15px。</li>\n<li>14px 偏次级小段落、不重要的文字，长时间阅读会累。</li>\n<li>13px 为代码常用大小。</li>\n<li>12px 已经非常小了，是正常视距下最小可视大小，适合做脚注、引用。</li>\n</ul>\n<p>再小的字号不推荐作为内容性文本使用。</p>\n<h3>关于背景网格</h3>\n<p>在简易主题中默认关闭的，经典主题中可以通过配置 JSON 为默认关闭。关掉背景网格会显得比较现代化。</p>\n<pre><code class=\"hljs language-json\"><span class=\"hljs-punctuation\">{</span>\n  <span class=\"hljs-attr\">&quot;defaultGridEnabled&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-literal\"><span class=\"hljs-keyword\">false</span></span><span class=\"hljs-punctuation\">,</span>\n  <span class=\"hljs-attr\">&quot;defaultPageVisible&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-literal\"><span class=\"hljs-keyword\">false</span></span>\n<span class=\"hljs-punctuation\">}</span>\n</code></pre>\n<p>但还是有时可能需要开启网格，那就什么都不选中，右侧栏开启网格就可以了。</p>\n<h2>其他使用 Tips</h2>\n<h3>导出设置</h3>\n<p>导出时注意一下缩放。网页标准大小字体为 16px，编辑时画布 100% 缩放下一切正常。但是当导出为位图（jpg, png）时，需要根据你的显示器缩放进行放大，否则文字一定会糊。</p>\n<p>我的显示器为 150% 界面缩放，因此需要缩放到 150% 才能大概清晰，如果要让 4k 屏也看得无比清晰，最好导出 200% 缩放，且 dpi 尽量在 180 以上。</p>\n<p>另外可以直接框选后右键复制，不一定要导出。</p>\n<h3>一个文件画多张图</h3>\n<p>经常会遇到多张同系列图的需求。为此，你可以选择都画在一页上，要用时框选特定范围，右键复制为 png 。这样很适合边聊天边画图发给别人，但也会失去缩放、加白底、加白边等设置。至少你得打个组，把 16px 的文字放大后再复制，以确保结果不会糊。</p>\n<p><a href=\"http://draw.io\">draw.io</a> 也可以分页，建议是一页一个图，可批量导出。</p>\n<h3>从 Mermaid 生成图、嵌入 Notion</h3>\n<p>mermaid 是一种画流程图的代码，比较适合不想可视化排列对齐的强迫症。</p>\n<p>draw.io 可以在菜单中的「高级」使用 mermaid 生成图，下面的图就是导入 mermaid 生成的。</p>\n<p><img src=\"https://img-cf.sansui233.com/imgs/2024/11/202411120516990.webp\" alt=\"未命名绘图.png\"/></p>\n<p>由于 notion 无法画图，在 notion 我都是用的 mermaid，有点不好看但至少目的达到了。不过最近发现，<a href=\"http://draw.io\">draw.io</a> 的导出可以选择直接嵌入notion，点开还能进行编辑……实现方式是图像数据全部存放在了链接里……不得不说 draw.io 自主兼容性做得很强，从接入了那么多网盘就可见一斑。</p>\n<h3>自定义CSS</h3>\n<p>如果还是觉得 UI 太丑了，在 <a href=\"https://www.drawio.com/doc/faq/configure-diagram-editor\">Configure the draw.io editor</a> 中可以找到自定义 CSS 的部分（但我觉得 UI 排列上还是不错的，这足够了）</p>",
            "url": "https://sansui233.com/posts/2024-11-12-把drawio装修为简单美观的白板应用",
            "title": "把 draw.io 装修为简单且现代的白板应用",
            "summary": "装修无止境！",
            "date_modified": "2024-11-12T05:19:00.000Z",
            "date_published": "2024-11-12T05:19:00.000Z",
            "tags": [
                "工具"
            ]
        },
        {
            "id": "https://sansui233.com/posts/2023-09-29-windows-system-chinese-fonts-adjustment",
            "content_html": "<link rel=\"preload\" as=\"image\" href=\"https://img-cf.sansui233.com/imgs/2024/08/202408190158527.webp\"/><link rel=\"preload\" as=\"image\" href=\"https://img-cf.sansui233.com/imgs/2024/08/202408190318888.webp\"/><link rel=\"preload\" as=\"image\" href=\"https://img-cf.sansui233.com/imgs/2024/07/202407260100518.webp\"/><blockquote>\n<p>以下仅适用于低于 4k 缩放 200% 的显示器</p>\n</blockquote>\n<p>微软雅黑作为随着 Windows7 出现的字体，加上遥遥领先（？）的 ClearType，在当时的 1080p 显示器上十分清晰易读。</p>\n<p>但如今的显示器分辨率越来越高，旧版微软雅黑的设计存在着明显的缺陷。</p>\n<p>一是其字形设计并不平衡，中宫过大，有的字形可以以难看来形容；二是微软雅黑字形只在 4K 屏 200% 缩放（以上的配置）上有着较好的显示效果。</p>\n<p>微软曾经设计过“另一版的微软雅黑”，即 Noble Scarlet，但并没有在正式的系统中使用。这一版字体设计依然中宫偏大，但相对老版收敛了不少，平衡了一些。</p>\n<p>另外，如果你不巧像我一样用着 2K 或 2.5K 屏，</p>\n<ul>\n<li>在 24寸时，100% 缩放字体比较合适，但与 16 寸 1080p 显示器差不多清晰度，不过屏幕可用空间更大。</li>\n<li>在 21 寸时，100% 缩放字体会偏小，比较锻炼眼睛。150% 缩放字体大小比较合适，效果更细腻，但字型会比较怪，且屏幕可用空间与 1080p 相同。</li>\n<li>在 16 寸时，150% 缩放字体稍微偏小，效果比较细腻，但非整数倍缩放+ClearType 的加持下，一些像素被吞掉，笔画的间距不平衡，有种“ windows 特有的字被虫噬的美”。</li>\n</ul>\n<p><img src=\"https://img-cf.sansui233.com/imgs/2024/08/202408190158527.webp\" alt=\"字形\"/></p>\n<p>可以看到，上图的 100% 200% 缩放没有字形变形问题，可以说微软雅黑小字优化是考虑的 100% 缩放。100% 缩放显得糊则是因为图片放大放大倍率过高，实际不会有糊，而是有锯齿感。</p>\n<p>150% 缩放会由于 clearType 的“锐化”导致字形变化，不知道的还以为换了个字体。如果是125%、175%的缩放，字体变形更加糟糕。</p>\n<p>造成缩放问题的原因大概可以用下图进行简要解释：</p>\n<p><img src=\"https://img-cf.sansui233.com/imgs/2024/08/202408190318888.webp\" alt=\"缩放\"/></p>\n<p>Mac 上的 Retina 渲染相当于 4k 200% 缩放起步。而 windows 下， 2k-2.5k 的屏幕都在 200% 以下的缩放中挣扎。如果软件没有适配高分屏，没有 clearType，强制进行双线性缩放（常见于图片UI），就会显得非常糊。想体验这样的糊，可以下载旧版的原神启动器。</p>\n<h2>需要准备</h2>\n<ul>\n<li>\n<p><strong>Noble Scarlet</strong>  替换系统的微软雅黑。由于 Noble Scarlet 是一个未完成的字体，普遍使用的是社区修正版，以下是资源参考。</p>\n<ul>\n<li><a href=\"https://bbs.pcbeta.com/viewthread-1960120-1-4.html\">pcbeta</a></li>\n<li><a href=\"https://www.bilibili.com/read/cv6059905/\">bilibili</a></li>\n</ul>\n</li>\n<li>\n<p>系统字体替换工具：搜索 “<a href=\"https://www.fishlee.net/soft/SysFontReplacer/\">字体替换工具 by 随风飘扬</a>”。替换完后重启，否则可能有缩放错误。另外，github 上有一个非侵入式的系统字体替换工具 <a href=\"https://github.com/Tatsu-syo/noMeiryoUI\">noMeiryoUI</a>，可惜换不全 windows 11，只是作为预览不同字体在系统上的效果倒是个很不错的工具。</p>\n</li>\n<li>\n<p><a href=\"https://www.mactype.net/\"><strong>MacType</strong></a> 改善 ClearType 的虫噬渲染方式带来的不均匀，使用后提升非常非常大。</p>\n</li>\n<li>\n<p><strong><a href=\"https://source.typekit.com/source-han-serif/cn/\">思源宋体</a></strong>：推荐将浏览器的 Serif 字体设置为此字体。默认的宋体真的，不论中文英文，都很丑……只适合打印。</p>\n</li>\n</ul>\n<h2>常用正文黑体简述</h2>\n<p><img src=\"https://img-cf.sansui233.com/imgs/2024/07/202407260100518.webp\" alt=\"\"/></p>\n<h3>苹方</h3>\n<p>苹方是一款设计上很优秀的字体，其间架结构、中宫非常平衡，既兼顾了传统的汉字笔画细节又有规整而现代的几何化，间距合理，阅读起来非常舒适。</p>\n<p>但是……苹方的设计缺字重。</p>\n<p>在设计上，苹方没有 Heavy 字重（<a href=\"https://support.apple.com/en-us/103203\">参考</a>）。而在<a href=\"https://github.com/paraself/PingFang-Fonts\">流行的 github 苹方字体仓库</a>中，则是将 Bold 字重映射到了 Heavy，而将原本的Medium 映射到了 bold。虽然这个问题不是苹果设计的导致的，而是一个再次分发时的错误，但致使目前网上能搜索到的第三方仓库的苹方字体整体字重均偏细。</p>\n<p>另外，苹方在 2.5K 屏上表现非常糊，苹方问世时已经进入了 Retina 屏的时代，没考虑过在低 PPI 屏幕上的表现（不是4K屏缩放200%都别用）。</p>\n<p>第三，苹果设备的显示的西文字体是 <a href=\"https://zh.wikipedia.org/zh-hans/San_Francisco_(2014%E5%B9%B4%E7%9A%84%E5%AD%97%E4%BD%93)\">San Francisco</a>，不是苹方。在 <a href=\"https://lrd.im/blog/2022-01-17\">细数 Pingfang SC 的七宗罪</a> 中，也提到仅使用苹方导致不同设备字体 fallback 的不一致的问题。而作为系统字体里的其他问题，例如缺失本地化的字型，也是大部分字体所缺乏的，这已经不仅仅是一个字体问题，而是和字体相关的和 UI 技术标准化问题，难以仅通过字体解决。而无比例数字、冒号不垂直居中、没有垂直标点等细节，则都是因为苹果显示标点数字用的 SF 字体，苹方在此类字符上算是基本能用，但缺少多种场景下的细节。</p>\n<p>其他资源： <a href=\"https://www.figma.com/community/file/1089832205783108371\">Pingfang for windows - Figma</a></p>\n<p>另外，苹方是有版权限制，以下字体除了思源黑体，和大厂的开源黑体，均不可免费商用。</p>\n<h3>思源黑体系列</h3>\n<p>思源黑体(Noto sans) 是 google 的开源可商用字体，用于 Android 系统，在开源可商用的的黑体其质量无可替代。</p>\n<p>更纱黑体是思源黑体的衍生，修改了西文部分，相比思源黑体上更符合作为 无明显风格特征的系统字体，带 hinting 在 1080p 和 2.5k 下都能保证良好的清晰度。</p>\n<p>但是，思源黑体系列设计相比于国产的商用字体并不能算好，有时间架结构比较怪异，字形的细节不太统一，比如“用”字明显矮了一截，整理风格上给人一种不稳定感。同时也不是一个大气的字体，比如口字旁处理对于黑体而言偏小，“用”字矮了一些，但是在宋体设计上，“用”字矮的这一截反而让字体看起来平衡。而一个系列的字体衬线、非衬线的统一感来源于其比例，个人理解为思源/更纱系列是优先考虑宋体的字形，和黑体的比例有一定的结合。整体而言还是宋体的设计更加优秀。</p>\n<p>相对而言更纱黑体更适合作为系统字体，有着合理的 hinting。思源黑体是不太适合低 ppi 屏的，它的 Regular 字重看起来像 Bold。</p>\n<h3>方正兰亭系列（微软雅黑）</h3>\n<p>Noble Scarlet （社区版）常规体是新设计中宫收窄的微软雅黑，而粗体是方正兰亭黑 Pro，因此在加粗时，字体明显会变小一圈。</p>\n<p>微软雅黑系列字体在标点处理上很差，最直观的就是全角引号，太像半角的处理方式，很难看出前引号与后引号的区别。其实我在写这一篇文的时候，换了 Typora 的字体，才发现前后引号全打反了……</p>\n<p>方正兰亭黑 Pro 想对于两版微软雅黑都有着更小的中宫，字形设计中正。但也由于稍小了一些，在低 ppi 屏的小字上笔画更容易显得不太均匀，渲染效果不太好。另外使用此字体需要相比于其他所有字体更大的行距，因为其较小的中宫，字间距显得相对宽了。</p>\n<h3>汉仪旗黑系列</h3>\n<p>近年来的国产安卓厂商字体都是汉仪旗黑的衍生，代表阿里的普惠体、鸿蒙体、小米的字体、Oppo的字体。</p>\n<p>这系列字体间架结构合理，但笔画上更加激进，减弱了起笔与收笔的的传统突出，以追求几何感与现代的科技感。在观感上，这样规矩的方形会使得字体相比方正系列更加圆润，多了现代感但少了汉字的人情味，用于阅读小说时尤其明显。</p>\n<p>仅字形而言，作为 UI 是非常不错的。不过 Misans 渲染出来明显偏粗，我没有测试其他同系列字体是否也有这样的问题。</p>\n<h2>改掉 Windows 的默认中文无衬线字体</h2>\n<p>很多无法分别修改中英字体的 windows 原生应用，当只设置了英文字体时，显示的中文是新宋体（SimSun），比如 vs studio。原因在于系统里的 Microsoft Sans-serif 字体名，回落到的第一个字体就是新宋体……难以想象微软雅黑出了十多年了还有这样的问题。</p>\n<p>解决办法：</p>\n<ul>\n<li>winkey + R, 输入 regdit，进入 windows注册表</li>\n<li>进入 <code>HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\FontLink\\SystemLink</code></li>\n<li>把 Microsoft Sans Serif 的值中 SIMSUN.TTC 那一行去掉。这样默认的无衬线体就会往后 fallback 到系统的微软雅黑上。</li>\n</ul>\n<hr/>\n<p>创建于 2023-09-29 02:25:44</p>\n<p>更新于 2024-08-19 01:45:31</p>",
            "url": "https://sansui233.com/posts/2023-09-29-windows-system-chinese-fonts-adjustment",
            "title": "Windows 调整之中文字体",
            "summary": "让 windows11 字体更好看的一些设置与字体浅谈",
            "date_modified": "2024-08-01T18:08:00.000Z",
            "date_published": "2024-08-01T18:08:00.000Z",
            "tags": [
                "工具"
            ]
        },
        {
            "id": "https://sansui233.com/posts/windows-zsh-conf",
            "content_html": "<p>长久以来，遇到 bash 脚本会临时切 git-bash 中的 bash。由于用的语言都有自己的包管理器，倒也一直够用。但是最近涉及到一些 c++，由 git-bash 提供的最小化环境东西缺得太多，几乎不能当个日常 shell 用，也没有 pacman 包管理，最后决定还是单独安装 msys2。</p>\n<p>git-bash 和 msys2 同时安装不会冲突。msys2 是独立的 home 目录，而 git-bash 是与 windows 当前用户通用的。我本来想卸载 git-bash，但由于我现在还是用 powershell，最终发现 git-bash 不能卸载。一是 posh-git 只支持 git-bash 的 git；其次是，astro-nvim 中的一些插件需要 <code>git.exe</code> 在环境变量下，使用 alias 链接的 git 不行，而手动加环境变量会把 git 以外的程序也加进去，造成 msys2 的工具与 powershell 本身工具的冲突。</p>\n<p>想来想去，决定保留 git-bash 到最小化的状态，当成 powershell 的插件用。unix-like shell 以及相应的包管理还是 msys2。</p>\n<h2>安装 msys2</h2>\n<p>见 <a href=\"https://www.msys2.org/\">https://www.msys2.org/</a> 。安装过程没什么好说的，唯一要注意的在于安装目录的权限必须是当前用户可以完全控制，否则后续各种包的安装都会有一大堆问题。如果因为强迫症安装到 Program Files 下，则需要手动添加当前用户的权限。</p>\n<h3>软链接问题</h3>\n<p>windows 的软链接本来也是个很麻烦的问题。到 msys2 下，还多了一个软链接方式兼容问题。msys2 默认是 <code>ln -s</code> 是复制，要用 windows 风格的软链接，可以改安装目录下的各种 <code>.ini</code> 文件中的配置。</p>\n<pre><code>MSYS=&quot;winsymlinks:lnk&quot;\n</code></pre>\n<h2>zsh + zi</h2>\n<h3>zsh 的安装</h3>\n<pre><code class=\"hljs language-bash\">pacman -S zsh\n</code></pre>\n<p>老实说个人觉得和 linux 上的 zsh 相比还是差了一大截，用起来和 bash 感觉差不多。只是 zsh 插件管理的选择比较多</p>\n<h3>zi 的安装</h3>\n<p>关于 zsh 插件管理，之前在 git-bash 上我也安装了 oh-my-zsh，但是环境原因，遇到的 bug 着实太多，基本不用。另外，最大的问题是启动太慢，每次启动长达 10 秒。我分析了一下初始化脚本的执行时长，发现拖慢速度的罪魁祸首是初始化命令补全（就不能异步吗啊！）当然用 mac 时 omz 也有点慢，但显然没有 msys2 里这么离谱。</p>\n<p>下午吐槽这个事情后，Antarx 说他换 zi 了。我试了下，确实很快，从没超过3s，令人偷税。</p>\n<ul>\n<li>zi 的安装：<a href=\"https://wiki.zshell.dev/docs/getting_started/installation\">https://wiki.zshell.dev/docs/getting_started/installation</a></li>\n</ul>\n<p>安装过程最好在 msys2 的 GUI 终端下进行，因为需要登录的默认目录是在 home 的当前用户下。但这里又有另一个问题 —— msys2 不带 git。如果系统有另外安装 git，想复用，可以 cmd 启动 zsh，不指定启动的目录，指定继承环境变量。</p>\n<pre><code class=\"hljs language-cmd\">C:\\\\msys64\\\\msys2_shell.cmd -defterm -no-start -ucrt64 -use-full-path -shell zsh\n</code></pre>\n<h3>zi 的配置与插件</h3>\n<p><a href=\"https://wiki.zshell.dev/docs/getting_started/installation\">安装Wiki</a> 在不断更新，检查最新版的安装方法。</p>\n<p>安装好后，<code>.zshrc</code> 里添加如下，写好重启 zsh 即可。</p>\n<pre><code class=\"hljs language-bash\">$ vi ~/.zshrc\r\n\r\n<span class=\"hljs-comment\"># zsh</span>\r\n<span class=\"hljs-built_in\">setopt</span> AUTO_PUSHD\r\n\r\n<span class=\"hljs-built_in\">export</span> CLICOLOR=1\r\n<span class=\"hljs-built_in\">export</span> LSCOLORS=ExGxFxdaCxDaDahbadeche\r\n<span class=\"hljs-built_in\">zstyle</span> <span class=\"hljs-string\">&#x27;:completion:*&#x27;</span> list-colors <span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">${(@s.:.)LS_COLORS}</span>&quot;</span>\r\n<span class=\"hljs-built_in\">alias</span> <span class=\"hljs-built_in\">ls</span>=<span class=\"hljs-string\">&#x27;ls --color=auto&#x27;</span>\r\n<span class=\"hljs-built_in\">alias</span> la=<span class=\"hljs-string\">&#x27;la --color=auto&#x27;</span>\r\n\r\n<span class=\"hljs-comment\"># zi</span>\r\n<span class=\"hljs-built_in\">typeset</span> -A ZI\r\nZI[BIN_DIR]=<span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">${HOME}</span>/.zi/bin&quot;</span>\r\n<span class=\"hljs-built_in\">source</span> <span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">${ZI[BIN_DIR]}</span>/zi.zsh&quot;</span>\r\n\r\n<span class=\"hljs-built_in\">autoload</span> -Uz _zi\r\n(( <span class=\"hljs-variable\">${+_comps}</span> )) &amp;&amp; _comps[zi]=_zi\r\n<span class=\"hljs-comment\"># source &lt;(curl -sL init.zshell.dev); zzinit</span>\r\n\r\n\r\n<span class=\"hljs-comment\"># 插件</span>\r\n<span class=\"hljs-comment\"># 提前运行一次 zi ice pick&quot;async.zsh&quot; src&quot;pure.zsh&quot;</span>\r\nzi light sindresorhus/pure \r\nzi light agkozak/zsh-z  <span class=\"hljs-comment\"># 不能用 eval &quot;$(zoxide init zsh)&quot; 会冲突</span>\r\nzi snippet OMZP::git\r\nzi light zsh-users/zsh-completions\r\n<span class=\"hljs-comment\"># 提前运行一次 zi ice wait lucid atload&#x27;_zsh_autosuggest_start&#x27;</span>\r\nzi light zsh-users/zsh-autosuggestions \r\n<span class=\"hljs-comment\"># 提前运行一次 zi ice wait lucid atinit=&#x27;zpcompinit&#x27;</span>\r\nzi light zdharma/fast-syntax-highlighting\r\n\r\n\n</code></pre>\n<h2>Windows Terminal 设置</h2>\n<p>在设置里改 json，加相应的 profile。可以使用 <code>-use-full-path</code> 继承 windows 系统的环境变量。</p>\n<pre><code class=\"hljs language-json\"><span class=\"hljs-punctuation\">{</span>\r\n    <span class=\"hljs-attr\">&quot;commandline&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;C:\\\\msys64\\\\msys2_shell.cmd -defterm -here -no-start -ucrt64 -use-full-path -shell zsh&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-attr\">&quot;guid&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;{c420e0af-28d9-4742-a6b8-83d5fcf424e9}&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-attr\">&quot;icon&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;C:\\\\msys64\\\\ucrt64.ico&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-attr\">&quot;name&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;msys2 zsh&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-attr\">&quot;startingDirectory&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;%USERPROFILE%&quot;</span>\r\n<span class=\"hljs-punctuation\">}</span>\n</code></pre>\n<h2>Vscode Terminal 设置</h2>\n<pre><code class=\"hljs language-json\"><span class=\"hljs-attr\">&quot;terminal.integrated.profiles.windows&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span>\r\n    <span class=\"hljs-attr\">&quot;MSYS2 zsh&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span>\r\n        <span class=\"hljs-attr\">&quot;path&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;C:\\\\msys64\\\\msys2_shell.cmd&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n        <span class=\"hljs-attr\">&quot;args&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span><span class=\"hljs-string\">&quot;-defterm&quot;</span><span class=\"hljs-punctuation\">,</span><span class=\"hljs-string\">&quot;-here&quot;</span><span class=\"hljs-punctuation\">,</span><span class=\"hljs-string\">&quot;-no-start&quot;</span><span class=\"hljs-punctuation\">,</span><span class=\"hljs-string\">&quot;-ucrt64&quot;</span><span class=\"hljs-punctuation\">,</span><span class=\"hljs-string\">&quot;-use-full-path&quot;</span><span class=\"hljs-punctuation\">,</span><span class=\"hljs-string\">&quot;-shell&quot;</span><span class=\"hljs-punctuation\">,</span><span class=\"hljs-string\">&quot;zsh&quot;</span><span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">,</span>\r\n        <span class=\"hljs-attr\">&quot;env&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span> <span class=\"hljs-attr\">&quot;MSYSTEM&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;UCRT64&quot;</span> <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n        <span class=\"hljs-attr\">&quot;overrideName&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-literal\"><span class=\"hljs-keyword\">true</span></span>\r\n    <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n<span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\n</code></pre>\n<h2>Mintty 设置</h2>\n<p>Mintty 是 msys2 里默认的终端 GUI，默认 shell 是 bash。修改 <code>mingw64.ini</code> 为如下内容。</p>\n<pre><code>MSYS=winsymlinks:lnk\r\nMSYS2_PATH_TYPE=inherit\r\nMSYSTEM=UCRT64\r\nSHELL=/usr/bin/zsh\n</code></pre>\n<h2>npm设置</h2>\n<p>如果有使用 npm 进行包管理，继承自环境变量的 npm 补全时会报错。需要设置为</p>\n<pre><code class=\"hljs language-shell\"><span class=\"hljs-meta prompt_\">$ </span><span class=\"bash\">npm config edit</span>\r\nscript-shell=C:\\msys64\\usr\\bin\\bash.exe\r\nshell=C:\\msys64\\msys2\\usr\\bin\\bash.exe # 重要\r<span class=\"hljs-meta prompt_\">\n$ </span><span class=\"bash\">npm config list</span>\n</code></pre>\n<h2>conda 设置</h2>\n<p>如果有使用 conda 进行 python 开发，继承自环境变量的 conda 默认初始化脚本也有问题……从 Github 上查到的解决方法……</p>\n<pre><code class=\"hljs language-shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"bash\">&gt;&gt;&gt; conda initialize &gt;&gt;&gt;</span>\r<span class=\"hljs-meta prompt_\">\n# </span><span class=\"bash\">!! Contents within this block are managed by <span class=\"hljs-string\">&#x27;conda init&#x27;</span> !!</span>\r\nif [ -f &#x27;/c/Users/me/miniconda3/Scripts/conda.exe&#x27; ]; then\r\n    #eval &quot;$(&#x27;/c/Users/me/miniconda3/Scripts/conda.exe&#x27; &#x27;shell.zsh&#x27; &#x27;hook&#x27;)&quot;\r\n    eval &quot;$(&#x27;/c/Users/me/miniconda3/Scripts/conda.exe&#x27; &#x27;shell.zsh&#x27; &#x27;hook&#x27; | sed -e &#x27;s/&quot;$CONDA_EXE&quot; $_CE_M $_CE_CONDA &quot;$@&quot;/&quot;$CONDA_EXE&quot; $_CE_M $_CE_CONDA &quot;$@&quot; | tr -d \\x27\\\\r\\x27/g&#x27;)&quot;\r\nfi\r<span class=\"hljs-meta prompt_\">\n# </span><span class=\"bash\">&lt;&lt;&lt; <span class=\"hljs-string\">conda initialize &lt;&lt;&lt;</span></span>\n</code></pre>\n<h3>ssh配置共用</h3>\n<p>如果有多个 ssh 账户的密钥，最好是软链接一下配置目录。注意需要前面的修改软链接方式，否则还是去资源管理器手动软链接吧。</p>\n<pre><code class=\"hljs language-shell\">ln -s /c/Users/me/.ssh ~/.ssh\n</code></pre>\n<h2>参考</h2>\n<p><a href=\"https://hustlei.github.io/2018/11/msys2-for-win.html#%E5%AE%89%E8%A3%85git%E5%92%8Cvim\">msys2-for-win</a></p>\n<p><a href=\"https://sdl.moe/post/zsh-conf/\">https://sdl.moe/post/zsh-conf/</a></p>",
            "url": "https://sansui233.com/posts/windows-zsh-conf",
            "title": "Windows 命令行相关配置之 msys2+zsh+zi",
            "date_modified": "2024-03-15T20:35:00.000Z",
            "date_published": "2024-03-15T20:35:00.000Z",
            "tags": [
                "工具"
            ]
        }
    ]
}