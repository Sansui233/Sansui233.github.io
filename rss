<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Sansui's blog</title>
        <link>https://sansui233.com</link>
        <description>记录学习和生活的个人博客</description>
        <lastBuildDate>Thu, 11 Sep 2025 04:06:54 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>zh-CN</language>
        <copyright>All rights reserved 2022, Sansui</copyright>
        <atom:link href="https://sansui233.com/rss" rel="self" type="application/rss+xml"/>
        <item>
            <title><![CDATA[碎碎念2025]]></title>
            <link>https://sansui233.com/memos</link>
            <guid>https://sansui233.com/memos?id=2025-09-11 20:04</guid>
            <pubDate>Thu, 11 Sep 2025 12:04:00 GMT</pubDate>
            <content:encoded><![CDATA[<h2>2025-09-11 11:49:40</h2>
<p>考虑给 Memo 前端加个上锁的功能（完全防不住真正想要搞破解的人，笑死）。如果把 md 本身做许多的格式化约定后，就会变得不通用了，还丑。但可以不是这样的。在小说里，已经有大量“模拟程序”的文风，他们并没有影响可读性，只是提供了相应的信息而已。</p>
<p>Yaml 头的问题是，视觉上与正文完全的割裂，输入太麻烦。作为元数据是个非常好的方案，对于写的人来说很痛苦，却不能很好地成为文章本体可阅读的一部分，再加上一定在开头先加这个东西，直接打断写东西的思绪。要不是 Obsidian 有模板功能我早摆烂了……现在也已经摆烂了，完全不在那边写东西。</p>
<p>已经想好了，大概是这样，加在最后当脚注一类的存在。</p>
<pre><code class="hljs language-md">memo内容

------
lock: password
</code></pre>
<h2>2025-09-07 17:26:16</h2>
<p><a href="https://jetgirl.art/blogs-used-to-be-very-different/">博客曾经是不同的 - JetGirlArt</a></p>
<p>那我确实还是很多年前用博客的习惯啊……只不过已经没有了以前那样可以自己装修的博客平台，因此变成了自己手搓装修（然后一堆组件都还没写完，笑死）。诚然博客可以用于推销自己，但与其用于推销，更希望是，「很高兴认识你，回踩回踩~」</p>
<h2>2025-08-24 06:03:08</h2>
<p>入坑 OOR 的第一首歌是残响的现场，et cetara... 今天感觉总是很难过，各种情绪憋在一起，极限压缩为一个设置了密码的巨大压缩包的 zip。想起很久很久没有听歌了，又拿这首歌出来听……但因为现在也懂了嘶吼怎么唱了，一直在注意技巧了，反而没有当初听到的感觉了……不过还是爽的，oor 的现场真是解压……</p>
<p>我是幸运的，可我在做的一直都是让自己变得更加不幸的事。我无法回头了。</p>
<h2>2025-08-08 03:48:28</h2>
<p>看到一个说法。就是说套壳和写茴这个事情，其实让人感受到这个世界正在蓬勃的发展就算是作用了。大部分事情要说价值感，我觉得都没太有，在风口过后会回到没有膨胀的状态。但大家一窝蜂地凑热闹会让人觉得世界在前进。某种方面和经济的流通真是类似……本质上交易其实是守恒的，但实际又不是一种零和博弈，反而大环境感觉很重，总会有所有人都感觉经济好、所有人都感觉经济差的时候，不过是和供需有关。08 年的金融危机给人的死感，远没有现在多，这个真不是过去的记忆有美化，一个时代的心态可以从当时流行的文化作品中窥见。所有的创作者其实也是记录者，而一窝蜂凑热闹的人会构成当下的大环境的内核。</p>
<p>很遗憾我是无法再去相信了。这不意味着我会停止折腾和写茴，而是类似的事情做得再多也无法认为他们的价值真的存在，我其实仅仅是因为自身的喜好和生活需求所做这一切，而为自己做事是既沉迷同时又觉得没有价值的。为什么是这种想法？不好意思这是天生的，大概人祖先是群居动物吧。</p>
<p><a href="https://www.nytimes.com/2025/07/18/opinion/ai-chatgpt-school.html#">Opinion | I Teach Creative Writing. This Is What A.I. Is Doing to Students. - The New York Times</a></p>
<p>💬 浪漫的是人类本身，雀之前真的把 AI 当人聊天，惊异于AI的回复，久了也失望于AI的回复。而我，以上都没有，只会从各种话语的间隙感受到这个是基于注意力机制的概率模型。注意力机制的理念几乎可以等同于人在 Ne-Ti 维度上的思考方式了，算法架构可以算做一种 DNA，但还是没有人味，因为没有人类在其他维度的数值是 0。</p>
<p><a href="https://onevcat.com/2025/08/claude-code/">一个半月高强度 Claude Code 使用后感受 | OneV&#x27;s Den</a></p>
<p>💬 我自己觉得</p>
<ul>
<li>前端代码质量算能用。流行程度在中等以下的技术栈=垃圾堆，对不了一点</li>
<li>必须参考AI自己分析的架构文件，人为重构修改了必须重新分析，否则垃圾。这会导致极其消耗 prompt。贵不奇怪。</li>
<li>我一直觉得模型真的要用得做好持续学习（Continue Learning），而不是当前训练好一个大模型，让做应用的靠超长上下文 predict。当然，如果上下文能无限长还让推理保持同样的效果，那怎么不算一种持续学习呢。某种意义上来说也算是一种伪概念。</li>
</ul>
<h2>2025-07-31 07:55:21</h2>
<p>感觉现在来说，除了 M 芯片，卡笔记本电脑性能上限的不是 CPU 也不是 GPU，而是散热和噪声……</p>
<h2>2025-07-31 02:40:38</h2>
<p><span class="tag">#字体 </span>IBM Plex Mono 也好看诶。IBM Ples Sans 本来就够好看了。</p>
<p>另外这个 Overview <a href="https://marketplace.visualstudio.com/items?itemName=ARRRRNY.zed-one-theme">ZED One Theme - Visual Studio Marketplace</a> 写得太抽象了，草，没见过这么好笑的。</p>
<h2>2025-07-25 00:48:53</h2>
<p>#动画</p>
<p><strong>灵笼</strong>：6分。看了一下第一季，不是很喜欢，再看时发现之前姐给我看过三集。一是画风，我不太理解为什么 3D 怪兽设计都爱长得和侏罗纪再现一样再加上器官质感（早年CG角色设计书也是这么讲生物拼接，实在喜欢不起来），二是开头就全是大场面特效动作戏不走剧情，后面马克的剧情推起来还行，虽然还是俗了点，几个角色的性格和剧情都很重的商业套路化的，有点腻。</p>
<p><strong>罗小黑战记2</strong>：9分。看完把1和tv又看了一遍。罗小黑还是太正常了，好久没见过动画角色的性格这么像普通生活中的正常人的了，没有吵架没有咯噔的很舒服的成年人卡通动画。然后打戏很爽很精彩，拆飞机那场戏惊到我了。笑点还是很足，维持着冷幽默的风格。剧情上相比1是要稍微弱一些的，但有的地方还是真的很好笑。</p>
<p><strong>时光代理人</strong>：7.5分，在看。这种委托式单元剧会让我想起哑舍。现在感受是卖男同和女同都卖得太明显了……每一集的主题都是比较常见，但又有一些创新，有一种又套路又不套路的感觉，有时会被吸引一下，质量还算不错。这动画给我最大的感觉时找男角色参考经常看到，因为帅。</p>
<p>至于凡人修仙啥的我就补不了了，云开飞机也学不了，还有近年来不问三九的几篇文。半年来我对生活的感知力下降地很严重，最近靠某剧的强刺激找回了一点。但还是差得太远了。我必须工作，必须，感觉像在生活。</p>
<p>看到木头说写了几十个剧本了。真好啊。剧本是这样的，能写的人一直能写。如果笛子做绿蓝时不要那么急着放出全部，那么多故事是够她出一辈子的。剧本在构思出来的瞬间会让人开心，只是要花时间专门去构思，平时不编剧靠灵感一现想出绝妙剧情的事情不存在，连贯不起来。</p>
<p>没有生活，想看看有生活感的镜头与图。</p>]]></content:encoded>
            <category>Diary</category>
        </item>
        <item>
            <title><![CDATA[uv 管理 conda 项目依赖]]></title>
            <link>https://sansui233.com/posts/2025-07-24-embed-python-with-uv</link>
            <guid>https://sansui233.com/posts/2025-07-24-embed-python-with-uv</guid>
            <pubDate>Thu, 24 Jul 2025 20:12:00 GMT</pubDate>
            <description><![CDATA[沐神都解决不了的……]]></description>
            <content:encoded><![CDATA[<link rel="preload" as="image" href="https://img-cf.sansui233.com/imgs/2025/07/202507242029977.webp"/><h2>conda 的问题</h2>
<p>Python 新项目使用 uv 管理容易，但是总是有一些老项目不用。 conda 包管理一直以来都是 AI 的标配。我用 python 99% 都是在扒别人代码运行。这就导致了我运行了多少个项目，就装了多少份 torch……硬盘再大也经不起十几次折腾。</p>
<p><img src="https://img-cf.sansui233.com/imgs/2025/07/202507242029977.webp" alt="沐神都解决不了的"/></p>
<p>conda 的问题在于</p>
<ol>
<li>requirements.txt <strong>全手写</strong>！很多人可能忘更新配置，导致扒拉下来缺库运行不了，先解决一个小时的依赖问题再说。</li>
<li>依赖和安装顺序强相关。比如项目需要更新的 numpy，但你可能要装个别的项目的库，python 发了论文和仓库就跑的项目是很多的。安装一个旧项目导致之前安装 numpy 被卸载，然后整个项目就垮掉。这种情况相当之多，又解决两个小时的依赖问题。</li>
<li>（至少我不愿意看到）电脑里十几个相同版本的 torch 和 cuda。当时的硬盘还只有 256G，多装几个 torch 无法接受，嗯……</li>
</ol>
<p>直到现在都还是这样的，大家主打一个能跑完实验就行。包的更新是激进的，包管理是落后的。在几年前有人说用 PDM，后面有 poetry。这两是不用再手写 <code>requirements.txt</code> 了，依赖也会自动 resolve 不会覆盖来覆盖去的，但还是会装十几个 torch。直到 uv 开始用硬链接进行包管理。</p>
<h2>uv 之于 conda 项目</h2>
<p>uv 接管 python 界的依赖管理按理说已经没什么问题。但实际情况是，很多项目还是在用 conda。除非哪天 torch 和 HF 都把 uv 设置为首推，否则就得一直与  conda 存在的问题战斗。</p>
<h3>1. 不提供 venv 的项目</h3>
<p>用于研究的项目一般都是不提供的打包好的环境的，主要是太大了，每个人设备情况也不一样。所以下载后第一件事是</p>
<pre><code class="hljs language-sh">uv venv
./.venv/Script/activate
</code></pre>
<p>如果这个项目不再更新了，或者是打算迁移到 uv，可以直接使用 uv 的方式管理依赖。uv 会自动维护 <code>pyproject.toml</code> 和 <code>uv.lock</code> 文件。</p>
<pre><code>uv add -r requirements.in -c requirements.txt
</code></pre>
<p>如果这个项目，他还在更新，你时不时就得去拉一下分支。这时候最好用 <code>uv pip</code> 。至于依赖混乱问题，听天由命吧。<del>跑得起来就得了</del></p>
<pre><code>uv pip install -r requirement.txt
</code></pre>
<h3>2. 提供 venv 的项目</h3>
<p>提供 venv 的项目通常是给人用的，b 站的整合包一大堆。这种已经配好环境的项目也意味着你最好只用 pip。通常还是非常原始地调用 pip</p>
<pre><code>./.venv/python -m pip install xxx
</code></pre>
<p>……等于说又开始了安装十几份 torch 的依赖管理模式。用 uv 是可以重复利用缓存的。这个时候 uv 的问题在于无法接管 python 环境，需要设置一下环境变量：</p>
<pre><code class="hljs language-sh"><span class="hljs-built_in">export</span> UV_PYTHON=<span class="hljs-string">&quot;./.venv/python&quot;</span>
uv pip list
</code></pre>
<p>然后就可以利用 uv 的缓存了。</p>
<p>当然，依赖混乱问题使用 <code>uv pip</code> 是无法避免的。这对于发行版也是一种麻烦。因为发行版的环境全给你配好了，但有的项目设计了插件系统，插件系统又需要装插件的 requirement.txt，安一个许久没更新的插件让主项目废掉的情况也不是不可能……</p>
<p>如果让插件作者指定的兼容版本？只靠规范做不到，必须像MC那样检查版本号，不更新版本号就不放行。这样就算不更新代码了，也得倒逼作者每个版本都进行一次（至少是与主项目的）依赖兼容性测试。</p>
<p>我觉得以当前 python 的运行方式，不 lock 子依赖的版本，这个问题是没法解决的。</p>
<h2>uv 管理 torch 下载源</h2>
<p>通常而言，在不指定 index 时 uv add torch 是去 pypi 或清华镜像源找 CPU 版本。如果打算每个项目都采用一样的 torch 版本 和 cuda ——</p>
<h3>uv 创建的新项目</h3>
<p>共用的 <code>uv.toml</code> 指定下载源。</p>
<p>Linux 在 <code>.config/uv/</code> 下，Windows 在 <code>%APPDATA%/uv/</code> 下。</p>
<pre><code class="hljs language-toml"><span class="hljs-section">[[index]]</span>
<span class="hljs-attr">url</span> = <span class="hljs-string">&quot;https://mirrors.tuna.tsinghua.edu.cn/pypi/web/simple/&quot;</span>
<span class="hljs-attr">default</span> = <span class="hljs-literal">true</span>
<span class="hljs-section">[[index]]</span>
<span class="hljs-attr">name</span> = <span class="hljs-string">&quot;pytorch-cu128&quot;</span>
<span class="hljs-attr">url</span> = <span class="hljs-string">&quot;https://download.pytorch.org/whl/cu128&quot;</span>
<span class="hljs-attr">explicit</span> = <span class="hljs-literal">true</span>
</code></pre>
<p>项目级别的 <code>pyproject.toml</code></p>
<pre><code class="hljs language-toml"><span class="hljs-attr">dependencies</span> = [
  <span class="hljs-string">&quot;torch==2.7.1&quot;</span>,
  <span class="hljs-string">&quot;torchvision==0.22.1&quot;</span>,
  <span class="hljs-string">&quot;torchaudio==2.7.1&quot;</span>,
]

<span class="hljs-section">[tool.uv.sources]</span>
<span class="hljs-attr">torch</span> = [
  { index = <span class="hljs-string">&quot;pytorch-cu128&quot;</span>},
]
<span class="hljs-attr">torchvision</span> = [
  { index = <span class="hljs-string">&quot;pytorch-cu128&quot;</span>},
]
<span class="hljs-attr">torchaudio</span> = [
  { index = <span class="hljs-string">&quot;pytorch-cu128&quot;</span>},
]
</code></pre>
<p>然后执行 <code>uv sync</code> 安装。</p>
<h3>uv pip 管理老项目</h3>
<p>直接指定命令行 的 <code>--index-url</code> 和 <code>--torch-backend</code></p>
<pre><code class="hljs language-shell">uv pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu126 --torch-backend=cu126
</code></pre>
<p>和用 pip 的方式差不多，区别是会硬链接到集中的缓存，不会重复占用十几份 torch。当然。该有的依赖冲突还是会有的。<del>关键是装好后就不要更新了</del></p>]]></content:encoded>
            <category domain="https://sansui233.com/categories/学习">学习</category>
        </item>
        <item>
            <title><![CDATA[踩了一圈 CSS 构建方案的坑]]></title>
            <link>https://sansui233.com/posts/2025-07-12-compare-css-solutions</link>
            <guid>https://sansui233.com/posts/2025-07-12-compare-css-solutions</guid>
            <pubDate>Sat, 12 Jul 2025 12:49:00 GMT</pubDate>
            <description><![CDATA[前端代码中质量最薄弱的一环]]></description>
            <content:encoded><![CDATA[<p>css 的写法一直算比较混乱的。层叠的样式表与 DOM 结构的分离看似清晰，但也因此容易产生屎山，组合太自由，哪些选择器用了哪些选择器没用，共用的嵌套的，分离的。今天小编就带你一探究竟（……）</p>
<h2>CSS类复用粒度</h2>
<p>我自己把 css 选择器（类）的复用粒度分三个层级。</p>
<h3>组件类</h3>
<p>粒度最大的层级，通常按组件级别语义化。选择器一般是下面这些名字</p>
<pre><code class="hljs language-css"><span class="hljs-selector-class">.wrapper</span>
<span class="hljs-selector-class">.container</span>
<span class="hljs-selector-class">.list-item</span>
</code></pre>
<p>组件化的选择器下面通常有很多条的 css。</p>
<h3>功能类</h3>
<p>通常是共用的样式或状态，比如</p>
<pre><code class="hljs language-css"><span class="hljs-selector-class">.open</span>
<span class="hljs-selector-class">.close</span>
<span class="hljs-selector-class">.light</span>
<span class="hljs-selector-class">.dark</span>
<span class="hljs-selector-class">.glass-effect</span>
</code></pre>
<p>这个看起来好像和组件类不冲突，但硬说的话组件类其实应该是这样</p>
<pre><code class="hljs language-css"><span class="hljs-selector-class">.container</span><span class="hljs-selector-class">.open</span> { 此处将 <span class="hljs-selector-class">.open</span> 的所有样式全覆盖 }
<span class="hljs-selector-class">.container</span><span class="hljs-selector-class">.close</span> { 此处将 <span class="hljs-selector-class">.close</span> 的所有样式全覆盖 }
<span class="hljs-selector-class">.container</span><span class="hljs-selector-class">.light</span> { 此处将 <span class="hljs-selector-class">.light</span> 的所有样式全覆盖 }
<span class="hljs-selector-class">.container</span><span class="hljs-selector-class">.dark</span> { 此处将 <span class="hljs-selector-class">.dark</span> 的所有样式全覆盖 }
</code></pre>
<p>组件类的状态严格在组件的 scope 下。功能类则是可以不限 Scope 的复用。</p>
<p>这 CSS 容易混乱的根源。在工程维护角度，功能类是最不敢乱动的类，不知道动了后哪里样式就会出问题。但在设计角度，用功能类复用一些状态又确实很方便，统一设计也好用。比如增加统一的圆角、描边、阴影样式。</p>
<p>功能类的优缺点是一体两面——图像的只有主观的好看与否，没有客观的对错。</p>
<h3>原子类</h3>
<p>定义海量常用的基础样式类，在 class 上直接写类名就能获得对应效果。就是 tailwind css。</p>
<p>原子类相较于功能类粒度更小，也不会轻易改动 css 属性。</p>
<pre><code class="hljs language-css"><span class="hljs-selector-class">.flex</span>
<span class="hljs-selector-class">.col-1</span>
<span class="hljs-selector-class">.text-sm</span>
</code></pre>
<h2>方案</h2>
<p>通常来说，一个库的样式会着重在一个某一个粒度上。</p>
<h3>原生 css</h3>
<p>用原生 css 时通常会以 <strong>组件化</strong> 的粒度为主，带极少的功能类。现在配合 css 变量使用。早期的网页简单，一个 CSS 文件就能搞定全站，设计上并没有考虑项目变得越来越复杂后的实践。</p>
<p><strong>优点</strong>：性能好，扁平的结构利好小项目。适合写研究新样式。</p>
<p><strong>缺点</strong>：过于扁平，大量工程化后易屎山，存在样式与 DOM 分离带来的维护混乱。</p>
<h3>SCSS</h3>
<p>古法预处理器，可能多层嵌套 css，可组合。是 <strong>组件化</strong> 的粒度。在 CSS.module 出来前，用 SCSS 分割 Scope 挺好用。</p>
<p><strong>优点</strong>：结构非常清晰</p>
<p><strong>缺点</strong>：</p>
<ol>
<li>编译后的选择器很长一串，从浏览器渲染角度，匹配DOM是耗性能的</li>
<li>难以应对复杂项目 DOM 结构的改变，需要考虑扁平化 + 命名，但这样做和原生 CSS 的维护体验也不相上下。</li>
</ol>
<h3>CSS Module</h3>
<p>CSS Module 是完全 <strong>组件化</strong> 的粒度。相比起 SCSS 的样式与 DOM 分离，CSS Module 为组件内部样式耦合，组件间样式分离。</p>
<p><strong>优点：</strong> 在组件粒度分割合理的情况下，清晰易维护。</p>
<p><strong>缺点</strong>：依赖预构建，写类名写起来太磨叽了。整体我用得不多没法评价。</p>
<pre><code class="hljs language-jsx"><span class="hljs-keyword">const</span> <span class="hljs-title function_">Button</span> = (<span class="hljs-params"></span>) =&gt; {
  <span class="hljs-keyword">return</span> (
    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">className</span>=<span class="hljs-string">{styles.button}</span>&gt;</span>
      Click me
    <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span>
  );
};
</code></pre>
<h3>BootStrap</h3>
<p><strong>组件化</strong> 为主，少量原子化修饰的预制样式库，拿来即用是不错的。早期 CSS 框架大多是指预制样式，和预构建的库有本质区别。</p>
<h3>Tailwind css</h3>
<p>完全原子化的神奇之库，通过编译可以有功能类和组件类。它更像是重新定义了 css 语法。</p>
<p><strong>优点</strong></p>
<ol>
<li>灵活，快，好看</li>
<li>工具链齐全，可以裁剪掉不用的原子类。</li>
</ol>
<p><strong>缺点</strong></p>
<ol>
<li>稍微要写复杂一点的样式，DOM 就会被一大堆 class 埋没。</li>
<li>从浏览器渲染角度，匹配、合并大量 CSS 样式是需要更多性能开销的</li>
<li>要做到同种样式的复用，必须组合原子类，变成功能类或组件类，否则维护起来相当麻烦。这似乎违背了用 tailwind css 的初衷，熟悉了 css 的不如直接自己用 css 手撮功能类和组件类。</li>
<li>其实我是 tailwind 黑，嗯。但无法否认开发时确实很快很方便。</li>
</ol>
<pre><code class="hljs language-jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Card</span>(<span class="hljs-params">{ title, description, imageUrl, imageAlt }</span>) {
  <span class="hljs-keyword">return</span> (
    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;max-w-sm rounded overflow-hidden shadow-lg&quot;</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;w-full&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">{imageUrl}</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">{imageAlt}</span> /&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;px-6 py-4&quot;</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;font-bold text-xl mb-2&quot;</span>&gt;</span>{title}<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;text-gray-700 text-base&quot;</span>&gt;</span>{description}<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>
      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;px-6 pt-4 pb-2&quot;</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;inline-block bg-gray-200 rounded-full px-3 py-1 text-sm font-semibold text-gray-700 mr-2 mb-2&quot;</span>&gt;</span>#photography<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;inline-block bg-gray-200 rounded-full px-3 py-1 text-sm font-semibold text-gray-700 mr-2 mb-2&quot;</span>&gt;</span>#travel<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;inline-block bg-gray-200 rounded-full px-3 py-1 text-sm font-semibold text-gray-700 mr-2 mb-2&quot;</span>&gt;</span>#adventure<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>
      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>
  );
}
</code></pre>
<h3>原生 css in js</h3>
<p>指 JS Object 转译为 CSS。由于写起来太不像 CSS，复杂的功能写起来过于不直观 ，我直接 PASS。</p>
<pre><code class="hljs language-jsx"><span class="hljs-keyword">const</span> <span class="hljs-title function_">InlineStyleExample</span> = (<span class="hljs-params"></span>) =&gt; {
  <span class="hljs-keyword">const</span> myStyle = {
    <span class="hljs-attr">color</span>: <span class="hljs-string">&#x27;blue&#x27;</span>,
    <span class="hljs-attr">backgroundColor</span>: <span class="hljs-string">&#x27;lightgray&#x27;</span>,
    <span class="hljs-attr">padding</span>: <span class="hljs-string">&#x27;10px&#x27;</span>,
    <span class="hljs-attr">borderRadius</span>: <span class="hljs-string">&#x27;5px&#x27;</span>
  };

  <span class="hljs-keyword">return</span> (
    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">{myStyle}</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">style</span>=<span class="hljs-string">{{</span> <span class="hljs-attr">fontSize:</span> &#x27;<span class="hljs-attr">18px</span>&#x27;, <span class="hljs-attr">fontWeight:</span> &#x27;<span class="hljs-attr">bold</span>&#x27; }}&gt;</span>
        This text is styled with inline CSS.
      <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>
  );
};
</code></pre>
<h3>Styled-components</h3>
<p><strong>组件化</strong>的 CSS in JS 方案，写起来像 CSS 实际是 JS。支持客户端动态修改 CSS 具体属性（其他方案做状态改变主要依靠 selector 的匹配）</p>
<p><strong>优点</strong>：</p>
<p>灵活好拓展，比如主题管理不仅仅是颜色，还可以是图片资源一类的。</p>
<p><strong>缺点</strong>：</p>
<ol>
<li>因为是 JS 转 CSS，服务器编译慢和客户端渲染慢得选一个</li>
<li>React 的 useContext 要被废弃了，而 styled-components 严重依赖此 hook，导致进入了维护状态。JS 框架发展太快了。</li>
</ol>
<pre><code class="hljs language-jsx"><span class="hljs-keyword">import</span> styled <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;styled-components&#x27;</span>;

<span class="hljs-comment">// Create a styled button component</span>
<span class="hljs-keyword">const</span> <span class="hljs-title class_">StyledButton</span> = styled.<span class="hljs-property">button</span><span class="hljs-string">`
  background-color: blue;
  font-size: 16px;
  padding: 10px 20px;
  border-radius: 5px;

  &amp;:hover {
    background-color: darkblue;
  }
`</span>;

<span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) {
  <span class="hljs-keyword">return</span> (
    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">StyledButton</span>&gt;</span>Click Me<span class="hljs-tag">&lt;/<span class="hljs-name">StyledButton</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>
  );
}
</code></pre>
<h3>Linaria</h3>
<p>自定义 <strong>功能类</strong> 的 CSS in js 方案，同时也支持 <strong>组件化</strong> 写法。生成的是完全静态的 css，样式值的复用靠变量，片段的复用靠 <code>css</code> 生成的类。</p>
<p><strong>优点</strong>：</p>
<p>是预构建方案，在服务端渲染。和原始的 CSS 写法和思路差不多。</p>
<p><strong>缺点</strong>：</p>
<ol>
<li>
<p>值复用靠变量，但是由于是 <strong>静态 css</strong>，这个并不会变。所以变量插值<strong>其实是常量</strong>。比如下面的 font-size 并不会变化。</p>
<pre><code class="hljs language-jsx"><span class="hljs-keyword">const</span> fontSize = <span class="hljs-number">16</span>;
<span class="hljs-keyword">const</span> <span class="hljs-title class_">Title</span> = styled.<span class="hljs-property">h1</span><span class="hljs-string">`
  font-size: <span class="hljs-subst">${fontSize}</span>px;
`</span>
</code></pre>
<p>也就是说，你如果想在客户端随意改变字体，用 context/zustand 这种 runtime 的 fontSize，这样写报错。不过，Linaria 允许你借助 react 的 props 和 <code>styled</code> 组件来实现客户端的值变化。</p>
<pre><code class="hljs language-jsx"><span class="hljs-keyword">const</span> <span class="hljs-title class_">Title</span> = styled.<span class="hljs-property">h1</span><span class="hljs-string">`
  font-size: <span class="hljs-subst">${props =&gt; props.size}</span>px;
`</span>
<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">MyComponent</span>(<span class="hljs-params"></span>) {
  <span class="hljs-keyword">const</span> fontSize = <span class="hljs-title function_">useAppStore</span>(<span class="hljs-function"><span class="hljs-params">state</span> =&gt;</span> state.<span class="hljs-property">fontSize</span>)
  <span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Title</span> <span class="hljs-attr">fontSize</span>=<span class="hljs-string">{fontSize}</span>&gt;</span>Hello<span class="hljs-tag">&lt;/<span class="hljs-name">Title</span>&gt;</span></span>
}
</code></pre>
<p>相当于生成</p>
<pre><code class="hljs language-jsx">&lt;h1
  className=<span class="hljs-string">&quot;_title_xyz&quot;</span>
  style={{ <span class="hljs-string">&#x27;--linaria-font-size&#x27;</span>: <span class="hljs-string">`<span class="hljs-subst">${size}</span>px`</span> }}
&gt;
</code></pre>
<p>那这和 styled-components 写起来已经差不多了。而且要做主题化的值都得用快要废弃的 <code>useContext</code> API。只不过 linaria 改的 style 属性，styled 是改的 css  API。改 style 属性其实已经不能算静态了。</p>
</li>
<li>
<p>组件间的<strong>样式复用方案</strong>只有原生的 CSS 方案，上述的奇妙客户端插值做不了这个需求。假设，你要做一个主题化的对话框的卡片阴影，只能使用原生 css 类中加原生 css 变量。上述动态改变样式的因为依赖 props，只能使用 <code>styled</code> 的写法，但这样就会把 html 标签了也继承了，不同的样式也无法随意组合。这也是为什么我说 Linaria 是原生 css 的替代，而不是 styled-components 的替代，构建方式就决定他们差得太了远。</p>
</li>
<li>
<p>基于2，导致你写组件又要检查 <code>styled</code> 又要确认 <code>css</code> 类又要检查 JSX classname 的顺序。如果用组件继承会被迫连 DOM 类型都继承。</p>
</li>
<li>
<p>使用功能类有点像原子化，又完全不如 tailwind 已经给你预设好一堆东西的效率。写类名和 cssmodule 一样，太磨叽了</p>
</li>
</ol>
<p>我博客本想迁移至此方案，但由于工作量实在巨大而放弃。linaria 主要还是解决了个命名空间冲突的问题，想用得更深入一点就会四不像。</p>
<pre><code class="hljs language-jsx"><span class="hljs-keyword">import</span> { css } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@linaria/core&#x27;</span>;

<span class="hljs-keyword">const</span> eleStyle = css`<span class="css">
  <span class="hljs-attribute">color</span>: red;
  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">3rem</span>;
  &amp;<span class="hljs-selector-pseudo">:hover</span> {
    <span class="hljs-attribute">color</span>: blue;
  }
`</span>;

<span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) {
  <span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">className</span>=<span class="hljs-string">{eleStyle}</span>&gt;</span>Hello Linaria!<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span>;
}

<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">App</span>;
</code></pre>
<h2>构建组建库</h2>
<p>每一个 CSS 方案都有对应的构建组件库的实践。 <a href="https://github.com/shadcn-ui/ui">shadcn</a> 是基于 tailwind 构建组件库实践。</p>
<h2>CSS 框架选择要素</h2>
<ol>
<li>样式复用</li>
<li>样式组合</li>
<li>动态样式</li>
<li>主题切换</li>
<li>代码提示</li>
<li>自动裁剪</li>
<li>随意重构</li>
<li>渲染性能</li>
<li>实践的统一性</li>
</ol>
<p>最重要的还是自己的需求。</p>]]></content:encoded>
            <category domain="https://sansui233.com/categories/学习">学习</category>
        </item>
        <item>
            <title><![CDATA[Steam 假入库是怎么做的]]></title>
            <link>https://sansui233.com/posts/2025-04-22-techs-about-steam-crack</link>
            <guid>https://sansui233.com/posts/2025-04-22-techs-about-steam-crack</guid>
            <pubDate>Mon, 21 Apr 2025 19:59:00 GMT</pubDate>
            <description><![CDATA[入库不仅仅是入库]]></description>
            <content:encoded><![CDATA[<p>很久以前被淘宝的 Steam 假 CDKey 给坑过，因为价格其实也不便宜，打的正版宣传，其实是盗版，后来感觉太可疑了查了一下确认被坑了。现在突然想起来了解了一下。本文概述是日常语境中的 “Steam假入库”需要的一些步骤，概括起来为五个方面：解锁、下载、入库、DRM、API验证。</p>
<h2>下载验证</h2>
<p>steam 的下载鉴权流程是</p>
<ol>
<li>查找账号是否有拥有此游戏，有则显示下载按钮</li>
<li>点击下载后，把游戏软件 Manifest 对应的密钥（DecryptionKey）明文写入一个本地文件 <code>Steam\config\config.vdf</code></li>
<li>Steam （原版）根据 <code>config.vdf</code>中的信息，发送下载请求至 Steam CDN 进行下载</li>
</ol>
<p>“Steam 解锁” “Steam 假入库” 指的是绕过上述机制。具体而言，如果没有购买游戏，可以：</p>
<ol>
<li>将按钮变为可下载（至于是伪造请求实现还是逆向 hook 实现，我不知道，都可以，因为甚至不需要变按钮，给个外部的下载按钮也可以）</li>
<li>点击按钮后，从不知名渠道获取一个正版账号的 Manifest（下载清单）和 Decryption Key（下载密码），写入<code>Steam\config\config.vdf</code></li>
<li>Steam（原版）根据 <strong><code>config.vdf</code></strong>，发送下载请求至 Steam CDN 进行下载</li>
</ol>
<p>Steam 的下载验证可以说是相当简单，明文本地存密码，CDN 无状态的验证，这么多年没有改过流程，给入库工具空间（虽然说前端的事总有办法 Hack 但也是可以让 Hack 成本变高很多的）。不过 Steam 理念本来就是以平台服务留住玩家的，反倒是扩大了其影响力与营收。</p>
<p>一些名词解释：</p>
<ul>
<li>解锁：指对没有购买的游戏，“可以显示下载按钮”。和能不能下载没有关系。</li>
<li>下载：Steam 根据 <strong><code>Steam\config\config.vdf</code></strong> 的信息下载游戏文件。</li>
<li>入库：指把下载好的游戏，在当前电脑的 Steam 库中显示。</li>
</ul>
<p>以上过程均不涉及对游戏本身的破解，只是对 Steam 下载过程的破解。也就是，破解的是 Steam，不是游戏。</p>
<h2>运行时验证</h2>
<p>这里开始才会涉及到游戏破解。</p>
<p>有的 Steam 游戏下载下来后是不用破解的，直接找到游戏目录，点 exe 可以正常游玩（比如星露谷）。只是无法通过原版 Steam 打开，也就只能离线。</p>
<p>有的游戏是无法脱离 Steam 直接运行的。这里涉及两层验证：</p>
<h3>加密算法层</h3>
<p>这是一层 DRM（数字版权加密保护）。Steam DRM 系统的名称为 SteamStub。SteamStub 的加密有各种的变体，每个游戏使用的不一致。只对 exe 的算法加密，是一个离线的步骤。不涉及 Steam 平台的验证。</p>
<p>网上有一个开源工具叫 Steamless，可以破除 SteamStub 对游戏的 DRM，称为脱壳。但脱壳本身不处理 Steam 在线验证相关，只进行了脱壳的游戏也是无法正常游戏的。</p>
<blockquote>
<p>SteamStub DRM 和 Steamworks API 是两个独立层。Steamless <strong>仅移除 SteamStub 加密外壳</strong>，但游戏代码中与 Steam 平台功能（如成就、云存档、联机）相关的 API 调用（通过 <code>steam_api.dll</code>）仍会保留。</p>
</blockquote>
<h3>Steam API 验证</h3>
<p>游戏还可能调用 Steam api 进行在线通信，如成就、云存档、联机相关的 API 调用。</p>
<p>这是使用入库工具玩破解游戏可能被红信或封号的根本原因，因为对 API 的调用是发送到 Steam 官方服务器的。在小红书上了解到，有的玩的盗版可以与正版联机，说明 Steam 在联机时并不会验证账号是否拥有该游戏。包括 Steamtools 实现的家庭共享联机，也说明了 Steam 对于是否账号可以进行联机鉴权不足。但只要留有记录就有可能导致被封号，取决于 Steam 什么时候想管理盗版现象。</p>
<p>反之，如果伪造一个 Steam 的服务器，并且替换游戏中的 Steam 相关的动态链接库，如 <code>steam_api.dll</code> ，游戏里所有对 Steam API 的调用被发送到假服务器上，返回一个假的结果。这种工具也已经有了，项目为 goldberg_emulator，简称 GBE。破解版的游戏通常会内置一个这样的虚拟 Steam 环境。</p>
<h3>第三方厂商验证</h3>
<p>很多大厂的游戏有自己的联机服务器和验证机制、不仅走 Steam API 的验证。这种也是可以通过虚拟环境破解，但没人做，除非专门对这个游戏的所有 API 做逆向。难度比逆向通用的 Steam API 高很多。</p>
<h2>Steamtools 是什么</h2>
<p>已知 Steamtools 主要是做 <strong>解锁</strong> 和 <strong>入库</strong>。对于会不会破解游戏，网上没有更多的信息。我也不想冒风险尝试使用它。</p>
<p>根据官网的解释，Steamtools 可以离线运行（不如说破解游戏只能是离线运行），是提供了类似 GBE 的验证环境。有没有对 DRM 脱壳不清楚，但个人倾向于有，很多游戏都有 DRM 的保护，除了 SteamStub，还有其他的 DRM 验证方式，不脱壳玩不了。</p>
<p>因此个人推测是，Steamtools 是集 <strong>解锁、下载、入库、破解、运行时验证</strong> 为一体的工具集。</p>
<h2>SteamAutoCrack 是什么</h2>
<p>只做 DRM 脱壳和 Steam API 验证。项目在 Github 上，破解后的游戏会运行在 GBE 的环境下。这种方式是完全离线运行的单机。</p>
<h2>风险来源</h2>
<p>完全脱离 Steam 运行没有风险，只要在线就可能有风险。</p>
<p>假入库阶段的风险主要来自于入库工具对 Steam 请求拦截的覆盖程度不足。例如 Steam 版本更新了，使得 API 和下载流程有变化，而入库工具没有对其做处理，无法完全欺骗下载流程。网上看到假入库的人可能有囤积癖或者是打算做灰产，一次性入库了几十个游戏，直接导致被 SteamCDN 拉黑。</p>
<p>运行时的风险也是来自于在线验证，如果是开着 Steam 玩的破解游戏，没有离线时甚至尝试联机，使得游玩信息发送到了 Steam 的服务器（比如不该有的存档、不该有的联机等等）。</p>
<p>另外，入库工具会侵入式修改 Steam的客户端，直接打开 Steam 可能会有检测文件是否被修改。 Steamtools 提供了三种启动模式，可以随时恢复为原版 Steam 的运行。但淘宝卖的入库工具说不准是什么样的，当年骗我的店家那个用的是早期的 steamtools，使用店家的账号下载游戏后，使用 steamtools 离线运行（本来已经忘记了，努力想想竟然想得起来一点细节）。但现在的店家说不准是什么样的，在 B 站看到说有的是直接修改文件，从此都是盗版Steam 客户端，只能卸载重装。</p>
<p>没有风险的方式：如果你有方式得到 Steam 正版的游戏文件，然后用 SteamAutoCrack 破解，能直接脱离 steam 运行则没有风险。</p>
<p>对于更多的人而言，下载木马是最大的风险。</p>
<h2>参考资料</h2>
<ul>
<li>bbs.steamtools论坛</li>
<li>SteamManifestCache wiki</li>
<li>SteamLess Readme</li>
</ul>]]></content:encoded>
            <category domain="https://sansui233.com/categories/Diary">Diary</category>
        </item>
        <item>
            <title><![CDATA[Windows11 右键菜单自定义 - NileSoft Shell]]></title>
            <link>https://sansui233.com/posts/2025-04-19-windows-context-menu</link>
            <guid>https://sansui233.com/posts/2025-04-19-windows-context-menu</guid>
            <pubDate>Sat, 19 Apr 2025 01:21:00 GMT</pubDate>
            <description><![CDATA[颜狗就是得样式和功能性全要，怎么了]]></description>
            <content:encoded><![CDATA[<link rel="preload" as="image" href="https://img-cf.sansui233.com/imgs/2025/04/202504190843358.webp"/><p>（发现简中圈居然没有人写这个事，写个草稿发别的地方）</p>
<p>Windows11 右键菜单问题被诟病已有，网上很多还原为 win10 菜单的教程……但 win10 有 win10 的问题，有用的没用的都往里放，常用的不常用的混在一起。有没有一种方法可以兼顾好看，同时有合理的菜单层级呢？</p>
<p>有的 —— Nilesoft Shell。可以自定义的 Win11 右键菜单。已经用了两年多了很好用（以至于差点忘了有这个软件）。</p>
<h2>下载并安装</h2>
<p>下载在官网： <a href="https://nilesoft.org/">https://nilesoft.org/</a></p>
<p>安装完后，新菜单应该已经生效了，并且会开机自启。这时候可以点点看，如果感觉效果满意就不用再看下去了。</p>
<p>当然颜狗是不满意的，大部分一级菜单我用不上，我只想保留我常用的，不用的塞到更多选项。如图</p>
<p><img src="https://img-cf.sansui233.com/imgs/2025/04/202504190843358.webp" alt=""/></p>
<h2>挪动菜单层级</h2>
<p>如果你是默认安装，<code>C:\Program Files\Nilesoft Shell</code> 应该能看见以下的文件结构</p>
<pre><code>Nilesoft Shell/
├── shell.exe
├── shell.nss
├── imports/
│   ├── modify.nss
│   └── ...
└── ...
</code></pre>
<p>以 <code>.nss</code> 结尾的是配置文件，可以用记事本打开。以下是几个案例：</p>
<h3>1. 收纳不常用菜单至 “更多选项”</h3>
<p>例如，收纳所有名称里带有 “QQ” 和 “百度” 的菜单项，在 <code>modify.nss</code> 添加如下：</p>
<pre><code>modify(mode=mode.multiple find=&quot;QQ|百度|网盘&quot; menu=title.more_options)
</code></pre>
<p>find 中包含的字符串会被匹配，“|”是或。表示匹配“QQ”或“百度”或“网盘”的任意项都会被挪走。</p>
<p>这是主要的挪菜单的方式，我实际上挪了一大堆。</p>
<pre><code>modify(mode=mode.multiple
	find=&quot;收藏夹|打印|共享|PowerRename|Microsoft Defender|Change Attributes|File Locksmith|upic|火绒|百度|QQ|Acrobat|Adobe|OneDrive|在沙盒中运行|PicList|旧版 Windows Media Player&quot;
	menu=title.more_options)
</code></pre>
<h3>2. “创建快捷方式”挪到顶层</h3>
<p>有人可能看不惯 创建快捷方式 放在了 更多选项 里。要恢复把 <code>modify.nss</code> 中一行注释掉就好。</p>
<pre><code>modify(mode=mode.multiple
	where=this.id(
		id.send_to,
		id.share,
		// id.create_shortcut, 这行注释掉
		id.set_as_desktop_background,
		id.rotate_left,
		...
</code></pre>
<h3>3. 顶层添加新菜单项 “使用 vscode 打开”</h3>
<p>在 <code>shell.nss</code> 中，新起一行添加</p>
<pre><code>item(title=&#x27;Open with VS Code&#x27; image=[\uE272, #22A7F2] cmd=&#x27;code&#x27; args=&#x27;&quot;@sel.path&quot; &amp;&amp; exit&#x27; sep=&#x27;top&#x27;)
</code></pre>
<p>添加的这行可以不在最后，添加的位置决定它在菜单中的位置。我添加在了中间，最后的几个 &quot;import&quot; 之间。</p>
<p>要是问为什么我不用 vscode 自带的右键菜单……我的 vscode 装得太早了，那时还没有右键菜单关联，现在也懒得再装了就将就用吧……</p>
<h3>4. 顶层菜单添加新目录</h3>
<p>你要是在图片上右键，会发现系统自带有“使用 Windows 画图编辑”“使用照片编辑”“向左旋转”“向右旋转”……我的天，哪个天才设计的，你不知道自家照片 App 打开后能编辑也能旋转吗？（我知道这肯定是两波人开发的但还是想吐槽）</p>
<p>秉持着只挪不删的原则，在“更多选项”前加了个“编辑”目录。以下加在了 <code>shell.nss</code></p>
<pre><code>menu(mode=&quot;multiple&quot; title=&quot;编辑&quot; image=image.glyph(&quot;\uE0A1&quot;))
{
}
</code></pre>
<p>然后在 <code>modify.nss</code> 里加了</p>
<pre><code>modify(mode=mode.multiple
	find=&quot;*编辑|旋转|PDF&quot;
	menu=&quot;编辑&quot;)
</code></pre>
<p>这样等于说，编辑和旋转相关都被归到了新的“编辑”目录下。加上 PDF 相关操作挪进去。我没有装 WPS，装了 WPS 也可以把 WPS 挪一个目录。</p>
<h2>生效</h2>
<p>管理员权限运行安装目录下的 <code>shell.exe</code>，点 Register 生效</p>
<h2>其他</h2>
<p>按 shift 后右键菜单，会有一个“Developer” 目录。没错 shift 显示隐藏菜单也可以实现，配置的属性有 <code>vis=key.shift()</code> ，但不是实时变化的所以没有mac 上的好用。除此之外还有喜闻乐见的能配置主题、颜色、图标等……我不管了。</p>
<h2>参考</h2>
<p>官网的文档很详细，但是非常面向程序员。不过大部分的需求被人在论坛上问过了，也有人在 issue 里问。不会就去论坛翻一下。看不懂英文开翻译，看不懂文档丢给 AI。</p>
<p>文档： <a href="https://nilesoft.org/docs">https://nilesoft.org/docs</a></p>
<p>论坛： <a href="https://github.com/moudey/Shell/discussions">https://github.com/moudey/Shell/discussions</a></p>]]></content:encoded>
            <category domain="https://sansui233.com/categories/工具">工具</category>
        </item>
        <item>
            <title><![CDATA[2024 年的总结与分享]]></title>
            <link>https://sansui233.com/posts/2025-01-05-2024-summary</link>
            <guid>https://sansui233.com/posts/2025-01-05-2024-summary</guid>
            <pubDate>Sun, 05 Jan 2025 01:21:00 GMT</pubDate>
            <description><![CDATA[怎么全在写游戏……]]></description>
            <content:encoded><![CDATA[<link rel="preload" as="image" href="https://cdn.jsdelivr.net/gh/NamiLing/upic/picgo/202401131219995.webp"/><link rel="preload" as="image" href="https://img-cf.sansui233.com/imgs/2025/01/202501050253199.webp"/><link rel="preload" as="image" href="https://img-cf.sansui233.com/imgs/2025/01/202501050335032.webp"/><link rel="preload" as="image" href="https://img-cf.sansui233.com/imgs/2025/01/202501050330486.webp"/><link rel="preload" as="image" href="https://img-cf.sansui233.com/imgs/2025/01/202501050325838.webp"/><link rel="preload" as="image" href="https://img-cf.sansui233.com/imgs/2025/01/202501050055049.webp"/><p>印象中之前每年其实都有写去年主要干了什么，看了什么作品。但又忘了都写在了哪里。今年想起来还是在这里写吧。</p>
<p>主要说说看了些什么吧。</p>
<h2>实用小技术</h2>
<ol>
<li>无线 iPad 当作电脑副屏</li>
</ol>
<p>某天突然想躺着用手柄玩电脑的游戏，所以 <a href="https://github.com/LizardByte/Sunshine">sunshine</a> + moonlight(iPad) 串流。效果非常不错！</p>
<ol start="2">
<li>便携显示屏</li>
</ol>
<p>后面，我又嫌无线的码率不稳定，组装了个便携显示屏，变成了躺着用电脑副屏……配件全部拼多多的。</p>
<ul>
<li>显示屏，京东方 NV156FHM N69</li>
<li>驱动版、按键板、软排线</li>
<li>外壳、音响</li>
</ul>
<ol start="3">
<li>新的代理协议与客户端</li>
</ol>
<p>今年对于魔法上网，非常重要的事情就是去年年底 clash-core 删库。不过也正好，促使我看看有没有人设计新的协议。</p>
<p>协议方面尝试了 hysteria2 和 naive，测试下来已经把 hysteria2 当作主力了。顺便读了下 http2 <a href="https://github.com/abbshr/rfc7540-translation-zh_cn">rfc7540</a> 和 http3 <a href="https://datatracker.ietf.org/doc/html/rfc9114">rfc 9114</a> （但现在又忘了！）</p>
<p>客户端试了 <a href="https://sing-box.sagernet.org/">singbox</a>，在 ios 上替代了 shadowrocket，性能好非常多。电脑端 GUI 是典型的后端程序配置的思维，很难用，还是用 clash-meta 系列了。</p>
<h2>单机游戏</h2>
<ol>
<li><a href="https://store.steampowered.com/app/240720/Getting_Over_It_with_Bennett_Foddy/">Getting Over it</a> (掘地求升)</li>
</ol>
<p>我的天，有生之年我居然打通了这个8年前的破游戏！</p>
<p>打通的那一瞬间，我感觉觉得自己已经可能面对任何困难无所不能了。但是山顶的聊天室早已空无一人，有一点寂寞。</p>
<p><img src="https://cdn.jsdelivr.net/gh/NamiLing/upic/picgo/202401131219995.webp" alt="Getting over it"/></p>
<ol start="2">
<li><a href="https://store.steampowered.com/agecheck/app/1086940/?l=schinese">博德之门3</a></li>
</ol>
<p>tga 2023 年度游戏，不好玩。去年买了，今年和 meme 大师与墨墨联机了好几次，还是玩不下去！打架打一局太久了……而且打不好还要 SL……补药啊！（后面没法联机了其实主要是因为我作息太乱了）</p>
<ol start="3">
<li><a href="https://store.steampowered.com/app/1426210/_/?l=schinese">双人成行</a></li>
</ol>
<p>2021 年度游戏，好玩，这个还是感谢陈 sir 陪我打完了，而且因为他是全成就大师所以我也跟着全成就了。因为我竟然买了两年都没有玩，显得特别可怜……</p>
<ol start="4">
<li><a href="https://store.steampowered.com/app/2198150/Tiny_Glade/">Tiny Glade</a></li>
</ol>
<p>新出的休闲建筑游戏，最不像游戏的游戏。建筑方式新颖，而且好好看哦！</p>
<p>玩了后做了个视频，竟然被 HR 联系了……差点当诈骗私信……</p>
<p><img src="https://img-cf.sansui233.com/imgs/2025/01/202501050253199.webp" alt="Tiny Glade"/></p>
<ol start="5">
<li><a href="https://www.nintendo.com/hk/switch/animal_crossing_new_horizons/">动物森友会</a></li>
</ol>
<p>到今年才打开这个几年前的游戏。建岛是好玩的，画风也可爱，但因为手游也有在刷，对于刷刷刷的都有点疲惫了。</p>
<ol start="6">
<li><a href="https://store.steampowered.com/app/976730/Halo_The_Master_Chief_Collection/">Halo</a></li>
</ol>
<p>meme 大师带飞的经典 FPS，有剧情，非常好游戏！我只用跟在后面捡各种好玩的枪就好了（不是）</p>
<ol start="7">
<li><a href="https://store.steampowered.com/app/620/Portal_2/?l=schinese&amp;curator_clanid=31468181">传送门2</a></li>
</ol>
<p>十几年前的解谜神作，好丸！多人模式也是 meme 大师带飞的。</p>
<ol start="8">
<li><a href="https://www.bilibili.com/video/BV1hS411w7tR">Second Eden-理想箱庭物语</a></li>
</ol>
<p>这是个新的 minecraft 深度魔改整合包，基于模拟殖民地 mod。我觉得比很多整合包都要好，考虑了流程、循环、引导，有些 mod 加的解谜结构很好玩。但模拟殖民地本身有 bug，加上流程上其实也不是特别完整，只建了一小半。</p>
<ol start="9">
<li>零大陆</li>
</ol>
<p>这是个超老的 Minecraft1.8 原版 RPG 整合包。真的非常震撼能做到这个程度，流程设计、地图设计上超级完整……可惜循环有问题，卡在一个冒险模式下的银河城地下区域了。</p>
<p><img src="https://img-cf.sansui233.com/imgs/2025/01/202501050335032.webp" alt="零大陆"/></p>
<ol start="10">
<li>模拟地铁</li>
</ol>
<p>休闲小游戏，也是老游戏了，极简地铁规划，最后发现还是开滴滴比较好。内容对得起价格。也因此和喜欢地铁的朋友有聊些城建游戏。</p>
<p><img src="https://img-cf.sansui233.com/imgs/2025/01/202501050330486.webp" alt="模拟地铁"/></p>
<ol start="11">
<li><a href="https://store.steampowered.com/app/813230/ANIMAL_WELL/?l=schinese">动物井 (Animal Well)</a></li>
</ol>
<p>解谜 + 平台跳跃。太好玩了，这才是真正的 2024 年度游戏！！而且只 33 M，性能也超好！是像素美术但是是很现代的赛博梦幻像素美术，好看的！</p>
<p><img src="https://img-cf.sansui233.com/imgs/2025/01/202501050325838.webp" alt="Animal Well"/></p>
<ol start="12">
<li><a href="https://store.steampowered.com/app/391540/Undertale/?l=schinese&amp;curator_clanid=31318556">传说之下 (UnderTale)</a></li>
</ol>
<p>经典日式 RPG，脑洞超大角色有意思，剧情很温暖。是Meme 依据本人的游戏时长与偏好定制的 steam 礼物……非常喜欢！</p>
<p><img src="https://img-cf.sansui233.com/imgs/2025/01/202501050055049.webp" alt="UnderTale"/></p>
<h2>动画&amp;漫画</h2>
<ol>
<li><a href="https://www.bilibili.com/bangumi/media/md21087073">葬送的芙莉莲</a></li>
</ol>
<p>中世纪魔法动画，难得味这么正，不算是我非常喜欢的类型但能看下去。而且作画的流畅程度真的……太有钱了！整体比较日常，很温馨。</p>
<ol start="2">
<li><a href="https://www.bilibili.com/bangumi/media/md28339713">蓝色禁区 Blue Lock</a></li>
</ol>
<p>足球番，我原以为我不喜欢看，最后根本停不下来……动画第一季做得实在太好了，但第二季是 PPT，1 分都不想给……漫画非常棒，不愧2024 年的日本漫画销冠。</p>
<p>不过我是其实从其中一对 CP 图决定看，结果看完动画觉得这两人麦太多了……不如好好看球！</p>
<ol start="3">
<li><a href="https://www.bilibili.com/video/BV1ag4y1W78U">异形舞台 Alien Stage</a></li>
</ol>
<p>动画音乐剧，讲的外星人饲养地球人当宠物，看人们在舞台上通过选秀比赛相杀的故事。特点是，一集一个寡妇（夫）……太刀了！</p>
<h2>电影</h2>
<ol>
<li>你想活出怎样的人生</li>
</ol>
<p>宫崎骏动画电影，我觉得依旧很好看，很温暖。</p>
<ol start="2">
<li>蓦然回首（Look Back）</li>
</ol>
<p>藤本树动画电影，讲普通画画人的故事。非常牛美术风格。尽管我不是画画人，也没有很好的画画天赋。但也有一些感受有经历过，日复一日练基础，什么时候都在考虑画画……</p>
<p>以及藤本树居然开始走治愈系了！</p>
<ol start="3">
<li>志愿库 - 存亡之战</li>
</ol>
<p>怎么突然出现了国庆战争片……这个真的拍得挺好的，算是近年陈凯歌的不那么扑的了。以及我有朱一龙演技滤镜，在超烂低成本不被任何人看好的改编网剧里，因为演技太好而突然红的，真的没得说。</p>
<ol start="4">
<li>名侦探柯南 - 黑铁的鱼影</li>
</ol>
<p>和雨疏的年度固定节目，不错的粉丝向主线剧场。真好啊真好十年后还在和她一起看柯南。</p>
<h2>音乐</h2>
<p>年度歌手还是 Radwimps，基本老歌。上半年没怎么听</p>
<p>年底听 4 块钱的直播，才发现日系真是年年有天才。「晚餐歌」真的很厉害。原来不是我不喜欢听歌了，是没关注到好听的歌了，网易云日推越来越不行了，一直推各种时下 OP ED。</p>
<h2>技能相关</h2>
<ul>
<li>
<p>游戏，给 MC 服务器写了 彩虹帽子 数据包。想来这其实是第一次和游戏有关的编程，经典入口是帧更新 tick()。</p>
</li>
<li>
<p>画画，学了平面设计的课，作业也很肝完了，有一些收获。然后又看了些曼奇的网课，素描关系有提升，就是增加了短调子、空间感、体积感的意识。我之前也不是感受不到，而是没觉得差一点明度就会差很多。这是 Ti - Se 画画相比于 Se - Ti 的劣势，需要有理论后才能画得好……</p>
</li>
<li>
<p>原神里头一回赶上音游的版本，写了几首比较难的谱面，这个非常满意，是我自己都可以反复玩的！</p>
</li>
</ul>
<h2>专业相关</h2>
<p><del>这随便吧又没人看。</del></p>
<ul>
<li>
<p>笔记主题没怎么更，我也用得越来越少了</p>
</li>
<li>
<p>博客有更新，但忘了！</p>
</li>
<li>
<p>新写了个服务器的监控页。</p>
</li>
<li>
<p>论文挣扎着狂补。</p>
</li>
<li>
<p>有去接触 GPU 相关的，不想只停留在业务 MVC 再 CRUD。但看了发现没需求的话确实用不上。</p>
</li>
</ul>
<p>公司的相关还是不说了……主要是图形学和，久违的 OOP 编程，新的语言 C<span class="tag">#，但长得非常通用面向对象，没有太多的入门门槛。不禁感叹外面世界的语言真是五花八门……但要说写界面好用还是声明式的，OOP </span>写界面特别过程式就，扭曲，痛苦，但无疑性能会更好。</p>]]></content:encoded>
            <category domain="https://sansui233.com/categories/Diary">Diary</category>
        </item>
        <item>
            <title><![CDATA[懒、快节奏与赛博巨婴]]></title>
            <link>https://sansui233.com/posts/2024-11-13-懒-快节奏与赛博巨婴</link>
            <guid>https://sansui233.com/posts/2024-11-13-懒-快节奏与赛博巨婴</guid>
            <pubDate>Wed, 13 Nov 2024 22:55:00 GMT</pubDate>
            <description><![CDATA[科技为了便利，可便利是否有尽头]]></description>
            <content:encoded><![CDATA[<p>1</p>
<p>今天我想把一张图从 iPad 传到 iPhone 时，突然感觉很麻烦，因为需要打开并解锁，ipad，打开照片，再点击分享，点击AirDrop。</p>
<p>然后猛然意识到，我是不是越来越懒了？</p>
<p>对于懒与对于快节奏的追求本质上是一回事，都是简化简化再简化。我对简化的追求似乎有无止境的趋势，也喜欢比对市面上的效率工具，但这真的能提高生产力吗？</p>
<p>从前拿着U盘传照片，会感叹信息化的便利。我学习计算机也想做让生活便利的事情，在更短的时间去体验到更多原本无法体验到的东西。后来用 qq 传照片，也感觉很方便。是什么时候开始连 AirDrop 都嫌弃太麻烦了呢？是不是对于我，只有意念传输才是终点？可那之后又能如何呢？</p>
<p>2</p>
<p>生活的意义来自于过程，而非终点。而衡量事物价格来自于终点，而非过程。</p>
<p>毫无疑问，工作、劳动力是商品化的，意义与复杂性从不等于价格。不如说以找寻意义的方式寻找工作，很大程度上会面临吃不上饭。</p>
<p>3</p>
<p>从前会写书信，后来能随时短信联系变得好方便，一个月发几十块的短信。再后来即时通讯工具出来，联络更便宜更方便了，可人渐渐变成了24小时 oncall 状态，隔几个小时不看微信就会被说太慢了。大概一天只看两次微信的已经是异端了。</p>
<p>也许和人有关，微信从一个方便联系感情的软件，变成了生产力工具，是随时随地接受需求的怪物。我起初能理解在微信同时加工作的人和亲人，之后变得难以理解，到现在又变得可以理解，感受是大不相同。从前是四海为友，后来是要把社交分开，到现在是感觉其实都是一回事，亲人不会更特别。</p>
<p>当真的想要放松联络时，就会使用其他软件了。为什么 qq 依然在年轻人中流行？其实就是长辈不用。qq 的用户群有特别老的和特别年轻的，中间有明显的断层。</p>
<p>4</p>
<p>国人非常喜欢开发效率类工具，也喜欢记录。近几年新的效率工具，我所知道的绝大部分是国人在开发。可能与老中整体的环境相关。在我记忆中，如果一件事做得不好，就是要反省的，如果一件事做得好但慢，那就是没有效率。「效率」这个词似乎成为了魔咒。</p>
<p>再加上不要自大、时刻谦逊、居安思危等等，于是养成了无法接受任何夸赞的性格。夸就是客套，真夸就是直冒冷汗。嗯，只要还面对着别人，没有一件事是我满意的。满意的东西现在会小心收藏起来，像 led 屏一样，不要轻易就被弄碎了。</p>
<p>5</p>
<p>人类造就科技成长，但又被科技裹挟，造就一个个被高度封装的便利化包裹的巨婴。从逻辑上说，国内早就已经进入赛博朋克，只是社会形态还没有跟上。</p>
<p>这类抽象思考的空虚感令人害怕，时常觉得早已非人。也可能只是我的个人想法。希望脱离宏大叙事，去做出微小的选择。</p>
<p>想画漫画了，草。</p>
<p>写于2024年11月13日03时15分。</p>]]></content:encoded>
            <category domain="https://sansui233.com/categories/Diary">Diary</category>
        </item>
        <item>
            <title><![CDATA[把 draw.io 装修为简单且现代的白板应用]]></title>
            <link>https://sansui233.com/posts/2024-11-12-把drawio装修为简单美观的白板应用</link>
            <guid>https://sansui233.com/posts/2024-11-12-把drawio装修为简单美观的白板应用</guid>
            <pubDate>Tue, 12 Nov 2024 05:19:00 GMT</pubDate>
            <description><![CDATA[装修无止境！]]></description>
            <content:encoded><![CDATA[<link rel="preload" as="image" href="https://img-cf.sansui233.com/imgs/2024/11/202411120511240.webp"/><link rel="preload" as="image" href="https://img-cf.sansui233.com/imgs/2024/11/202411120511552.webp"/><link rel="preload" as="image" href="https://img-cf.sansui233.com/imgs/2024/11/202411120516688.webp"/><link rel="preload" as="image" href="https://img-cf.sansui233.com/imgs/2024/11/202411120513014.webp"/><link rel="preload" as="image" href="https://img-cf.sansui233.com/imgs/2024/11/202411120514766.webp"/><link rel="preload" as="image" href="https://img-cf.sansui233.com/imgs/2024/11/202411120511067.webp"/><link rel="preload" as="image" href="https://img-cf.sansui233.com/imgs/2024/11/202411120515358.webp"/><link rel="preload" as="image" href="https://img-cf.sansui233.com/imgs/2024/11/202411120516990.webp"/><p><a href="http://draw.io">draw.io</a> 是一个功能丰富的流程图绘制软件。此前写论文时我一直使用这个软件画图。在没有系统性的画图需要，转而变成了有时想要随手画矢量示意图后，这个软件启动交互流程步骤繁琐，我便极少使用它了。但在使用了 tldraw, excalidraw 后，又回到了 <a href="http://draw.io">draw.io</a>，才发现这个软件的可定制性其实非常强，完全能满足随手画图的需要。这里记录一下如何把 draw.io 变成一个更适合打开即用的、默认效果更加现代的白板应用。</p>
<p><img src="https://img-cf.sansui233.com/imgs/2024/11/202411120511240.webp" alt="image.png"/></p>
<p>（草……windows 截图这边缘的黑框好丑啊！）</p>
<h2>为什么是 draw.io</h2>
<p>先对比一下适合需求的竞品（不想看请跳转下一节）：</p>
<ul>
<li><a href="https://www.microsoft.com/en-us/microsoft-365/visio/flowchart-software">visio</a>: 收费，而且 mac 上没有。</li>
<li><a href="https://www.tldraw.com/">tldraw</a>, <a href="https://excalidraw.com/">excalidraw</a>: 更适合作为 sdk 使用，作为成品有些过于简单，在易用的同时，想多做一点非流程图的东西又很复杂，中文字体也不契合其默认的手写设计。而且并没有打包为桌面 App，文件关联是个问题。</li>
<li><a href="https://www.processon.io/">processon</a>: 要登录</li>
<li><a href="https://www.figma.com/">figma</a>: 要用梯子登录</li>
<li>powerpoint: ……我只是想偶尔画个示意图</li>
<li>飞书: 每30天要扫码登录 ……我只是想偶尔画个示意图</li>
<li>adobe illustrator: 没有常用预制样式库，漫长的启动时间，对于没接触过的人学习成本很高。</li>
<li>无边记、goodnotes: 苹果移动端生态 only</li>
</ul>
<p><a href="http://draw.io">draw.io</a> 没有上述的问题，但它由于设计之初不是个草图应用，所以：</p>
<ul>
<li>默认较为重型的 UI</li>
<li>启动先选择储存位置，太慢了</li>
<li>默认组件样式很丑，看起来只适合工控图</li>
<li>有时会感觉曲线箭头很难调，怎么都不流畅</li>
</ul>
<p>我根据以上三点问题大致说一下如何改进。</p>
<h2>更换UI布局</h2>
<p>默认的 UI 较为传统的重型设计，熟悉这类UI是相当好用的，但按钮组过多会显得不够轻便。在 <code>其它→主题→外观</code> 中可以更换为其他的主题，有5套可用：经典、极简、简易、草图、atlas。</p>
<p>我个人用得比较多的是「简易」，并且关掉了左侧栏形状库的栏，改为用顶栏，右侧格式栏在顶部有快速按钮展开。</p>
<p>习惯 tldraw、excalidraw 的用户应该还是更适合「草图」主题，绑定了基础形状的快捷键。需要去手动调出格式栏。</p>
<p><img src="https://img-cf.sansui233.com/imgs/2024/11/202411120511552.webp" alt="image.png"/></p>
<h2>更改启动流程</h2>
<p>默认情况下，启动时会弹出选择保存位置的框。新建画布时，又会先看到一大串模板的选择题，还得去想命名。但很多时候，随便画图是不需要保存的。</p>
<p>在经典主题下，需要去「其它」→「显示开始画面」上取消勾选。在其它的主题下，则需要去菜单的「设置」→「配置」里取消勾选「显示开始画面」。</p>
<p><img src="https://img-cf.sansui233.com/imgs/2024/11/202411120516688.webp" alt="image.png"/></p>
<h2>配置默认样式</h2>
<p>要做到更改默认样式，需要写 JSON 配置。尽管可以在侧栏按「设置为默认样式」，但只能当前打开的窗口生效，刷新、新开文档都会导致默认样式回到最初的样子。</p>
<p>在经典主题下，需要通过 「其它」→「配置」打开，其它主题下，则是「设置」→「配置」。</p>
<blockquote>
<p><strong>我的配置已经上传到 <a href="https://gist.github.com/Sansui233/a7f5b88e35194f82b1a76a7e05df4f5c">gist</a>。</strong></p>
</blockquote>
<p>JSON 写法参考了如下文档：</p>
<ul>
<li><a href="https://drawio-app.com/blog/customise-default-shape-libraries-templates-and-plugins-in-draw-io-for-confluence-cloud/">Customise default shape libraries, templates and plugins in draw.io for Confluence Cloud - draw.io</a></li>
<li><a href="https://www.drawio.com/doc/faq/configure-diagram-editor">Configure the draw.io editor</a></li>
</ul>
<p><a href="http://draw.io">draw.io</a> 的图形分为 vertex（顶点图形） 和 edge（箭头、线段）两类，选中按 <code>ctrl + e</code> 即可查看当前图形应用的样式。</p>
<h3>配色与样式设计</h3>
<p>整体采用的粗线条粗体，比较契合现代简约又活泼的趋势。edge 采用黑色，与高饱和的 vertex 非常好搭配。</p>
<p>直接抄的无边记的颜色，有的有轻微的改动。不过无边记最印象化的水蓝色没有抄上去。</p>
<p>默认的配色改为了最后一个蓝色。以下配色均可以在右侧的「格式栏」中找到并应用。</p>
<p><img src="https://img-cf.sansui233.com/imgs/2024/11/202411120513014.webp" alt="配色方案.png"/></p>
<h3>关于圆角矩形</h3>
<p>现代设计中圆角矩形用得更多。对于圆角的弧度，可以通过属性 Arc Size 去调整。可以点击设置为默认样式，也可以配置到 JSON 里。</p>
<p><img src="https://img-cf.sansui233.com/imgs/2024/11/202411120514766.webp" alt="image.png"/></p>
<p>如果你使用的「经典」主题，需要自己选择圆角矩形的图形。在「草图」主题下，按 <code>D</code> 就是默认配置好的圆角矩形，相当简单。「简易」主题下的位置如图：</p>
<p><img src="https://img-cf.sansui233.com/imgs/2024/11/202411120511067.webp" alt="image.png"/></p>
<h3>关于曲线设置</h3>
<p>曲线设置不对会变得很难调整，一张图说明大多数情况下的曲线操作与设置：</p>
<p><img src="https://img-cf.sansui233.com/imgs/2024/11/202411120515358.webp" alt="曲线.png"/></p>
<h3>想更换为手写风格？</h3>
<p>在不选中任何东西的情况下，把右侧格式栏的草图勾选上即可，就可以获得类似 excalidraw 的手写风格啦！</p>
<p>另外，如果没有自定义 JSON， 「草图」主题下的默认样式也是手写风格的。</p>
<h3>关于默认字体（附网页用字号推荐）</h3>
<p>JSON 中这几个字段设置默认字体。我默认英文是 Inter，中文是使用的系统黑体。文字大小我设置为了网页标准 16px。</p>
<pre><code class="hljs language-json"><span class="hljs-punctuation">{</span>
  <span class="hljs-attr">&quot;customFonts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span>
    <span class="hljs-string">&quot;Inter&quot;</span><span class="hljs-punctuation">,</span>
    <span class="hljs-string">&quot;pingfang sc&quot;</span>
  <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span>
  <span class="hljs-attr">&quot;defaultVertexStyle&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>
    <span class="hljs-attr">&quot;fontSize&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">16</span><span class="hljs-punctuation">,</span>
    <span class="hljs-attr">&quot;fontFamily&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Inter&quot;</span>
  <span class="hljs-punctuation">}</span><span class="hljs-punctuation">,</span>
  <span class="hljs-attr">&quot;defaultEdgeStyle&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>
    <span class="hljs-attr">&quot;fontSize&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">16</span><span class="hljs-punctuation">,</span>
    <span class="hljs-attr">&quot;fontFamily&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Inter&quot;</span>
  <span class="hljs-punctuation">}</span>
<span class="hljs-punctuation">}</span>
</code></pre>
<p>另外介绍一下常用网页文字大小的规范，现代的美术设计由于自己屏幕很大，或者对标准视距缩放大小没太多概念，非常容易把字给设置得很小（点名星穹铁道）</p>
<ul>
<li>16px 为默认正文大小，但由于主要是考虑了希腊字母面积比较小，所以也有的中文网站会设置为 15px。</li>
<li>14px 偏次级小段落、不重要的文字，长时间阅读会累。</li>
<li>13px 为代码常用大小。</li>
<li>12px 已经非常小了，是正常视距下最小可视大小，适合做脚注、引用。</li>
</ul>
<p>再小的字号不推荐作为内容性文本使用。</p>
<h3>关于背景网格</h3>
<p>在简易主题中默认关闭的，经典主题中可以通过配置 JSON 为默认关闭。关掉背景网格会显得比较现代化。</p>
<pre><code class="hljs language-json"><span class="hljs-punctuation">{</span>
  <span class="hljs-attr">&quot;defaultGridEnabled&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span>
  <span class="hljs-attr">&quot;defaultPageVisible&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span>
<span class="hljs-punctuation">}</span>
</code></pre>
<p>但还是有时可能需要开启网格，那就什么都不选中，右侧栏开启网格就可以了。</p>
<h2>其他使用 Tips</h2>
<h3>导出设置</h3>
<p>导出时注意一下缩放。网页标准大小字体为 16px，编辑时画布 100% 缩放下一切正常。但是当导出为位图（jpg, png）时，需要根据你的显示器缩放进行放大，否则文字一定会糊。</p>
<p>我的显示器为 150% 界面缩放，因此需要缩放到 150% 才能大概清晰，如果要让 4k 屏也看得无比清晰，最好导出 200% 缩放，且 dpi 尽量在 180 以上。</p>
<p>另外可以直接框选后右键复制，不一定要导出。</p>
<h3>一个文件画多张图</h3>
<p>经常会遇到多张同系列图的需求。为此，你可以选择都画在一页上，要用时框选特定范围，右键复制为 png 。这样很适合边聊天边画图发给别人，但也会失去缩放、加白底、加白边等设置。至少你得打个组，把 16px 的文字放大后再复制，以确保结果不会糊。</p>
<p><a href="http://draw.io">draw.io</a> 也可以分页，建议是一页一个图，可批量导出。</p>
<h3>从 Mermaid 生成图、嵌入 Notion</h3>
<p>mermaid 是一种画流程图的代码，比较适合不想可视化排列对齐的强迫症。</p>
<p>draw.io 可以在菜单中的「高级」使用 mermaid 生成图，下面的图就是导入 mermaid 生成的。</p>
<p><img src="https://img-cf.sansui233.com/imgs/2024/11/202411120516990.webp" alt="未命名绘图.png"/></p>
<p>由于 notion 无法画图，在 notion 我都是用的 mermaid，有点不好看但至少目的达到了。不过最近发现，<a href="http://draw.io">draw.io</a> 的导出可以选择直接嵌入notion，点开还能进行编辑……实现方式是图像数据全部存放在了链接里……不得不说 draw.io 自主兼容性做得很强，从接入了那么多网盘就可见一斑。</p>
<h3>自定义CSS</h3>
<p>如果还是觉得 UI 太丑了，在 <a href="https://www.drawio.com/doc/faq/configure-diagram-editor">Configure the draw.io editor</a> 中可以找到自定义 CSS 的部分（但我觉得 UI 排列上还是不错的，这足够了）</p>]]></content:encoded>
            <category domain="https://sansui233.com/categories/工具">工具</category>
        </item>
        <item>
            <title><![CDATA[Windows 调整之中文字体]]></title>
            <link>https://sansui233.com/posts/2023-09-29-windows-system-chinese-fonts-adjustment</link>
            <guid>https://sansui233.com/posts/2023-09-29-windows-system-chinese-fonts-adjustment</guid>
            <pubDate>Thu, 01 Aug 2024 18:08:00 GMT</pubDate>
            <description><![CDATA[让 windows11 字体更好看的一些设置与字体浅谈]]></description>
            <content:encoded><![CDATA[<link rel="preload" as="image" href="https://img-cf.sansui233.com/imgs/2024/08/202408190158527.webp"/><link rel="preload" as="image" href="https://img-cf.sansui233.com/imgs/2024/08/202408190318888.webp"/><link rel="preload" as="image" href="https://img-cf.sansui233.com/imgs/2024/07/202407260100518.webp"/><blockquote>
<p>以下仅适用于低于 4k 缩放 200% 的显示器</p>
</blockquote>
<p>微软雅黑作为随着 Windows7 出现的字体，加上遥遥领先（？）的 ClearType，在当时的 1080p 显示器上十分清晰易读。</p>
<p>但如今的显示器分辨率越来越高，旧版微软雅黑的设计存在着明显的缺陷。</p>
<p>一是其字形设计并不平衡，中宫过大，有的字形可以以难看来形容；二是微软雅黑字形只在 4K 屏 200% 缩放（以上的配置）上有着较好的显示效果。</p>
<p>微软曾经设计过“另一版的微软雅黑”，即 Noble Scarlet，但并没有在正式的系统中使用。这一版字体设计依然中宫偏大，但相对老版收敛了不少，平衡了一些。</p>
<p>另外，如果你不巧像我一样用着 2K 或 2.5K 屏，</p>
<ul>
<li>在 24寸时，100% 缩放字体比较合适，但与 16 寸 1080p 显示器差不多清晰度，不过屏幕可用空间更大。</li>
<li>在 21 寸时，100% 缩放字体会偏小，比较锻炼眼睛。150% 缩放字体大小比较合适，效果更细腻，但字型会比较怪，且屏幕可用空间与 1080p 相同。</li>
<li>在 16 寸时，150% 缩放字体稍微偏小，效果比较细腻，但非整数倍缩放+ClearType 的加持下，一些像素被吞掉，笔画的间距不平衡，有种“ windows 特有的字被虫噬的美”。</li>
</ul>
<p><img src="https://img-cf.sansui233.com/imgs/2024/08/202408190158527.webp" alt="字形"/></p>
<p>可以看到，上图的 100% 200% 缩放没有字形变形问题，可以说微软雅黑小字优化是考虑的 100% 缩放。100% 缩放显得糊则是因为图片放大放大倍率过高，实际不会有糊，而是有锯齿感。</p>
<p>150% 缩放会由于 clearType 的“锐化”导致字形变化，不知道的还以为换了个字体。如果是125%、175%的缩放，字体变形更加糟糕。</p>
<p>造成缩放问题的原因大概可以用下图进行简要解释：</p>
<p><img src="https://img-cf.sansui233.com/imgs/2024/08/202408190318888.webp" alt="缩放"/></p>
<p>Mac 上的 Retina 渲染相当于 4k 200% 缩放起步。而 windows 下， 2k-2.5k 的屏幕都在 200% 以下的缩放中挣扎。如果软件没有适配高分屏，没有 clearType，强制进行双线性缩放（常见于图片UI），就会显得非常糊。想体验这样的糊，可以下载旧版的原神启动器。</p>
<h2>需要准备</h2>
<ul>
<li>
<p><strong>Noble Scarlet</strong>  替换系统的微软雅黑。由于 Noble Scarlet 是一个未完成的字体，普遍使用的是社区修正版，以下是资源参考。</p>
<ul>
<li><a href="https://bbs.pcbeta.com/viewthread-1960120-1-4.html">pcbeta</a></li>
<li><a href="https://www.bilibili.com/read/cv6059905/">bilibili</a></li>
</ul>
</li>
<li>
<p>系统字体替换工具：搜索 “<a href="https://www.fishlee.net/soft/SysFontReplacer/">字体替换工具 by 随风飘扬</a>”。替换完后重启，否则可能有缩放错误。另外，github 上有一个非侵入式的系统字体替换工具 <a href="https://github.com/Tatsu-syo/noMeiryoUI">noMeiryoUI</a>，可惜换不全 windows 11，只是作为预览不同字体在系统上的效果倒是个很不错的工具。</p>
</li>
<li>
<p><a href="https://www.mactype.net/"><strong>MacType</strong></a> 改善 ClearType 的虫噬渲染方式带来的不均匀，使用后提升非常非常大。</p>
</li>
<li>
<p><strong><a href="https://source.typekit.com/source-han-serif/cn/">思源宋体</a></strong>：推荐将浏览器的 Serif 字体设置为此字体。默认的宋体真的，不论中文英文，都很丑……只适合打印。</p>
</li>
</ul>
<h2>常用正文黑体简述</h2>
<p><img src="https://img-cf.sansui233.com/imgs/2024/07/202407260100518.webp" alt=""/></p>
<h3>苹方</h3>
<p>苹方是一款设计上很优秀的字体，其间架结构、中宫非常平衡，既兼顾了传统的汉字笔画细节又有规整而现代的几何化，间距合理，阅读起来非常舒适。</p>
<p>但是……苹方的设计缺字重。</p>
<p>在设计上，苹方没有 Heavy 字重（<a href="https://support.apple.com/en-us/103203">参考</a>）。而在<a href="https://github.com/paraself/PingFang-Fonts">流行的 github 苹方字体仓库</a>中，则是将 Bold 字重映射到了 Heavy，而将原本的Medium 映射到了 bold。虽然这个问题不是苹果设计的导致的，而是一个再次分发时的错误，但致使目前网上能搜索到的第三方仓库的苹方字体整体字重均偏细。</p>
<p>另外，苹方在 2.5K 屏上表现非常糊，苹方问世时已经进入了 Retina 屏的时代，没考虑过在低 PPI 屏幕上的表现（不是4K屏缩放200%都别用）。</p>
<p>第三，苹果设备的显示的西文字体是 <a href="https://zh.wikipedia.org/zh-hans/San_Francisco_(2014%E5%B9%B4%E7%9A%84%E5%AD%97%E4%BD%93)">San Francisco</a>，不是苹方。在 <a href="https://lrd.im/blog/2022-01-17">细数 Pingfang SC 的七宗罪</a> 中，也提到仅使用苹方导致不同设备字体 fallback 的不一致的问题。而作为系统字体里的其他问题，例如缺失本地化的字型，也是大部分字体所缺乏的，这已经不仅仅是一个字体问题，而是和字体相关的和 UI 技术标准化问题，难以仅通过字体解决。而无比例数字、冒号不垂直居中、没有垂直标点等细节，则都是因为苹果显示标点数字用的 SF 字体，苹方在此类字符上算是基本能用，但缺少多种场景下的细节。</p>
<p>其他资源： <a href="https://www.figma.com/community/file/1089832205783108371">Pingfang for windows - Figma</a></p>
<p>另外，苹方是有版权限制，以下字体除了思源黑体，和大厂的开源黑体，均不可免费商用。</p>
<h3>思源黑体系列</h3>
<p>思源黑体(Noto sans) 是 google 的开源可商用字体，用于 Android 系统，在开源可商用的的黑体其质量无可替代。</p>
<p>更纱黑体是思源黑体的衍生，修改了西文部分，相比思源黑体上更符合作为 无明显风格特征的系统字体，带 hinting 在 1080p 和 2.5k 下都能保证良好的清晰度。</p>
<p>但是，思源黑体系列设计相比于国产的商用字体并不能算好，有时间架结构比较怪异，字形的细节不太统一，比如“用”字明显矮了一截，整理风格上给人一种不稳定感。同时也不是一个大气的字体，比如口字旁处理对于黑体而言偏小，“用”字矮了一些，但是在宋体设计上，“用”字矮的这一截反而让字体看起来平衡。而一个系列的字体衬线、非衬线的统一感来源于其比例，个人理解为思源/更纱系列是优先考虑宋体的字形，和黑体的比例有一定的结合。整体而言还是宋体的设计更加优秀。</p>
<p>相对而言更纱黑体更适合作为系统字体，有着合理的 hinting。思源黑体是不太适合低 ppi 屏的，它的 Regular 字重看起来像 Bold。</p>
<h3>方正兰亭系列（微软雅黑）</h3>
<p>Noble Scarlet （社区版）常规体是新设计中宫收窄的微软雅黑，而粗体是方正兰亭黑 Pro，因此在加粗时，字体明显会变小一圈。</p>
<p>微软雅黑系列字体在标点处理上很差，最直观的就是全角引号，太像半角的处理方式，很难看出前引号与后引号的区别。其实我在写这一篇文的时候，换了 Typora 的字体，才发现前后引号全打反了……</p>
<p>方正兰亭黑 Pro 想对于两版微软雅黑都有着更小的中宫，字形设计中正。但也由于稍小了一些，在低 ppi 屏的小字上笔画更容易显得不太均匀，渲染效果不太好。另外使用此字体需要相比于其他所有字体更大的行距，因为其较小的中宫，字间距显得相对宽了。</p>
<h3>汉仪旗黑系列</h3>
<p>近年来的国产安卓厂商字体都是汉仪旗黑的衍生，代表阿里的普惠体、鸿蒙体、小米的字体、Oppo的字体。</p>
<p>这系列字体间架结构合理，但笔画上更加激进，减弱了起笔与收笔的的传统突出，以追求几何感与现代的科技感。在观感上，这样规矩的方形会使得字体相比方正系列更加圆润，多了现代感但少了汉字的人情味，用于阅读小说时尤其明显。</p>
<p>仅字形而言，作为 UI 是非常不错的。不过 Misans 渲染出来明显偏粗，我没有测试其他同系列字体是否也有这样的问题。</p>
<h2>改掉 Windows 的默认中文无衬线字体</h2>
<p>很多无法分别修改中英字体的 windows 原生应用，当只设置了英文字体时，显示的中文是新宋体（SimSun），比如 vs studio。原因在于系统里的 Microsoft Sans-serif 字体名，回落到的第一个字体就是新宋体……难以想象微软雅黑出了十多年了还有这样的问题。</p>
<p>解决办法：</p>
<ul>
<li>winkey + R, 输入 regdit，进入 windows注册表</li>
<li>进入 <code>HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\FontLink\SystemLink</code></li>
<li>把 Microsoft Sans Serif 的值中 SIMSUN.TTC 那一行去掉。这样默认的无衬线体就会往后 fallback 到系统的微软雅黑上。</li>
<li>把 <code>Segoe UI</code> 的 <code>TAHOMA.TTF,Tahoma</code> 挪到 <code>MSYH.TTC,Microsoft </code>后面</li>
</ul>
<hr/>
<p>创建于 2023-09-29 02:25:44</p>
<p>更新于 2024-08-19 01:45:31</p>]]></content:encoded>
            <category domain="https://sansui233.com/categories/工具">工具</category>
        </item>
        <item>
            <title><![CDATA[Windows 命令行相关配置之 msys2+zsh+zi]]></title>
            <link>https://sansui233.com/posts/windows-zsh-conf</link>
            <guid>https://sansui233.com/posts/windows-zsh-conf</guid>
            <pubDate>Fri, 15 Mar 2024 20:35:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>长久以来，遇到 bash 脚本会临时切 git-bash 中的 bash。由于用的语言都有自己的包管理器，倒也一直够用。但是最近涉及到一些 c++，由 git-bash 提供的最小化环境东西缺得太多，几乎不能当个日常 shell 用，也没有 pacman 包管理，最后决定还是单独安装 msys2。</p>
<p>git-bash 和 msys2 同时安装不会冲突。msys2 是独立的 home 目录，而 git-bash 是与 windows 当前用户通用的。我本来想卸载 git-bash，但由于我现在还是用 powershell，最终发现 git-bash 不能卸载。一是 posh-git 只支持 git-bash 的 git；其次是，astro-nvim 中的一些插件需要 <code>git.exe</code> 在环境变量下，使用 alias 链接的 git 不行，而手动加环境变量会把 git 以外的程序也加进去，造成 msys2 的工具与 powershell 本身工具的冲突。</p>
<p>想来想去，决定保留 git-bash 到最小化的状态，当成 powershell 的插件用。unix-like shell 以及相应的包管理还是 msys2。</p>
<h2>安装 msys2</h2>
<p>见 <a href="https://www.msys2.org/">https://www.msys2.org/</a> 。安装过程没什么好说的，唯一要注意的在于安装目录的权限必须是当前用户可以完全控制，否则后续各种包的安装都会有一大堆问题。如果因为强迫症安装到 Program Files 下，则需要手动添加当前用户的权限。</p>
<h3>软链接问题</h3>
<p>windows 的软链接本来也是个很麻烦的问题。到 msys2 下，还多了一个软链接方式兼容问题。msys2 默认是 <code>ln -s</code> 是复制，要用 windows 风格的软链接，可以改安装目录下的各种 <code>.ini</code> 文件中的配置。</p>
<pre><code>MSYS=&quot;winsymlinks:lnk&quot;
</code></pre>
<h2>zsh + zi</h2>
<h3>zsh 的安装</h3>
<pre><code class="hljs language-bash">pacman -S zsh
</code></pre>
<p>老实说个人觉得和 linux 上的 zsh 相比还是差了一大截，用起来和 bash 感觉差不多。只是 zsh 插件管理的选择比较多</p>
<h3>zi 的安装</h3>
<p>关于 zsh 插件管理，之前在 git-bash 上我也安装了 oh-my-zsh，但是环境原因，遇到的 bug 着实太多，基本不用。另外，最大的问题是启动太慢，每次启动长达 10 秒。我分析了一下初始化脚本的执行时长，发现拖慢速度的罪魁祸首是初始化命令补全（就不能异步吗啊！）当然用 mac 时 omz 也有点慢，但显然没有 msys2 里这么离谱。</p>
<p>下午吐槽这个事情后，Antarx 说他换 zi 了。我试了下，确实很快，从没超过3s，令人偷税。</p>
<ul>
<li>zi 的安装：<a href="https://wiki.zshell.dev/docs/getting_started/installation">https://wiki.zshell.dev/docs/getting_started/installation</a></li>
</ul>
<p>安装过程最好在 msys2 的 GUI 终端下进行，因为需要登录的默认目录是在 home 的当前用户下。但这里又有另一个问题 —— msys2 不带 git。如果系统有另外安装 git，想复用，可以 cmd 启动 zsh，不指定启动的目录，指定继承环境变量。</p>
<pre><code class="hljs language-cmd">C:\\msys64\\msys2_shell.cmd -defterm -no-start -ucrt64 -use-full-path -shell zsh
</code></pre>
<h3>zi 的配置与插件</h3>
<p><a href="https://wiki.zshell.dev/docs/getting_started/installation">安装Wiki</a> 在不断更新，检查最新版的安装方法。</p>
<p>安装好后，<code>.zshrc</code> 里添加如下，写好重启 zsh 即可。</p>
<pre><code class="hljs language-bash">$ vi ~/.zshrc

<span class="hljs-comment"># zsh</span>
<span class="hljs-built_in">setopt</span> AUTO_PUSHD

<span class="hljs-built_in">export</span> CLICOLOR=1
<span class="hljs-built_in">export</span> LSCOLORS=ExGxFxdaCxDaDahbadeche
<span class="hljs-built_in">zstyle</span> <span class="hljs-string">&#x27;:completion:*&#x27;</span> list-colors <span class="hljs-string">&quot;<span class="hljs-variable">${(@s.:.)LS_COLORS}</span>&quot;</span>
<span class="hljs-built_in">alias</span> <span class="hljs-built_in">ls</span>=<span class="hljs-string">&#x27;ls --color=auto&#x27;</span>
<span class="hljs-built_in">alias</span> la=<span class="hljs-string">&#x27;la --color=auto&#x27;</span>

<span class="hljs-comment"># zi</span>
<span class="hljs-built_in">typeset</span> -A ZI
ZI[BIN_DIR]=<span class="hljs-string">&quot;<span class="hljs-variable">${HOME}</span>/.zi/bin&quot;</span>
<span class="hljs-built_in">source</span> <span class="hljs-string">&quot;<span class="hljs-variable">${ZI[BIN_DIR]}</span>/zi.zsh&quot;</span>

<span class="hljs-built_in">autoload</span> -Uz _zi
(( <span class="hljs-variable">${+_comps}</span> )) &amp;&amp; _comps[zi]=_zi
<span class="hljs-comment"># source &lt;(curl -sL init.zshell.dev); zzinit</span>


<span class="hljs-comment"># 插件</span>
<span class="hljs-comment"># 提前运行一次 zi ice pick&quot;async.zsh&quot; src&quot;pure.zsh&quot;</span>
zi light sindresorhus/pure 
zi light agkozak/zsh-z  <span class="hljs-comment"># 不能用 eval &quot;$(zoxide init zsh)&quot; 会冲突</span>
zi snippet OMZP::git
zi light zsh-users/zsh-completions
<span class="hljs-comment"># 提前运行一次 zi ice wait lucid atload&#x27;_zsh_autosuggest_start&#x27;</span>
zi light zsh-users/zsh-autosuggestions 
<span class="hljs-comment"># 提前运行一次 zi ice wait lucid atinit=&#x27;zpcompinit&#x27;</span>
zi light zdharma/fast-syntax-highlighting


</code></pre>
<h2>Windows Terminal 设置</h2>
<p>在设置里改 json，加相应的 profile。可以使用 <code>-use-full-path</code> 继承 windows 系统的环境变量。</p>
<pre><code class="hljs language-json"><span class="hljs-punctuation">{</span>
    <span class="hljs-attr">&quot;commandline&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;C:\\msys64\\msys2_shell.cmd -defterm -here -no-start -ucrt64 -use-full-path -shell zsh&quot;</span><span class="hljs-punctuation">,</span>
    <span class="hljs-attr">&quot;guid&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;{c420e0af-28d9-4742-a6b8-83d5fcf424e9}&quot;</span><span class="hljs-punctuation">,</span>
    <span class="hljs-attr">&quot;icon&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;C:\\msys64\\ucrt64.ico&quot;</span><span class="hljs-punctuation">,</span>
    <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;msys2 zsh&quot;</span><span class="hljs-punctuation">,</span>
    <span class="hljs-attr">&quot;startingDirectory&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;%USERPROFILE%&quot;</span>
<span class="hljs-punctuation">}</span>
</code></pre>
<h2>Vscode Terminal 设置</h2>
<pre><code class="hljs language-json"><span class="hljs-attr">&quot;terminal.integrated.profiles.windows&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>
    <span class="hljs-attr">&quot;MSYS2 zsh&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>
        <span class="hljs-attr">&quot;path&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;C:\\msys64\\msys2_shell.cmd&quot;</span><span class="hljs-punctuation">,</span>
        <span class="hljs-attr">&quot;args&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;-defterm&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;-here&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;-no-start&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;-ucrt64&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;-use-full-path&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;-shell&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;zsh&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span>
        <span class="hljs-attr">&quot;env&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span> <span class="hljs-attr">&quot;MSYSTEM&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;UCRT64&quot;</span> <span class="hljs-punctuation">}</span><span class="hljs-punctuation">,</span>
        <span class="hljs-attr">&quot;overrideName&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span>
    <span class="hljs-punctuation">}</span><span class="hljs-punctuation">,</span>
<span class="hljs-punctuation">}</span><span class="hljs-punctuation">,</span>
</code></pre>
<h2>Mintty 设置</h2>
<p>Mintty 是 msys2 里默认的终端 GUI，默认 shell 是 bash。修改 <code>mingw64.ini</code> 为如下内容。</p>
<pre><code>MSYS=winsymlinks:lnk
MSYS2_PATH_TYPE=inherit
MSYSTEM=UCRT64
SHELL=/usr/bin/zsh
</code></pre>
<h2>npm设置</h2>
<p>如果有使用 npm 进行包管理，继承自环境变量的 npm 补全时会报错。需要设置为</p>
<pre><code class="hljs language-shell"><span class="hljs-meta prompt_">$ </span><span class="bash">npm config edit</span>
script-shell=C:\msys64\usr\bin\bash.exe
shell=C:\msys64\msys2\usr\bin\bash.exe # 重要<span class="hljs-meta prompt_">
$ </span><span class="bash">npm config list</span>
</code></pre>
<h2>conda 设置</h2>
<p>如果有使用 conda 进行 python 开发，继承自环境变量的 conda 默认初始化脚本也有问题……从 Github 上查到的解决方法……</p>
<pre><code class="hljs language-shell"><span class="hljs-meta prompt_"># </span><span class="bash">&gt;&gt;&gt; conda initialize &gt;&gt;&gt;</span><span class="hljs-meta prompt_">
# </span><span class="bash">!! Contents within this block are managed by <span class="hljs-string">&#x27;conda init&#x27;</span> !!</span>
if [ -f &#x27;/c/Users/me/miniconda3/Scripts/conda.exe&#x27; ]; then
    #eval &quot;$(&#x27;/c/Users/me/miniconda3/Scripts/conda.exe&#x27; &#x27;shell.zsh&#x27; &#x27;hook&#x27;)&quot;
    eval &quot;$(&#x27;/c/Users/me/miniconda3/Scripts/conda.exe&#x27; &#x27;shell.zsh&#x27; &#x27;hook&#x27; | sed -e &#x27;s/&quot;$CONDA_EXE&quot; $_CE_M $_CE_CONDA &quot;$@&quot;/&quot;$CONDA_EXE&quot; $_CE_M $_CE_CONDA &quot;$@&quot; | tr -d \x27\\r\x27/g&#x27;)&quot;
fi<span class="hljs-meta prompt_">
# </span><span class="bash">&lt;&lt;&lt; <span class="hljs-string">conda initialize &lt;&lt;&lt;</span></span>
</code></pre>
<h3>ssh配置共用</h3>
<p>如果有多个 ssh 账户的密钥，最好是软链接一下配置目录。注意需要前面的修改软链接方式，否则还是去资源管理器手动软链接吧。</p>
<pre><code class="hljs language-shell">ln -s /c/Users/me/.ssh ~/.ssh
</code></pre>
<h2>参考</h2>
<p><a href="https://hustlei.github.io/2018/11/msys2-for-win.html#%E5%AE%89%E8%A3%85git%E5%92%8Cvim">msys2-for-win</a></p>
<p><a href="https://sdl.moe/post/zsh-conf/">https://sdl.moe/post/zsh-conf/</a></p>]]></content:encoded>
            <category domain="https://sansui233.com/categories/工具">工具</category>
        </item>
    </channel>
</rss>